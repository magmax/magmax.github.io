<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>monitoring on El blog de MagMax</title>
    <link>https://magmax.org/tags/monitoring/</link>
    <description>Recent content in monitoring on El blog de MagMax</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://magmax.org/tags/monitoring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Monitorización con Graphite</title>
      <link>https://magmax.org/blog/monitorizacion-con-graphite/</link>
      <pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/monitorizacion-con-graphite/</guid>
      <description>
        
          &lt;p&gt;Actualmente está de moda utilizar &lt;a href=&#34;https://pypi.python.org/pypi/graphite-web/&#34;&gt;Graphite&lt;/a&gt; como base de cualquier sistema de monitorización, y sobre él añadir distintas herramientas. Éstas pueden estar orientadas al sistema de almacenamiento, interfaz para programas o interfaz para humanos.&lt;/p&gt;
&lt;p&gt;En este post analizaré el &lt;em&gt;stack&lt;/em&gt; de &lt;a href=&#34;https://pypi.python.org/pypi/graphite-web/&#34;&gt;Graphite&lt;/a&gt;, proponiendo diversas herramientas cuyo uso es bastante habitual.&lt;/p&gt;
&lt;p&gt;Al final del post, cualquiera con una Debian/Ubuntu debería tener instalado un
&lt;a href=&#34;https://pypi.python.org/pypi/graphite-web/&#34;&gt;Graphite&lt;/a&gt; básico con un panel muy molón.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/stats.png&#34;
         alt=&#34;Distintos tipos de gráficas&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;graphite&#34;&gt;Graphite&lt;/h2&gt;
&lt;p&gt;Es el corazón de todo el tinglado que vamos a montar.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pypi.python.org/pypi/graphite-web/&#34;&gt;Graphite&lt;/a&gt; sirve para recibir datos, guardarlos y después consultarlos. Por
defecto, &lt;a href=&#34;https://pypi.python.org/pypi/graphite-web/&#34;&gt;Graphite&lt;/a&gt; utiliza el &lt;em&gt;backend&lt;/em&gt; de &lt;a href=&#34;https://pypi.python.org/pypi/carbon/&#34;&gt;Carbon&lt;/a&gt;, que es otro servicio que
permite guardar datos en una base de datos (por llamarlo de alguna manera)
llamada &lt;a href=&#34;https://pypi.python.org/pypi/whisper/&#34;&gt;Wisper&lt;/a&gt;. Ésta utiliza un sistema de almacenamiento tipo &lt;strong&gt;Round Robin&lt;/strong&gt;: imaginad un vector de datos circular, donde cada cierto tiempo se escribe en la misma casilla.&lt;/p&gt;
&lt;p&gt;Realmente &lt;a href=&#34;https://pypi.python.org/pypi/graphite-web/&#34;&gt;Graphite&lt;/a&gt; es un &lt;a href=&#34;https://www.djangoproject.com/&#34;&gt;Django&lt;/a&gt;, por lo que está escrito en &lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;instalando-graphite&#34;&gt;Instalando Graphite&lt;/h3&gt;
&lt;p&gt;Ésta debe ser la sección más estúpida. En breve veréis por qué.&lt;/p&gt;
&lt;p&gt;Para instalarlo en debian, lo primero que haremos será:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;apt-get install graphite-web graphite-carbon
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Esto nos instala todo lo que necesitamos. Para configurarlo, basta leerse el archivo &lt;code&gt;/usr/share/doc/graphite-web/README.Debian&lt;/code&gt;, donde explican estupendamente los pasos a seguir.&lt;/p&gt;
&lt;p&gt;Como queremos tener algo al final de este &lt;em&gt;post&lt;/em&gt;, vamos a hacer algo muy básico (como &lt;strong&gt;root&lt;/strong&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;graphite-manage syncdb
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;chown _graphite:_graphite /var/lib/graphite/graphite.db
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;su -s /bin/bash -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/usr/bin/django-admin runserver --settings \
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  graphite.settings 0.0.0.0:8080&amp;#39;&lt;/span&gt; _graphite
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Básicamente: Hacemos que &lt;a href=&#34;https://www.djangoproject.com/&#34;&gt;Django&lt;/a&gt; cree la base de datos y se la asignamos al usuario &lt;code&gt;_graphite&lt;/code&gt;, y después lanzamos el django con la configuración básica. Esto está en el archivo de información que comenté antes.&lt;/p&gt;
&lt;p&gt;Podríamos haberlo montado con un &lt;a href=&#34;http://httpd.apache.org/&#34;&gt;Apache Httpd&lt;/a&gt; o con un &lt;a href=&#34;http://nginx.org/&#34;&gt;Nginx&lt;/a&gt;&amp;hellip; Pero eso complicaría este &lt;em&gt;post&lt;/em&gt;. Tenéis todo lo que necesitáis en &lt;code&gt;/usr/share/doc/graphite-web/README.Debian&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;interfaz-de-graphite&#34;&gt;Interfaz de Graphite&lt;/h3&gt;
&lt;p&gt;Ya podemos abrir &lt;a href=&#34;https://pypi.python.org/pypi/graphite-web/&#34;&gt;Graphite&lt;/a&gt; en http://localhost:8080 aunque de momento estará vacía.&lt;/p&gt;
&lt;p&gt;Bien&amp;hellip; Ésta es la interfaz básica para humanos. Es un poco horrible, pero no os preocupéis que luego la pintamos bonita.&lt;/p&gt;
&lt;p&gt;Vamos a meter algún dato, que si no esto no vale para nada. Podemos hacerlo
directamente con &lt;a href=&#34;https://es.wikipedia.org/wiki/Netcat&#34;&gt;netcat&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;magmax.test.examples 4 `date +%s`&amp;#34;&lt;/span&gt; | nc -q0 localhost &lt;span style=&#34;color:#ae81ff&#34;&gt;2003&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;con esto le estamos mandando los datos directamente a &lt;a href=&#34;https://pypi.python.org/pypi/carbon/&#34;&gt;Carbon&lt;/a&gt;, que es un servicio que por defecto escucha en el puerto 2003.&lt;/p&gt;
&lt;p&gt;Lo que le estamos mandando es la métrica &lt;code&gt;magmax.test.examples&lt;/code&gt;, con el valor
&lt;code&gt;4&lt;/code&gt; y el &lt;em&gt;timestamp&lt;/em&gt;. Éste es el formato que acepta &lt;a href=&#34;https://pypi.python.org/pypi/carbon/&#34;&gt;Carbon&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ejecutad el comando varias veces, esperando un rato entre ejecuciones e id variando el valor. Después podéis entrar en la interfaz web de Graphite en http://localhost:8080 y, en el gráfico principal, pulsad sobre &lt;code&gt;Graph options&lt;/code&gt;, &lt;code&gt;Line mode&lt;/code&gt; y seleccionad &lt;code&gt;Connected line&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Además vamos a reducir el rango dibujado, que por defecto es de 24 horas. Apuntad a los botones que están encima del gráfico y os saldrá un &lt;em&gt;tip&lt;/em&gt;. Pulsad sobre &lt;code&gt;select recent data&lt;/code&gt; y seleccionad 5 ó 10 minutos.&lt;/p&gt;
&lt;p&gt;En el árbol de la izquierda, id navegando hasta los nodos hoja, y veréis que el gráfico pinta los valores.&lt;/p&gt;
&lt;p&gt;Mola, ¿eh?&lt;/p&gt;
&lt;p&gt;Bueno, pues el gráfico que estáis generando tiene una URL que siempre generará
el mismo gráfico. Eso lo han aprovechado algunos paneles como &lt;a href=&#34;https://github.com/ripienaar/gdash&#34;&gt;Gdash&lt;/a&gt; para
mostrar &lt;em&gt;dashboards&lt;/em&gt; completos. Pero lo realmente molón es que se le puede
indicar que quieres esos datos en &lt;a href=&#34;http://json.org/&#34;&gt;Json&lt;/a&gt;, cosa que utilizan otros como &lt;a href=&#34;http://grafana.org/&#34;&gt;Grafana&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;grafana&#34;&gt;Grafana&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/python-diamond/Diamond&#34;&gt;Diamond&lt;/a&gt; es un servicio (&lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt; también) que genera estadísticas del sistema
y las manda a &lt;a href=&#34;https://pypi.python.org/pypi/carbon/&#34;&gt;Carbon&lt;/a&gt; para que podamos pintarlas con &lt;a href=&#34;https://pypi.python.org/pypi/graphite-web/&#34;&gt;Graphite&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Monitorización con ElasticSearch, Kibana y TopBeat</title>
      <link>https://magmax.org/blog/monitorizacion-con-elasticsearch-kibana-y-topbeat/</link>
      <pubDate>Thu, 28 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/monitorizacion-con-elasticsearch-kibana-y-topbeat/</guid>
      <description>
        
          &lt;p&gt;Los que me conocéis sabéis que soy un obseso del control&amp;hellip; de mis sistemas. Cuando ocurre algo, me gusta saber por qué ha ocurrido así.&lt;/p&gt;
&lt;p&gt;Por esta razón trato de mejorar los sistemas de monitorización. Me interesa tanto encontrar cosas que sean útiles como rápidas de montar. Y también eficientes.&lt;/p&gt;
&lt;p&gt;Eso me llevó a comenzar a desarrollar mi propio sistema de monitorización y
alertado. Pero he conocido &lt;a href=&#34;https://www.elastic.co/products/elasticsearch&#34;&gt;ElasticSearch&lt;/a&gt;, &lt;a href=&#34;https://www.elastic.co/products/kibana&#34;&gt;Kibana&lt;/a&gt; y &lt;a href=&#34;https://www.elastic.co/products/beats/topbeat&#34;&gt;TopBeat&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/elk.png&#34;
         alt=&#34;ELK: ElasticSearch, Logstash y Kibana&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;lo-que-voy-a-contar&#34;&gt;Lo que voy a contar&lt;/h2&gt;
&lt;p&gt;En los 10 breves minutos que se tarda en leer este post vamos a tener montado
todo un sistema de monitorización, tanto local como remoto, totalmente escalable
y de alta disponibilidad. Los únicos requisitos son tener un servidor con &lt;a href=&#34;https://www.java.com/&#34;&gt;Java&lt;/a&gt;
y &lt;a href=&#34;http://www.git-scm.com/&#34;&gt;Git&lt;/a&gt;, y monitorización completa de la máquina. No tendremos monitorización de
logs, cosa que podríamos añadir fácilmente con &lt;a href=&#34;https://www.elastic.co/products/beats/filebeat&#34;&gt;FileBeat&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Y sin más, comenzamos.&lt;/p&gt;
&lt;h2 id=&#34;tienes-prisa&#34;&gt;¿Tienes prisa?&lt;/h2&gt;
&lt;p&gt;Si tenéis prisa y no queréis leer todo el artículo, aquí podéis ver cómo monto todo el sistema, sin editar los archivos de configuración y en modo &lt;em&gt;localhost&lt;/em&gt;, en tan solo 4 minutos, pifias incluídas:&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/y42z9oToi4k&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Aquí tenéis el script del vídeo, aunque no aseguro que siga funcionando:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;wget https://download.elasticsearch.org/elasticsearch/release/org/elasticsearch/distribution/zip/elasticsearch/2.1.1/elasticsearch-2.1.1.zip
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;wget https://download.elastic.co/beats/topbeat/topbeat-1.0.1-x86_64.tar.gz
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;wget https://download.elastic.co/kibana/kibana/kibana-4.3.1-linux-x64.tar.gz
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;git clone https://github.com/elastic/beats-dashboards.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;elasticsearch&#34;&gt;ElasticSearch&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/products/elasticsearch&#34;&gt;ElasticSearch&lt;/a&gt; es una base de datos distribuida, escalable y de alta disponibilidad, que permite búsquedas en tiempo real.&lt;/p&gt;
&lt;p&gt;Será el cerebro de nuestra estructura, y por ello irá en el servidor.&lt;/p&gt;
&lt;p&gt;Para desplegarla, basta con descargarnos el &lt;em&gt;zip&lt;/em&gt;, editar la configuración y lanzar.&lt;/p&gt;
&lt;p&gt;La configuración básica que necesitaremos será la siguiente (archivo &lt;code&gt;config/elasticsearch.yml&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;network.host&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;123.123.123.123&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sí, es la IP externa del servidor. Por defecto sólo escucharía en localhost y no
podríamos conectar &lt;a href=&#34;https://www.elastic.co/products/beats/topbeat&#34;&gt;TopBeat&lt;/a&gt; externos.
Si queremos montra varios en &lt;em&gt;cluster&lt;/em&gt;, además tendríamos que modificar:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;discovery.zen.ping.unicast.hosts&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;host1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;host2&amp;#34;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Evidentemente, con la lista de hosts que forman el &lt;em&gt;cluster&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Echad un ojo al resto de la configuración si queréis añadir seguridad o algo.&lt;/p&gt;
&lt;p&gt;A continuación lo lanzamos:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ bin/elasticsearch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y se quedará ejecutando en esa ventana. Elegirá un nombre aleatorio de algún villano de Marvel y escuchará en el puerto 9200.&lt;/p&gt;
&lt;h2 id=&#34;topbeat&#34;&gt;TopBeat&lt;/h2&gt;
&lt;p&gt;La idea es empezar a obtener métricas lo antes posible, así que vamos con los
agentes: &lt;a href=&#34;https://www.elastic.co/products/beats/topbeat&#34;&gt;TopBeat&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Si &lt;a href=&#34;https://www.elastic.co/products/elasticsearch&#34;&gt;ElasticSearch&lt;/a&gt; es el cerebro, &lt;a href=&#34;https://www.elastic.co/products/beats/topbeat&#34;&gt;TopBeat&lt;/a&gt; son los nervios. &lt;a href=&#34;https://www.elastic.co/products/beats/topbeat&#34;&gt;TopBeat&lt;/a&gt; es un programa que consume muy pocos recursos, pensado para alterar lo mínimo posible la máquina en la que se ejecuta.&lt;/p&gt;
&lt;p&gt;El procedimiento de instalación es similar: descargar el zip, configurar y lanzar. En este caso, instalaremos en la máquina remota que queremos monitorizar.&lt;/p&gt;
&lt;p&gt;La configuración es un archivo &lt;strong&gt;yaml&lt;/strong&gt; que se suele encontrar en &lt;code&gt;/etc/topbeat/topbeat.yml&lt;/code&gt;, aunque podemos cambiar la ubicación, como haremos. Dejad la configuración como está y cambiad sólo lo siguiente:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;output&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;elasticsearch&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;hosts&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;whatever:9200&amp;#34;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Evidentemente, la variable &lt;code&gt;output.elasticsearch.hosts&lt;/code&gt; contiene la lista de nodos que forman el &lt;em&gt;cluster&lt;/em&gt;. Si estáis usando sólo uno, pues ponded ése (si usasteis la IP externa, debeis usar la misma; si elegisteis &lt;code&gt;localhost&lt;/code&gt;, pues &lt;code&gt;localhost&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Y lanzar:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ ./topbeat -c topbeat.yml &lt;span style=&#34;color:#75715e&#34;&gt;# usando el archivo de configuración local&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;$ ./topbeat   &lt;span style=&#34;color:#75715e&#34;&gt;# usando el archivo de configuración por defecto&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y nuestro sistema de monitorización está terminado. Repetid la instalación de
&lt;a href=&#34;https://www.elastic.co/products/beats/topbeat&#34;&gt;TopBeat&lt;/a&gt; en todos los nodos que queráis.&lt;/p&gt;
&lt;h3 id=&#34;qué-estamos-monitorizando&#34;&gt;¿Qué estamos monitorizando?&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/products/beats/topbeat&#34;&gt;TopBeat&lt;/a&gt; es muy configurable, pero por defecto monitoriza:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU&lt;/li&gt;
&lt;li&gt;RAM&lt;/li&gt;
&lt;li&gt;Espacio en disco&lt;/li&gt;
&lt;li&gt;CPU y RAM de todos los procesos en ejecución (aunque puede cambiarse por configuración).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kibana&#34;&gt;Kibana&lt;/h2&gt;
&lt;p&gt;Lo único que nos queda es visualizar los resultados.&lt;/p&gt;
&lt;p&gt;Podríamos decir que &lt;a href=&#34;https://www.elastic.co/products/kibana&#34;&gt;Kibana&lt;/a&gt; es la piel de nuestro sistema.&lt;/p&gt;
&lt;p&gt;El procedimiento es el mismo: descargar, configurar y lanzar.&lt;/p&gt;
&lt;p&gt;La configuración mínima vuelve a ser indicar el host en el que está
&lt;a href=&#34;https://www.elastic.co/products/elasticsearch&#34;&gt;ElasticSearch&lt;/a&gt;, y se encuentra en el directorio relativo &lt;code&gt;config/kibana.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;server.host&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;elasticsearch.url&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://123.123.123.123:9200&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kibana.index&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.kibana&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;En este caso sólo se atacará una instancia de &lt;a href=&#34;https://www.elastic.co/products/elasticsearch&#34;&gt;ElasticSearch&lt;/a&gt;, y tendremos que
indicar también dónde escucha el propio &lt;a href=&#34;https://www.elastic.co/products/kibana&#34;&gt;Kibana&lt;/a&gt;. Además hay que indicar un nombre para sus índices.&lt;/p&gt;
&lt;p&gt;A continuación lanzamos:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ ./bin/kibana
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y ya tendremos &lt;a href=&#34;https://www.elastic.co/products/kibana&#34;&gt;Kibana&lt;/a&gt; disponible en el puerto 5601. Cuando entréis hará un &lt;strong&gt;auto-check&lt;/strong&gt; para comprobar que está todo bien y os preguntará un índice por defecto. Cualquiera está bien, pero yo pondría &lt;code&gt;topbeat-*&lt;/code&gt; o simplemente &lt;code&gt;*&lt;/code&gt;. Si hacéis esto, al crear el índice veréis que tiene un montón de datos.&lt;/p&gt;
&lt;p&gt;Sin embargo, crear los paneles para &lt;a href=&#34;https://www.elastic.co/products/beats/topbeat&#34;&gt;TopBeat&lt;/a&gt; puede ser insufrible, así que vamos a hacerlo de forma automática:&lt;/p&gt;
&lt;h3 id=&#34;creando-los-dashboards&#34;&gt;Creando los Dashboards&lt;/h3&gt;
&lt;p&gt;Hay un proyecto que guarda los &lt;em&gt;dashboards a mostrar&lt;/em&gt;: &lt;a href=&#34;https://github.com/elastic/beats-dashboards&#34;&gt;Beats Dashboard&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;No tiene pérdida: descargar y ejecutar:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ git clone https://github.com/elastic/beats-dashboards.git
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;$ cd beats-dashboards
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;$ ./load.sh -l http://123.123.123.123:9200
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Si no indicáis URL, usará &lt;code&gt;localhost&lt;/code&gt;. Ojo, porque es la URL de un nodo del
&lt;em&gt;cluster&lt;/em&gt; de &lt;a href=&#34;https://www.elastic.co/products/elasticsearch&#34;&gt;ElasticSearch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ahora podéis pulsar la pestaña &lt;code&gt;Dashboard&lt;/code&gt; de la web de &lt;a href=&#34;https://www.elastic.co/products/kibana&#34;&gt;Kibana&lt;/a&gt; y a la derecha, arriba, tendréis un pequeño panel de control. Seleccionad &lt;code&gt;Load Saved Dashboard&lt;/code&gt; y a continuación cualquiera de ellos.&lt;/p&gt;
&lt;p&gt;Todos tienen un primer panel de navegación desde el que podéis saltar a otros. Y
seguramente todos estén vacíos, salvo el de &lt;a href=&#34;https://www.elastic.co/products/beats/topbeat&#34;&gt;TopBeat&lt;/a&gt;, que mostrará todos los datos.&lt;/p&gt;
&lt;h2 id=&#34;elasticsearch-vs-sensu&#34;&gt;ElasticSearch vs Sensu&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://sensuapp.org/&#34;&gt;Sensu&lt;/a&gt; es mucho más sencillo de lanzar, pero también mucho más limitado. Además, los agentes son mucho más pesados, ya que por defecto tienen que tener 3 hilos: uno para indicar que están vivos, otro para gestionar los &lt;strong&gt;checks standalone&lt;/strong&gt; y finalmente, otro para las subscripciones.&lt;/p&gt;
&lt;p&gt;El agente &lt;a href=&#34;https://sensuapp.org/&#34;&gt;Sensu&lt;/a&gt; por defecto en Windows ocupa 300 Mb de disco (necesita todo
&lt;strong&gt;Ruby&lt;/strong&gt;) y recursos ilimitados, ya que lanza un proceso por cada &lt;strong&gt;check&lt;/strong&gt;,
llegando a consumir hasta el 10% de CPU. Usando el &lt;a href=&#34;https://github.com/carllindelof/sensu-client&#34;&gt;agente Sensu en c#&lt;/a&gt; he
reducido el &lt;em&gt;footprint&lt;/em&gt; a 20 Mb y menos de un 1% de CPU. &lt;a href=&#34;https://www.elastic.co/products/beats/topbeat&#34;&gt;TopBeat&lt;/a&gt; utiliza 8 Mb y apenas se nota el consumo de CPU.&lt;/p&gt;
&lt;p&gt;También hay que decir que utilizar &lt;a href=&#34;https://sensuapp.org/&#34;&gt;Sensu&lt;/a&gt; con &lt;a href=&#34;http://graphite.wikidot.com/&#34;&gt;Graphite&lt;/a&gt; es trivial, y montar
un &lt;a href=&#34;http://grafana.org/&#34;&gt;Grafana&lt;/a&gt; por encima también. Pero claro&amp;hellip; es que se puede usar &lt;a href=&#34;http://grafana.org/&#34;&gt;Grafana&lt;/a&gt;
con &lt;a href=&#34;https://www.elastic.co/products/elasticsearch&#34;&gt;ElasticSearch&lt;/a&gt; también&amp;hellip; :)&lt;/p&gt;
&lt;h3 id=&#34;alertas&#34;&gt;Alertas&lt;/h3&gt;
&lt;p&gt;La ventaja de &lt;a href=&#34;https://sensuapp.org/&#34;&gt;Sensu&lt;/a&gt; es que permite alertado. El motor de &lt;a href=&#34;https://sensuapp.org/&#34;&gt;Sensu&lt;/a&gt; de alertado es realmente potente. Sin embargo, requiere bastantes recursos y, desgraciadamente, en momentos de pico podría fallar.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/products/elasticsearch&#34;&gt;ElasticSearch&lt;/a&gt; tiene a &lt;a href=&#34;https://www.elastic.co/products/watcher&#34;&gt;Watcher&lt;/a&gt;, el cual, desgraciadamente, no es libre ni
gratis. También hay que pensar que la gente de &lt;a href=&#34;https://www.elastic.co/products/elasticsearch&#34;&gt;ElasticSearch&lt;/a&gt; tiene que comer.&lt;/p&gt;
&lt;p&gt;Pero la gente de &lt;a href=&#34;http://www.yelp.com/engineering&#34;&gt;Yelp&lt;/a&gt; se ha currado &lt;a href=&#34;https://github.com/Yelp/elastalert&#34;&gt;ElastAlert&lt;/a&gt; que es un sistema de alertas libre y gratuíto. Aún no me ha dado tiempo a probarlo, y quizá se merezca otro artículo.&lt;/p&gt;
&lt;p&gt;En fin&amp;hellip; Para gustos colores :)&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Midiéndolo todo con StatsD</title>
      <link>https://magmax.org/blog/midiendolo-todo-con-statsd/</link>
      <pubDate>Sun, 12 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/midiendolo-todo-con-statsd/</guid>
      <description>
        
          &lt;p&gt;Tras el artículo &lt;a href=&#34;https://magmax.org/blog/graficas-basadas-en-tiempo-graphite/&#34;&gt;Gráficas basadas en tiempo: Graphite&lt;/a&gt; era obligatorio escribir
uno sobre &lt;a href=&#34;https://github.com/etsy/statsd&#34;&gt;StatsD&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En este artículo voy a contar qué es &lt;a href=&#34;https://github.com/etsy/statsd&#34;&gt;StatsD&lt;/a&gt; y cómo usarlo para extraer
estadísticas de uso de nuestro código. Aunque al principio pueda parecer un poco
extraño, os aseguro que es realmente interesante, sobre todo cuando se usa junto
con &lt;a href=&#34;http://graphite.wikidot.com/&#34;&gt;Graphite&lt;/a&gt;.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/stats.png&#34;
         alt=&#34;Diferentes tipos de gráficas&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;qué-es-statsd&#34;&gt;¿Qué es StatsD?&lt;/h2&gt;
&lt;p&gt;Según la propia página de StatsD:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;StatsD is a front-end proxy for the Graphite/Carbon metrics server, originally written by Etsy&amp;rsquo;s Erik Kastner. It is based on ideas from Flickr and this post by Cal Henderson: Counting and Timing. The server was written in Node, though there have been implementations in other languages since then.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pero debo decir que la definición no me gusta. No, porque &lt;a href=&#34;http://graphite.wikidot.com/&#34;&gt;Graphite&lt;/a&gt; es sólo uno de los posibles backends.&lt;/p&gt;
&lt;p&gt;En lugar de preguntarnos &lt;em&gt;&amp;quot;¿qué es StatsD?&amp;quot;&lt;/em&gt; deberíamos preguntarnos &lt;em&gt;&amp;quot;¿Para qué sirve StatsD?&amp;quot;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;StatsD permite recopilar datos de&amp;hellip; cosas, para su posterior uso. Cosas como número de ejecuciones, veces que se pasa por una función, tiempo que tarda en ejecutarse una acción, etc.&lt;/p&gt;
&lt;p&gt;Existen &lt;a href=&#34;https://github.com/etsy/statsd/wiki#server-implementations&#34;&gt;distintas implementaciones del servidor StatsD&lt;/a&gt;, aunque la original es
la escrita en &lt;a href=&#34;https://nodejs.org/&#34;&gt;NodeJS&lt;/a&gt;, que va a ser la que voy a comentar, ya que es la más completa. Hay clientes para cualquier lenguaje, ya que basta enviar una trama sencilla por UDP. Veremos esto más adelante.&lt;/p&gt;
&lt;h2 id=&#34;instalando-statsd&#34;&gt;Instalando StatsD&lt;/h2&gt;
&lt;p&gt;Como ya he dicho, usaremos &lt;a href=&#34;https://github.com/etsy/statsd&#34;&gt;la implementación de Etsy&lt;/a&gt;, que es la más famosa, y
que está implementada en &lt;a href=&#34;https://nodejs.org/&#34;&gt;NodeJS&lt;/a&gt;, por lo que lo primero será instalar &lt;a href=&#34;https://nodejs.org/&#34;&gt;NodeJS&lt;/a&gt; si no lo tenemos ya:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;apt-get install nodejs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A continuación, la instalación estándar nos sugiere clonar el repositorio:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;git clone https://github.com/etsy/statsd.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Aunque otro métido alternativo es usar &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;npm install statsd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;El primer metodo nos dejará el código en el directorio &lt;code&gt;statsd&lt;/code&gt;, mientras que
el segundo lo hará en &lt;code&gt;node_modules\statsd&lt;/code&gt;, pero el resultado será muy
similar. Yo he usado &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt; para este artículo.&lt;/p&gt;
&lt;p&gt;Lo siguiente es configurarlo. Para ello basta copiar el archivo &lt;code&gt;node_modules/statsd/exampleConfig.js&lt;/code&gt; al directorio actual y modificarlo. Veréis que el 99% del archivo es ayuda sobre el propio archivo, y que la configuración se reduce a algo como:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;{
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;graphitePort&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2003&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;graphiteHost&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;graphite.example.com&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8125&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;backends&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./backends/graphite&amp;#34;&lt;/span&gt; ]
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Podéis cambiar &lt;code&gt;graphiteHost&lt;/code&gt; por &lt;code&gt;localhost&lt;/code&gt;, y si seguísteis el artículo
&lt;a href=&#34;https://magmax.org/blog/graficas-basadas-en-tiempo-graphite/&#34;&gt;Gráficas basadas en tiempo: Graphite&lt;/a&gt; ya estaría todo funcionando con
&lt;a href=&#34;http://graphite.wikidot.com/&#34;&gt;Graphite&lt;/a&gt;. De todas maneras, para comenzar recomiendo cambiar el &lt;strong&gt;backend&lt;/strong&gt;
por &lt;code&gt;console&lt;/code&gt;, y así no es necesario tener &lt;a href=&#34;http://graphite.wikidot.com/&#34;&gt;Graphite&lt;/a&gt; instalado y podremos ver todos los datos en crudo. Por ello usaremos el archivo de configuración:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;{
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8125&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;backends&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./backends/console&amp;#34;&lt;/span&gt; ]
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ejecutando-statsd&#34;&gt;Ejecutando StatsD&lt;/h2&gt;
&lt;p&gt;Con esta configuración ya podemos ejecutarlo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;node node_modules/statsd/stats.js config.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Cada 10 segundos aparecerá un mensaje parecido a éste:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;{ &lt;span style=&#34;color:#a6e22e&#34;&gt;counters&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;statsd.bad_lines_seen&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;statsd.packets_received&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; },
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;timers&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {},
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;gauges&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {},
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;timer_data&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {},
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;counter_rates&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;statsd.bad_lines_seen&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;statsd.packets_received&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; },
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;sets&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {},
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;pctThreshold&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [ &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt; ] }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ahí se indica la información recolectada. Hay algunos puntos curiosos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;counters&lt;/code&gt;: Los contadores recibidos. Por defecto ya tiene 2, relacionados
con el propio &lt;a href=&#34;https://github.com/etsy/statsd&#34;&gt;StatsD&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timers&lt;/code&gt;: contadores de tipo tiempo recibidos.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gauges&lt;/code&gt;: Es un tipo de métrica que mantiene el último valor hasta recibir uno nuevo.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timer_data&lt;/code&gt;: Información ya tratada de los &lt;code&gt;timers&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;counter_rates&lt;/code&gt;: estadísticas de uso de los contadores.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sets&lt;/code&gt;: grupos de métricas recibidos.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pctThreshold&lt;/code&gt;: o &amp;ldquo;percentile threshold&amp;rdquo;, que es el percentil calculado para
tiempos. Es decir: si en un intervalo se reciben 100 mediciones de tiempo, se
cogerá el &lt;a href=&#34;https://en.wikipedia.org/wiki/Percentile&#34;&gt;percentil 90&lt;/a&gt; de éstas, ya que es estadísticamente más representativo.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Se puede configurar el tiempo del intervalo, pero por defecto son 10 segundos, y eso está bien para nuestro ejemplo.&lt;/p&gt;
&lt;h2 id=&#34;cómo-enviar-métricas-a-statsd&#34;&gt;Cómo enviar métricas a StatsD&lt;/h2&gt;
&lt;p&gt;Bueno, antes deberíamos saber qué tipos de métricas se pueden enviar, aunque ya están mencionadas en el apartado anterior:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Contadores, con formato &lt;code&gt;métrica:N|c&lt;/code&gt;, siendo &lt;code&gt;N&lt;/code&gt; el valor de la métrica.&lt;/li&gt;
&lt;li&gt;Tiempos, con formato &lt;code&gt;métrica:N|ms&lt;/code&gt;, siendo &lt;code&gt;N&lt;/code&gt; el tiempo a registrar.&lt;/li&gt;
&lt;li&gt;Gauges, con formato &lt;code&gt;métrica:N|g&lt;/code&gt;, siendo &lt;code&gt;N&lt;/code&gt; el valor de la métrica. Son valores que se mantienen hasta que llegue el siguiente.&lt;/li&gt;
&lt;li&gt;Sets, con formato &lt;code&gt;métrica:N|s&lt;/code&gt;, siendo &lt;code&gt;N&lt;/code&gt; un número de ocurrencias a registrar.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El formato, además, permite indicar la agrupación añadiendo &lt;code&gt;|@0.1&lt;/code&gt;, donde &lt;code&gt;0.1&lt;/code&gt; indica que el valor sólo se está enviando 1/10 del tiempo.
También se permite el envío de varias métricas en un sólo mensaje, separándolas por &lt;code&gt;\n&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Como ya se dijo antes, basta con enviar estos datos en una trama UDP. Podemos usar &lt;strong&gt;Bash&lt;/strong&gt;, por ejemplo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;   echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;this.is.a.counter:1|c&amp;#34;&lt;/span&gt; | nc -u -w1 127.0.0.1 &lt;span style=&#34;color:#ae81ff&#34;&gt;8125&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;que provocará un cambio en la salida del servidor, mostrando el mensaje:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;   { &lt;span style=&#34;color:#a6e22e&#34;&gt;counters&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;      { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;statsd.bad_lines_seen&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;statsd.packets_received&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;this.is.a.counter&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; },
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;timers&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;glork&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [] },
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;gauges&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;statsd.timestamp_lag&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; },
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;timer_data&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {},
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;counter_rates&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;      { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;statsd.bad_lines_seen&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;statsd.packets_received&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;this.is.a.counter&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt; },
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;sets&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {},
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;pctThreshold&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [ &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt; ] }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Como vemos, hay una ocurrencia del contador. A los 10 segundos se volverá a mostrar un 0, ya que en ese intervalo no ha habido ocurrencias.&lt;/p&gt;
&lt;p&gt;Recomendaría jugar aquí con los distintos tipos de métricas, varias métricas en un mensaje, cambiar la agrupación, etc. Incluso intentarlo desde el lenguaje que vayáis a utilizar después.&lt;/p&gt;
&lt;h2 id=&#34;para-qué-sive-statsd&#34;&gt;¿Para qué sive StatsD?&lt;/h2&gt;
&lt;p&gt;Pero nada de todo esto explica para qué podemos utilizar StatsD. Vamos a verlo
con ejemplos. Utilizaré Python, junto con el [ejemplo de cliente Python
proporcionado por Ets]y&lt;/p&gt;
&lt;p&gt;Tenemos una función muy costosa, que permite multiplicar dos matrices y queremos registrar cuánto tarda en ejecutarse. Aquí está nuestra función original:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;multiply_matrix&lt;/span&gt;(a, acols, b, bcols):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;    c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (acols &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; bcols)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(acols):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(bcols):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;            partial &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(bcols):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;                partial &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; a[pos(i, k, acols)] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; b[pos(k, j, bcols)]
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt;            c[pos(i, j, acols)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; partial
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Dado que el cliente de &lt;a href=&#34;https://github.com/etsy/statsd&#34;&gt;StatsD&lt;/a&gt; no va a cambiar con el tiempo, podemos considerar que todos sus métodos son estáticos y usar una única instancia, ya configurada con el &lt;em&gt;host&lt;/em&gt; y &lt;em&gt;port&lt;/em&gt; deseados, y guardarlo todo en una variable global (cosa que no debería ser lo habitual, pero en este caso estaría justificado). He marcado las líneas nuevas:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time  &lt;span style=&#34;color:#75715e&#34;&gt;# +&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; python_example &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; StatsdClient  &lt;span style=&#34;color:#75715e&#34;&gt;# +&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;statsd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StatsdClient(host&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;, port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8125&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# +&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;multiply_matrix&lt;/span&gt;(a, acols, b, bcols):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;    start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time()  &lt;span style=&#34;color:#75715e&#34;&gt;# +&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;    c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (acols &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; bcols)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(acols):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(bcols):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;            partial &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(bcols):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;                partial &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; a[pos(i, k, acols)] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; b[pos(k, j, bcols)]
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;            c[pos(i, j, acols)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; partial
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;    elapsed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; start  &lt;span style=&#34;color:#75715e&#34;&gt;# +&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;    statsd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;timing(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;matrix.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_colsx&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_cols.time&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (acols, bcols), elapsed)  &lt;span style=&#34;color:#75715e&#34;&gt;# +&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;6 líneas contando &lt;code&gt;include&lt;/code&gt; y configuración.&lt;/p&gt;
&lt;p&gt;Además, quiero contar cuántas veces se llama a la función por cada tamaño de matrices:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; python_example &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; StatsdClient
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;statsd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StatsdClient(host&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;, port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8125&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;multiply_matrix&lt;/span&gt;(a, acols, b, bcols):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;    statsd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;matrix.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_colsx&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_cols.count&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (acols, bcols), elapsed)  &lt;span style=&#34;color:#75715e&#34;&gt;# +&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;    start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;    c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (acols &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; bcols)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(acols):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(bcols):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;            partial &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(bcols):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;                partial &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; a[pos(i, k, acols)] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; b[pos(k, j, bcols)]
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;            c[pos(i, j, acols)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; partial
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;    elapsed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; start
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;    statsd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;timing(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;matrix.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_colsx&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_cols.time&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (acols, bcols), elapsed)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Una línea más.&lt;/p&gt;
&lt;h3 id=&#34;ventajas&#34;&gt;Ventajas&lt;/h3&gt;
&lt;p&gt;Pero&amp;hellip; ¿En qué afecta esto al tiempo de ejecución? Bueno, por el principio de Heisenberg, donde el observador siempre altera lo observado, en algo, pero en muy poco, ya que al utilizar el protocolo UDP no hay tiempos de latencia.&lt;/p&gt;
&lt;p&gt;UDP tiene un problema: Es posible que la trama se pierda. Así que estas
estadísticas no serán muy exactas, pero pueden darnos una idea muy aproximada de
la evolución del sistema. De todas maneras, si el servidor &lt;a href=&#34;https://github.com/etsy/statsd&#34;&gt;StatsD&lt;/a&gt; está en local, es raro que se pierda una trama.&lt;/p&gt;
&lt;p&gt;Si se conectara contra &lt;a href=&#34;http://graphite.wikidot.com/&#34;&gt;Graphite&lt;/a&gt; directamente por TCP entonces sí que habría retrasos: hay que establecer la conexión, enviar la información, esperar &lt;strong&gt;ACK&lt;/strong&gt;, etc.&lt;/p&gt;
&lt;p&gt;Otra ventaja es que no puede fallar. Si nuestro servidor TCP está caído, debemos tratar la excepción o el programa fallará. Si usamos UDP, perderemos la métrica, pero seguiremos dando servicio.&lt;/p&gt;
&lt;p&gt;¿Dónde es especialmente útil?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Para tiempos de ejecución de &lt;strong&gt;queries&lt;/strong&gt;. En pruebas de estrés podría mostrar la evolución del tiempo de ejecución en función de los datos ya existentes.&lt;/li&gt;
&lt;li&gt;Contabilizar &lt;strong&gt;logins en una web&lt;/strong&gt; u otras operaciones, así como &lt;em&gt;logins&lt;/em&gt; fallidos, permitiendo detectar ataques por fuerza bruta.&lt;/li&gt;
&lt;li&gt;Medir &lt;strong&gt;tiempos de respuesta&lt;/strong&gt; en una web.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En Tuenti nos hicimos un &lt;em&gt;wrapper&lt;/em&gt; sobre mercurial, para detectar la evolución
del tiempo necesario para ejecutar cada subcomando, para medir la evolución de
los más lentos. Gracias a esto, &lt;a href=&#34;http://corporate.tuenti.com/es/dev/blog/Mercurial-performance-boost&#34;&gt;detectamos un problema grave de rendimiento&lt;/a&gt; y pudimos medir su evolución.&lt;/p&gt;
&lt;h2 id=&#34;clusters-de-statsd&#34;&gt;Clusters de StatsD&lt;/h2&gt;
&lt;p&gt;Todo esto tiene un problema. Si tenemos un balanceador de carga con dos
servidores, cada uno con su servidor StatsD, y queremos medir los tiempos de
request, el último que mande su valor a &lt;a href=&#34;http://graphite.wikidot.com/&#34;&gt;Graphite&lt;/a&gt; es el que quedará. Por eso debemos configurar los servidores StatsD como &lt;strong&gt;Proxies&lt;/strong&gt;, indicando la ubicación del resto de servidores StatsD.&lt;/p&gt;
&lt;h2 id=&#34;conclusión&#34;&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;Todo se puede medir, y es importante medirlo todo. Desgraciadamente, eso requiere muchos recursos. Pero StatsD es una herramienta muy interesante para medir allá donde no se puede con otras herramientas.&lt;/p&gt;
&lt;p&gt;Finalmente os dejo con un vídeo de cómo hacer todo lo que he contado aquí:&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/J5CeLI2CiPk&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;También os proporciono otro vídeo de cómo instalar &lt;a href=&#34;http://graphite.wikidot.com/&#34;&gt;Graphite&lt;/a&gt; y &lt;a href=&#34;https://github.com/etsy/statsd&#34;&gt;Statsd&lt;/a&gt; en 3
minutos, mostrando los datos. Es importante tener en cuenta que &lt;a href=&#34;https://github.com/etsy/statsd&#34;&gt;Statsd&lt;/a&gt; dejará las métricas en &lt;code&gt;stats/gauges/&lt;/code&gt; en lugar de colgar del árbol principal.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/ADMPs4FzLDQ&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Quizá os parezca extraño ver cómo se altera la gráfica en parte del vídeo, pero
es algo normal: Al llegar varias métricas durante el mismo cupo de tiempo, el
último predomina. Para cambiar eso habría que modificar la configuración de
Carbon, como se explicó en el artículo &lt;a href=&#34;https://magmax.org/blog/graficas-basadas-en-tiempo-graphite/&#34;&gt;Gráficas basadas en tiempo: Graphite&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Gráficas basadas en tiempo: Graphite</title>
      <link>https://magmax.org/blog/graficas-basadas-en-tiempo-graphite/</link>
      <pubDate>Sun, 05 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/graficas-basadas-en-tiempo-graphite/</guid>
      <description>
        
          &lt;p&gt;En esta ocasión voy a escribir sobre &lt;a href=&#34;http://graphite.wikidot.com/&#34;&gt;Graphite&lt;/a&gt;, una utilidad para generar gráficas basadas en tiempo.&lt;/p&gt;
&lt;p&gt;Una vez tengamos &lt;a href=&#34;http://graphite.wikidot.com/&#34;&gt;Graphite&lt;/a&gt; instalado, se podrá utilizar para distintos usos: contar las visitas a una web, contar las ejecuciones de un programa, medir el tiempo de ejecución de un programa, &amp;hellip;&lt;/p&gt;
&lt;p&gt;Veremos que es un programa sencillo de manejar, pero muy potente.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/stats.png&#34;
         alt=&#34;Distintos tipos de gráficas&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;entendiendo-graphite&#34;&gt;Entendiendo Graphite&lt;/h2&gt;
&lt;p&gt;Antes de meternos en harina, es importante tener claros los conceptos.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://graphite.wikidot.com/&#34;&gt;Graphite&lt;/a&gt; es una herramienta &lt;a href=&#34;https://www.djangoproject.com/&#34;&gt;Django&lt;/a&gt; que permite graficar lo almacenado en una base de datos &lt;strong&gt;Round Robin&lt;/strong&gt; llamada &lt;code&gt;whisper&lt;/code&gt;. También permite guardar &lt;strong&gt;eventos discretos&lt;/strong&gt; (luego lo vemos).&lt;/p&gt;
&lt;p&gt;Por tanto, podremos mostrar información, pero &lt;a href=&#34;http://graphite.wikidot.com/&#34;&gt;Graphite&lt;/a&gt; no guarda esa
información. Eso se delega en otros servicios, como &lt;a href=&#34;https://pypi.python.org/pypi/carbon/&#34;&gt;Carbon&lt;/a&gt;:&lt;/p&gt;
&lt;div hidden&gt;

@startuml graphite-basic-flow
actor &#34;Program 1&#34; as p1
actor &#34;Program 2&#34; as p2
actor Browser
component Carbon
component Graphite
database Whisper

p1 --&gt; Carbon
p2 --&gt; Carbon
Carbon --&gt; Whisper: escribir
Graphite &lt;-- Whisper: leer
Browser --&gt; Graphite
@enduml

&lt;/div&gt;

&lt;img src=&#34;https://magmax.org/diagrams/graphite-basic-flow.png&#34;/&gt;

&lt;p&gt;&lt;strong&gt;Whisper&lt;/strong&gt; es una base de datos de tipo &lt;strong&gt;Round Robin&lt;/strong&gt;. Eso significa que tiene una especie de &amp;ldquo;casillas&amp;rdquo; (&lt;em&gt;slots&lt;/em&gt;) que se rellenan cada cierto tiempo. Cuando se han rellenado todas, se comienza otra vez por el principio. De esta manera, el tamaño de la base de datos es siempre fijo, permitiéndonos calcularlo antes de comenzar a medir.&lt;/p&gt;
&lt;p&gt;El problema de las bases de datos de este tipo es cuando se reciben varios valores en un &lt;em&gt;slot&lt;/em&gt; de tiempo. En estos casos se opta por la media o bien por el último de los valores. El tamaño de estos &lt;em&gt;slots&lt;/em&gt; se realiza en el archivo &lt;code&gt;/etc/carbon/storage-schemas.conf&lt;/code&gt;. Ejemplo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;[carbon]&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pattern&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;^carbon\.&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;retentions&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;60:90d&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;[local]&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pattern&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;^local\.&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;retentions&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;1:1h&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;[default_1min_for_1day]&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pattern&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;.*&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;retentions&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;60s:1d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Como se puede observar, el formato es sencillo.&lt;/p&gt;
&lt;p&gt;Existen más piezas en este puzzle, que iremos introduciendo a lo largo de otros posts. Este artículo se centrará en los que se ven.&lt;/p&gt;
&lt;h2 id=&#34;instalando-graphite&#34;&gt;Instalando Graphite&lt;/h2&gt;
&lt;p&gt;Como no sólo tenemos que instalar &lt;a href=&#34;http://graphite.wikidot.com/&#34;&gt;Graphite&lt;/a&gt; sino también &lt;a href=&#34;https://pypi.python.org/pypi/carbon/&#34;&gt;Carbon&lt;/a&gt;, lo más sencillo es usar:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;apt-get install graphite-web graphite-carbon
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A continuación tendremos que configurar el &lt;a href=&#34;https://www.djangoproject.com/&#34;&gt;Django&lt;/a&gt; detrás de &lt;a href=&#34;http://graphite.wikidot.com/&#34;&gt;Graphite&lt;/a&gt;. Esta información se encuentra en &lt;code&gt;/usr/share/doc/graphite-web/README.Debian&lt;/code&gt;, pero voy a repetirla aquí.&lt;/p&gt;
&lt;p&gt;Si sólo queremos probar &lt;a href=&#34;http://graphite.wikidot.com/&#34;&gt;Graphite&lt;/a&gt;, lo más sencillo es hacer, como &lt;code&gt;root&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;su -s /bin/bash -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/usr/bin/django-admin runserver --settings graphite.settings 0.0.0.0:8080&amp;#39;&lt;/span&gt; _graphite
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Eso utiliza el servidor web de &lt;a href=&#34;https://www.djangoproject.com/&#34;&gt;Django&lt;/a&gt; y una base de datos &lt;a href=&#34;https://www.sqlite.org/&#34;&gt;sqlite&lt;/a&gt;, que puede no ser suficiente para producción, pero es ideal para probarlo rápidamente.&lt;/p&gt;
&lt;p&gt;En producción, por el contrario, será mejor montarlo de una forma más decente,
usando &lt;a href=&#34;http://httpd.apache.org/&#34;&gt;Apache httpd&lt;/a&gt;, por ejemplo:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Instalar &lt;code&gt;wsgi&lt;/code&gt; para &lt;a href=&#34;http://httpd.apache.org/&#34;&gt;Apache httpd&lt;/a&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;apt-get install libapache2-mod-wsgi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Copiar los valores por defecto que ya nos proporciona el paquete Debian de &lt;a href=&#34;http://graphite.wikidot.com/&#34;&gt;Graphite&lt;/a&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;cp /usr/share/graphite-web/apache2-graphite.conf /etc/apache2/sites-available/graphite-web.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Habilitarlo:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;a2ensite graphite-web
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Reiniciar apache:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;service apache2 restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Si también queremos usar &lt;a href=&#34;https://www.mysql.com/&#34;&gt;MySQL&lt;/a&gt; o &lt;a href=&#34;http://www.postgresql.org.es/&#34;&gt;PostgreSQL&lt;/a&gt; en lugar de &lt;a href=&#34;https://www.sqlite.org/&#34;&gt;sqlite&lt;/a&gt;, tendremos
que modificar la configuración de &lt;a href=&#34;http://graphite.wikidot.com/&#34;&gt;Graphite&lt;/a&gt;, que se encuentra en
&lt;code&gt;/etc/graphite/local_setting.py&lt;/code&gt; y que es equivalente a la de cualquier
&lt;a href=&#34;https://www.djangoproject.com/&#34;&gt;Django&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Si habéis trabajado con &lt;a href=&#34;https://www.djangoproject.com/&#34;&gt;Django&lt;/a&gt;, sabréis que el programa principal se suele
llamar &lt;code&gt;manage.py&lt;/code&gt;&amp;hellip; Pues el de &lt;a href=&#34;http://graphite.wikidot.com/&#34;&gt;Graphite&lt;/a&gt; es accesible invocando &lt;code&gt;graphite-manage&lt;/code&gt; en su lugar.&lt;/p&gt;
&lt;h2 id=&#34;primeros-pasos-en-graphite&#34;&gt;Primeros pasos en Graphite&lt;/h2&gt;
&lt;p&gt;Asumiendo que se ha optado por la vía rápida, ejecutando el &lt;code&gt;runserver&lt;/code&gt;, o
bien una configuración similiar, tendremos &lt;a href=&#34;http://graphite.wikidot.com/&#34;&gt;Graphite&lt;/a&gt; escuchando en el puerto 8080, y podremos acceder a él: http://localhost:8080&lt;/p&gt;
&lt;p&gt;Probablemente se queje porque la clave &lt;code&gt;SECRET_KEY&lt;/code&gt; utilizada es el valor por defecto. Podéis ignorarlo o arreglarlo editando su valor en el archivo &lt;code&gt;/etc/graphite/local_setting.py&lt;/code&gt; y poniendo un valor aleatorio y grande.&lt;/p&gt;
&lt;p&gt;Pues ya está, ya tenemos &lt;a href=&#34;http://graphite.wikidot.com/&#34;&gt;Graphite&lt;/a&gt; corriendo. No ha sido tan duro.&lt;/p&gt;
&lt;p&gt;Como también instalamos &lt;a href=&#34;https://pypi.python.org/pypi/carbon/&#34;&gt;Carbon&lt;/a&gt;, éste ya se ha puesto a insertar valores por su cuenta. En la interfaz, veréis un árbol a la izquierda que podéis ir desplegando. Los nodos pintarán gráficas:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/graphite/graphite_main.png&#34;
         alt=&#34;Página por defecto de Graphite&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Si pensáis que la interfaz es horrible, sólo os diré que la han mejorado desde la última vez que entré.&lt;/p&gt;
&lt;p&gt;Abajo tenéis los botones &lt;code&gt;Graph Options&lt;/code&gt; y &lt;code&gt;Graph Data&lt;/code&gt; permiten modificar la forma de los gráficos u operar sobre los datos. Volveremos sobre esto en la sección de la API.&lt;/p&gt;
&lt;p&gt;A la derecha veréis varios botones, donde me centraré en dos: &lt;strong&gt;Dashboard&lt;/strong&gt; y &lt;strong&gt;Events&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;graphite-dashboard&#34;&gt;Graphite Dashboard&lt;/h3&gt;
&lt;p&gt;En un intento por hacer &lt;a href=&#34;http://graphite.wikidot.com/&#34;&gt;Graphite&lt;/a&gt; algo más usable, hicieron el &lt;strong&gt;Dashboard&lt;/strong&gt;, que no es más que otra aberración para la vista:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/graphite/graphite_dashboard.png&#34;
         alt=&#34;Dashboard de Graphite&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Al menos tiene &lt;em&gt;completion&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Permite generar paneles y así gestionar varias gráficas de una vez. De todas
maneras, es mejor hacer eso con &lt;a href=&#34;http://grafana.org/&#34;&gt;Grafana&lt;/a&gt;, como veremos en próximos posts.&lt;/p&gt;
&lt;h3 id=&#34;graphite-events&#34;&gt;Graphite Events&lt;/h3&gt;
&lt;p&gt;Si hemos pulsado en el botón de &lt;strong&gt;Events&lt;/strong&gt;, veremos una página horrible que dice:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;No events. Add events using the admin interface or by posting (eg, curl -X POST http://localhost:8000/events/ -d &amp;lsquo;{&amp;ldquo;what&amp;rdquo;: &amp;ldquo;Something Interesting&amp;rdquo;, &amp;ldquo;tags&amp;rdquo; : &amp;ldquo;tag1 &amp;ldquo;}&#39;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Recomiendo hacerle caso, aunque tendréis que cambiar el puerto, sólo por probar:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;curl -X POST http://localhost:8080/events/ -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34;what&amp;#34;: &amp;#34;Something Interesting&amp;#34;, &amp;#34;tags&amp;#34; : &amp;#34;tag1 &amp;#34;}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y, si recargamos la página, veremos el evento. Esto será útil para registrar
acciones no periódicas: una actualización de configuración, una ejecución de
&lt;a href=&#34;https://puppetlabs.com/&#34;&gt;Puppet&lt;/a&gt;, etc. Veremos más sobre su uso en el post sobre &lt;a href=&#34;http://grafana.org/&#34;&gt;Grafana&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;puntos-fuertes-de-graphite&#34;&gt;Puntos fuertes de Graphite&lt;/h2&gt;
&lt;p&gt;Algún lector dirá: &amp;ldquo;bueno, pues si la interfaz es tan horrible como dices, ¿por qué nos cuentas todo esto?&amp;rdquo;.&lt;/p&gt;
&lt;h3 id=&#34;interfaz-get&#34;&gt;Interfaz GET&lt;/h3&gt;
&lt;p&gt;Y tendría toda la razón, pero es que Graphite tiene una interfaz, accesible por GET, muy versátil y molona.&lt;/p&gt;
&lt;p&gt;Por ejemplo&amp;hellip; obtenemos la URL de la imagen anterior, obtendremos:
&lt;code&gt;http://localhost:8080/render/?width=586&amp;amp;height=308&amp;amp;_salt=1436083979.749&amp;amp;target=carbon.agents.nightcrawler-a.avgUpdateTime&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Vamos por partes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http://localhost:8080/render/&lt;/code&gt; Punto de acceso a la API&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width=586&lt;/code&gt; Ancho que tendrá la imagen.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;height=308&lt;/code&gt; Alto que tendrá la imagen.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_salt=1436083979.749&lt;/code&gt; Podéis ignorarlo. Es la semilla utilizada en caso de usar valores aleatorios.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;target=carbon.agents.nightcrawler-a.avgUpdateTime&lt;/code&gt; Lo que se está pintando.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El &lt;code&gt;target&lt;/code&gt; permite realizar operaciones, tales como sumar diferentes series, filtrar valores, etc. Por ejemplo, para mostrar el percentil 90 de las consultas a la caché de carbon:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;percentileOfSeries&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;carbon.agents.nightcrawler-a.cache.queries,0.9&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;También se pueden obtener los valores guardados con el argumento &lt;code&gt;format&lt;/code&gt;.
Recomiendo echar un ojo a toda la &lt;a href=&#34;http://graphite.readthedocs.org/en/latest/render_api.html&#34;&gt;API de Graphite&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;interfaz-post&#34;&gt;Interfaz POST&lt;/h3&gt;
&lt;p&gt;Carbon también tiene una interfaz POST que permite insertar datos en &lt;strong&gt;Whisper&lt;/strong&gt;
y así renderizarlos desde &lt;a href=&#34;http://graphite.wikidot.com/&#34;&gt;Graphite&lt;/a&gt;. Por defecto estará escuchando en el puerto 2003:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;local.random.diceroll 4 `date +%s`&amp;#34;&lt;/span&gt; | nc -q0 localhost &lt;span style=&#34;color:#ae81ff&#34;&gt;2003&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Como se puede observar, el formato es my sencillo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Nombre de la métrica&lt;/em&gt;, separando por puntos los distintos niveles. Esto permite generar una especie de árbol, por lo que se recomienda colocar los términos más genéricos al principio y los más específicos al final.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Valor&lt;/em&gt; de la métrica.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;timestamp&lt;/em&gt;, en formato UNIX&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ejemplo-de-uso-de-graphite&#34;&gt;Ejemplo de uso de Graphite&lt;/h2&gt;
&lt;p&gt;Aquí os dejo un pequeño ejemplo de uso:&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/UGTb2J-a_0Q&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;No conté con que &lt;code&gt;$RANDOM&lt;/code&gt; se resuelve en el primer shell, por lo que enviaba un valor fijo XD&lt;/p&gt;
&lt;h2 id=&#34;conclusión&#34;&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://graphite.wikidot.com/&#34;&gt;Graphite&lt;/a&gt; es una herramienta mucho más potente de lo que pueda parecer. Lo veremos en próximos posts.&lt;/p&gt;
&lt;p&gt;De momento es importante quedarse con la idea principal: generación de gráficos donde el tiempo es el eje X.&lt;/p&gt;
&lt;p&gt;En próximos posts veremos cómo graficar información del sistema, cómo embeber
estos gráficos en nuestro sistema de alertas o cómo dar soporte a millones de
métricas por segundo. Y todo basado en &lt;a href=&#34;http://graphite.wikidot.com/&#34;&gt;Graphite&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Monitorización y alertado</title>
      <link>https://magmax.org/blog/monitorizacion-y-alertado/</link>
      <pubDate>Tue, 16 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/monitorizacion-y-alertado/</guid>
      <description>
        
          &lt;p&gt;El otro día, en &lt;a href=&#34;http://agile-cr.github.io/&#34;&gt;Agile-CR&lt;/a&gt; estuve hablando de distintos sistemas de monitorización y alertado.&lt;/p&gt;
&lt;p&gt;Aquí os dejo la presentación y algunos comentarios.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/stats.png&#34;
         alt=&#34;Distintos tipos de gráficas&#34;/&gt; 
&lt;/figure&gt;

&lt;div&gt;
  &lt;iframe width=&#34;100%&#34; height=&#34;400px&#34; src=&#34;https://magmax.github.io/charla-monitorizacion/#/&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;(podéis usar los cursores para ver las transparencias, y pulsar &amp;ldquo;f&amp;rdquo; para verlo en grande; Escape para volver)&lt;/p&gt;
&lt;p&gt;La charla consistió más en un repaso rápido por distintos sistemas de
monitorización y alertado que en un taller. Aunque estuvimos echando un ojo a
&lt;a href=&#34;http://munin-monitoring.org/&#34;&gt;Munin&lt;/a&gt;, cuando intenté instalar &lt;a href=&#34;https://github.com/graphite-project/graphite-web&#34;&gt;Graphite&lt;/a&gt; tuve no pocos problemas y acabé por desistir.&lt;/p&gt;
&lt;p&gt;Opté directamente por la &lt;a href=&#34;http://play.grafana.org/&#34;&gt;demo on-line de Grafana&lt;/a&gt; para enseñar cómo es. Mostré cómo crear un &lt;em&gt;dashboard&lt;/em&gt;, cómo usar plantillas y cómo funcionan los eventos discretos.&lt;/p&gt;
&lt;p&gt;Por supuesto que existen otras soluciones, pero personalmente creo que, hoy en
día, &lt;a href=&#34;http://grafana.org/&#34;&gt;Grafana&lt;/a&gt; es de lo más vistoso en cuanto a renderizado de gráficos mientras
que &lt;a href=&#34;https://sensuapp.org/&#34;&gt;Sensu&lt;/a&gt; es un sistema muy fácil de automatizar con &lt;a href=&#34;https://www.chef.io&#34;&gt;Chef&lt;/a&gt; o &lt;a href=&#34;https://puppetlabs.com/&#34;&gt;Puppet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para hablar de &lt;a href=&#34;https://sensuapp.org/&#34;&gt;Sensu&lt;/a&gt; utilicé imágenes on-line.&lt;/p&gt;
&lt;p&gt;Y finalmente comenté &lt;a href=&#34;https://getsentry.com/welcome/&#34;&gt;Sentry&lt;/a&gt;, aunque sólo un poco por encima.&lt;/p&gt;
&lt;p&gt;El caso es que me fastidió tanto no poder montarlo en directo, que he decidido
comenzar una serie de posts en las que contar cómo montar un sistema de
monitorización con &lt;a href=&#34;https://github.com/graphite-project/graphite-web&#34;&gt;Graphite&lt;/a&gt; y &lt;a href=&#34;http://grafana.org/&#34;&gt;Grafana&lt;/a&gt;, y un sistema de alertado mediante
&lt;a href=&#34;https://sensuapp.org/&#34;&gt;Sensu&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Iréis viendo estos artículos próximamente en este blog.&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
