<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>make on El blog de MagMax</title>
    <link>http://example.org/tags/make/</link>
    <description>Recent content in make on El blog de MagMax</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Feb 2013 00:00:00 +0000</lastBuildDate><atom:link href="http://example.org/tags/make/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Por qué make mola</title>
      <link>http://example.org/blog/porque-make-mola/</link>
      <pubDate>Wed, 06 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/porque-make-mola/</guid>
      <description>
        
          &lt;p&gt;Siguiendo con los lenguajes que suelo utilizar, he llegado al que utilizo para compilar y automatizar cosas.&lt;/p&gt;
&lt;p&gt;Es cierto que existen muchas herramientas de este estilo: &lt;a href=&#34;http://rake.rubyforge.org/&#34;&gt;rake&lt;/a&gt;, &lt;a href=&#34;http://miller.emu.id.au/pmiller/software/cook/&#34;&gt;cook&lt;/a&gt;, &lt;a href=&#34;http://www.scons.org/&#34;&gt;scons&lt;/a&gt;, &lt;a href=&#34;http://ant.apache.org/&#34;&gt;Ant&lt;/a&gt;, &lt;a href=&#34;http://ant.apache.org/ivy/&#34;&gt;Ivy&lt;/a&gt;, &amp;hellip; Y algunas mucho más complejas, como &lt;a href=&#34;http://fabfile.org/&#34;&gt;Fabric&lt;/a&gt;, &lt;a href=&#34;https://github.com/capistrano/capistrano&#34;&gt;Capistrano&lt;/a&gt; o incluso &lt;a href=&#34;http://maven.apache.org/&#34;&gt;Maven&lt;/a&gt;. Sin embargo, sigo utilizando &lt;em&gt;Make&lt;/em&gt;. &lt;a href=&#34;http://www.gnu.org/software/make/&#34;&gt;GNU/Make&lt;/a&gt; en concreto, ya que trae algunas mejoras sobre el &lt;em&gt;Make&lt;/em&gt; estándar.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;http://example.org/images/gnu.png&#34;
         alt=&#34;GNU&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;make-mola&#34;&gt;Make mola&lt;/h2&gt;
&lt;h3 id=&#34;simple&#34;&gt;Simple&lt;/h3&gt;
&lt;p&gt;Es un lenguaje muy simple. Tan solo admite variables y reglas. Las variables sólo constan del nombre y el valor. Las reglas, del objetivo, las dependencias y el cuerpo que permite generar el objetivo a partir de las dependencias.&lt;/p&gt;
&lt;p&gt;Hay algunos añadidos, como las instrucciones &lt;strong&gt;for&lt;/strong&gt; e &lt;strong&gt;if&lt;/strong&gt;, pero trato de evitarlas todo lo posible. Al final sólo dan problemas.&lt;/p&gt;
&lt;h3 id=&#34;declarativo&#34;&gt;Declarativo&lt;/h3&gt;
&lt;p&gt;En el &lt;em&gt;Makefile&lt;/em&gt; sólo indicas lo que quieres hacer y él ya se encargará de organizar todo el invento. Buscará dependencias, generará el árbol de compilación y lo ejecutará. Así de simple.&lt;/p&gt;
&lt;h3 id=&#34;reglas-automáticas&#34;&gt;Reglas automáticas&lt;/h3&gt;
&lt;p&gt;Además, &lt;em&gt;GNU/Make&lt;/em&gt; ya tiene algunas reglas implícitas que nos facilitan aún más la vida. Por ejemplo, ya sabe cómo generar un ejecutable a partir de varios archivos &lt;strong&gt;.c&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;entorno&#34;&gt;Entorno&lt;/h3&gt;
&lt;p&gt;Puedes utilizar todas las variables de entorno como si fuera un programa bash, o definir algunas que sólo existirán durante la ejecución. Si un &lt;em&gt;Makefile&lt;/em&gt; llama a otro, las variables seguirán definidas.&lt;/p&gt;
&lt;h3 id=&#34;rápido&#34;&gt;Rápido&lt;/h3&gt;
&lt;p&gt;Es muy difícil encontrar un programa de automatización tan rápido como &lt;em&gt;Make&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;evita-repetirse&#34;&gt;Evita repetirse&lt;/h3&gt;
&lt;p&gt;Cuando las dependencias están correctamente especificadas, no realiza un trabajo innecesario. Si un archivo ya existe y sus dependencias no han cambiado, ¿por qué volver a generarlo? &lt;em&gt;Make&lt;/em&gt; se encarga de comprobar estas dependencias y de evitar perder el tiempo con tareas innecesarias.&lt;/p&gt;
&lt;h3 id=&#34;funciones&#34;&gt;Funciones&lt;/h3&gt;
&lt;p&gt;Dispone de distintas funciones que permiten una gestión sencilla del entorno, como sustitución en cadenas, obtener la lista de archivos en un directorio, etc.&lt;/p&gt;
&lt;h3 id=&#34;comodines&#34;&gt;Comodines&lt;/h3&gt;
&lt;p&gt;Dispone de comodines y variables automáticas que nos permiten generar reglas genéricas que se ajustarán a distintos patrones, ahorrándonos mucho código.&lt;/p&gt;
&lt;h3 id=&#34;distintos-objetivos&#34;&gt;Distintos objetivos&lt;/h3&gt;
&lt;p&gt;Se puede lanzar cualquiera de sus objetivos de manera individual.&lt;/p&gt;
&lt;h3 id=&#34;genérico&#34;&gt;Genérico&lt;/h3&gt;
&lt;p&gt;No se ata a nada. Permite automatizar cualquier tarea, desde la generación de código hasta la creación de directorios, ficheros, etc.&lt;/p&gt;
&lt;h2 id=&#34;make-no-mola&#34;&gt;Make no mola&lt;/h2&gt;
&lt;h3 id=&#34;difícil-depuración&#34;&gt;Difícil depuración&lt;/h3&gt;
&lt;p&gt;Al ser un lenguaje declarativo, a menudo resulta muy dificil encontrar un error cuando se produce.&lt;/p&gt;
&lt;h3 id=&#34;muy-quejica&#34;&gt;Muy quejica&lt;/h3&gt;
&lt;p&gt;Es tremendamente exigente con el formato del &lt;em&gt;Makefile&lt;/em&gt;. Por ejemplo, si las reglas de generación del objetivo se separan utilizando espacios en lugar de tabuladores, &lt;em&gt;Make&lt;/em&gt; fallará.&lt;/p&gt;
&lt;p&gt;Por suerte contamos con editores como &lt;em&gt;Emacs&lt;/em&gt; que nos avisan de este tipo de problemas cuando estamos guardando.&lt;/p&gt;
&lt;h3 id=&#34;difícil-de-manejar&#34;&gt;Difícil de manejar&lt;/h3&gt;
&lt;p&gt;Cuando el &lt;em&gt;Makefile&lt;/em&gt; es pequeño, resulta bastante intuitivo; pero cuando comienza a crecer, seguir la línea de ejecución se va complicando. A menudo llega a unos resultados terribles, ya que suele mezclar distintas reglas para distintos objetivos.&lt;/p&gt;
&lt;h3 id=&#34;conexión-por-red&#34;&gt;Conexión por red&lt;/h3&gt;
&lt;p&gt;Realizar tareas en remoto resulta tedioso y difícil. Para eso es mejor utilizar herramientas como &lt;a href=&#34;https://github.com/capistrano/capistrano&#34;&gt;Capistrano&lt;/a&gt; o &lt;a href=&#34;http://fabfile.org/&#34;&gt;Fabric&lt;/a&gt;. Claro, que siempre es una opción utilizar Fabric para copiar el proyecto y lanzar el &lt;em&gt;Make&lt;/em&gt; en remoto.&lt;/p&gt;
&lt;h2 id=&#34;conclusiones&#34;&gt;Conclusiones&lt;/h2&gt;
&lt;p&gt;Ésta es una de esas grandes herramientas que han facilitado el despliegue, compilación y gestión en general de aplicaciones, así como el trabajo en grupo. En muchas ocasiones me ha ahorrado el problema de &amp;ldquo;en mi casa funciona&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Hay gente que cree que es una herramienta antigua y que ya hay otras herramientas mejores. Yo he tratado de encontrar herramientas que me resuelvan los mismos problemas de una manera más sencilla, pero aún no he encontrado ninguno.&lt;/p&gt;
&lt;p&gt;Entiendo que es más complejo autogenerar un Makefile válido que un script Ant, por ejemplo. Pero eso es cuando se está generando automáticamente el archivo. Salvo contadas excepciones, la edición manual de XML debería considerarse un crimen contra la humanidad.&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
