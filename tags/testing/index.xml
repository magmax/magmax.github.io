<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>testing - Etiqueta - El blog de MagMax</title>
        <link>https://magmax.org/tags/testing/</link>
        <description>testing - Etiqueta - El blog de MagMax</description>
        <generator>Hugo -- gohugo.io</generator><language>es</language><lastBuildDate>Mon, 24 Mar 2014 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://magmax.org/tags/testing/" rel="self" type="application/rss+xml" /><item>
    <title>Testing en django: mejoras</title>
    <link>https://magmax.org/blog/testing-en-django-mejoras/</link>
    <pubDate>Mon, 24 Mar 2014 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>https://magmax.org/blog/testing-en-django-mejoras/</guid>
    <description><![CDATA[A menudo, cuando me pongo a hacer algo en Django y escribo mis primeros tests, los noto pesados y desordenados. Me resulta difícil diferenciar entre tests unitarios, de integracción y de aceptación.
De la misma manera, suele ser una aventura añadir coverage, ya que nunca me acuerdo de cómo se hace.
En este artículo describiré cómo hacer ambas cosas.
  Entorno Lo primero es crear un entorno con lo que vamos a necesitar.]]></description>
</item><item>
    <title>Python Tornado: Web Testing</title>
    <link>https://magmax.org/blog/python-tornado-2/</link>
    <pubDate>Fri, 03 May 2013 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>https://magmax.org/blog/python-tornado-2/</guid>
    <description><![CDATA[Una vez tenemos los conocimientos básicos de Tornado, lo lógico es seguir añadiendo características del framework.
En este caso voy a añadir una de las características más importantes: el entorno de pruebas. En mi opinión, es siempre lo primero que se debería enseñar, mucho antes de otras cosas como el sistema de location (idiomas, etc.), acceso a servicios de terceros (google, facebook, twitter, oauth, &hellip;) y otras cosas molonas.
Partiremos de los conocimientos anteriores y pondremos un ejemplo sencillo de uso de esta herramienta.]]></description>
</item><item>
    <title>Selenium y QA Automation: tests</title>
    <link>https://magmax.org/blog/selenium-y-qa-automation-2/</link>
    <pubDate>Wed, 13 Mar 2013 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>https://magmax.org/blog/selenium-y-qa-automation-2/</guid>
    <description><![CDATA[En mi anterior post sobre Selenium y QA Automation comenzamos a ver cómo utilizar Selenium/Webdriver para la automatización de tareas web. En esta ocasión lo adaptaremos para su uso más habitual: la creación de pruebas de aceptación.
Mediante ejemplos en Python adaptaremos nuestro ejercicio anterior para ejecutarlo como tests. Así mismo, refactorizaremos para obtener un entorno de pruebas sencillo, extensible y fácil de utilizar.
Tras este artículo, no debería ser difícil utilizar un sistema de integración contínua para la automatización de pruebas de aceptación.]]></description>
</item><item>
    <title>Integración contínua: BuildBot</title>
    <link>https://magmax.org/blog/buildbot/</link>
    <pubDate>Thu, 02 Aug 2012 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>https://magmax.org/blog/buildbot/</guid>
    <description><![CDATA[Como prometí en el artículo anterior, es hora de presentar otra alternativa para la Integración Contínua (CI, o Continuous Integration).
No es la única alternativa, pero yo sólo he trasteado con Jenkins y con BuildBot.
  Maestro/Esclavo De la misma manera que Jenkins, BuildBot tiene una arquitectura Maestro/Esclavo. Sin embargo, Jenkins nos gestionaba la instalación de los esclavos, mientras que BuildBot no lo hará. En general, es menos amigable que Jenkins.]]></description>
</item><item>
    <title>Integración continua: Jenkins</title>
    <link>https://magmax.org/blog/jenkins/</link>
    <pubDate>Sat, 21 Jul 2012 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>https://magmax.org/blog/jenkins/</guid>
    <description><![CDATA[Ahora está de moda eso de la integración continua (en adelante, CI. de Continuous Integration). Pero&hellip; ¿Qué es eso de la CI?
Contaré a grandes rasgos algunos aspectos y después me centraré en la configuración de un trabajo con jenkins.
  ¿Qué es CI? Asumamos que tenéis una aplicación terminada; sin embargo, descubrís un pequeño defecto que no os lleva más de 5 minutos arreglar. Desde el mismo momento en el que lo corregís, guardáis y queréis hacer el cambio definitivo, ¿cuánto tiempo pasa?]]></description>
</item><item>
    <title>Unit tests en Java (II)</title>
    <link>https://magmax.org/blog/java-unit-test-2/</link>
    <pubDate>Mon, 16 Jul 2012 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>https://magmax.org/blog/java-unit-test-2/</guid>
    <description><![CDATA[En el último artículo comencé a explicar algunas cosas sobre los unit tests en Java. Este artículo comienza donde lo dejamos en el anterior.
En este caso veremos cómo emplear las TestSuites para poder evolucionar el modelo anterior.
  El problema Como siempre, partimos de un problema y vamos caminando hacia la solución. En este caso vamos a tratar de añadir una nueva funcionalidad a nuestra clase de estadística: vamos a calcular la media de un vector de números.]]></description>
</item><item>
    <title>Unit tests en Java</title>
    <link>https://magmax.org/blog/java-unit-test/</link>
    <pubDate>Mon, 09 Jul 2012 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>https://magmax.org/blog/java-unit-test/</guid>
    <description><![CDATA[El otro día me di cuenta de que no había escrito ningún artículo sobre tests unitarios en Java. ¡Eso hay que arreglarlo!
Tengo artículos más complejos pero, a veces, volver a la base ayuda a tener una mejor visión de conjunto. Además, nunca se sabe lo que se puede aprender de lo básico.
Aprovecharé para hacer incapié en las características de los buenos tests.
Actualización 2012-07-11: Añado árbol de directorios y cabeceras indicando a qué archivo pertenecen.]]></description>
</item><item>
    <title>Code Coverage o cómo engañarte a ti mismo</title>
    <link>https://magmax.org/blog/codecoverage/</link>
    <pubDate>Mon, 05 Dec 2011 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>https://magmax.org/blog/codecoverage/</guid>
    <description><![CDATA[Viene siendo muy habitual pensar que las pruebas son sinónimo de corrección y que es importante tener una gran cobertura de código. Voy a tratar de demostrar que esto no es así.
Ojo&hellip; con ello no digo que estén mal, sino que es necesario saber de qué estamos hablando. Yo soy partidario de un número de pruebas adecuado y de un porcentaje de cobertura&hellip; suficiente.
  Si está probado, funciona Sabemos que está probado, pero&hellip; ¿cubrimos todos los casos de uso?]]></description>
</item><item>
    <title>No comentes: ¡Asegura!</title>
    <link>https://magmax.org/blog/asegura/</link>
    <pubDate>Sun, 14 Aug 2011 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>https://magmax.org/blog/asegura/</guid>
    <description><![CDATA[Hoy he descubierto mucho de ese gran desconocido que es assert.
Resulta que tenía a mi alcance una herramienta de depuración bastante fuerte y aún no he hecho uso de ella.
Con el fin de solucionar este problema, escribo este artículo, aunque no escribiré nada que no se encuentre en la Documentación de Java sobre Assert o la documentación Python.
  Lo más básico Lo primero es saber cómo vamos a usarlo.]]></description>
</item><item>
    <title>Atheist, No seas crédulo ¡¡Prueba!!</title>
    <link>https://magmax.org/blog/atheist-no-seas-credulo/</link>
    <pubDate>Sat, 13 Aug 2011 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>https://magmax.org/blog/atheist-no-seas-credulo/</guid>
    <description><![CDATA[Hay dos tipos de programadores: los creyentes y los ateos.
Los creyentes se creen tan buenos que no necesitan pruebas. Tienen fe en su forma de escribir código.
Los ateos, necesitan pruebas para poder creer.
Precisamente por esta razón nace Atheist.
  Motivación Ayer, en la reunión de Agile-CR , David Villa nos contó las maravillas de Atheist.
Personalmente, me impresionó bastante.
No es un sistema para hacer pruebas unitarias, aunque permite integrar pruebas unitarias en python, C/C++ o Java.]]></description>
</item></channel>
</rss>
