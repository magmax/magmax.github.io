<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>coverage on El blog de MagMax</title>
    <link>https://magmax.org/tags/coverage/</link>
    <description>Recent content in coverage on El blog de MagMax</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Nov 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://magmax.org/tags/coverage/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>¿Es la cobertura de código irrelevante?</title>
      <link>https://magmax.org/blog/is-code-coverage-irrelevant/</link>
      <pubDate>Tue, 17 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/is-code-coverage-irrelevant/</guid>
      <description>
        
          &lt;p&gt;Después de leer el artículo &lt;a href=&#34;https://ronjeffries.com/articles/015-11/coverage/&#34;&gt;&amp;ldquo;Is Code Coverage Irrelevant?&amp;rdquo; by Ron Jeffries&lt;/a&gt; siento la necesidad de aceptar el reto y contar lo que realmente opino sobre la cobertura de código.&lt;/p&gt;
&lt;p&gt;Desde hace algún tiempo he estado pensando en escribir este artículo&amp;hellip; Así que creo que éste es el mejor momento.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/programming.jpg&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;qué-significa-la-cobertura&#34;&gt;¿Qué significa la cobertura?&lt;/h2&gt;
&lt;p&gt;Comencemos con este twit:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dos proyectos, uno con el 95% de cobertura con tests, otro con 45%. Pagan por error encontrado. ¿En cuál quieres trabajar?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Bueno&amp;hellip; Estoy de acuerdo con la gente que dijo que depende. No tengo suficiente información para decidir.&lt;/p&gt;
&lt;p&gt;Pero mi primera pregunta es diferente de la de otra gente: &lt;strong&gt;¿Qué tipo de cobertura?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A menudo las empresas medien la cobertura sin pensar en ello, pero la cobertura dada por los diferentes tests significa diferentes cosas.&lt;/p&gt;
&lt;p&gt;La &lt;strong&gt;cobertura de los tests unitarios&lt;/strong&gt; puede indicar la &lt;em&gt;intención&lt;/em&gt; de pruebas. Una cobertura alta producida por los tests unitarios significa que se ha tratado de probar concienzudamente, a pesar de que no es garantía de que se haya logrado.&lt;/p&gt;
&lt;p&gt;Es difícil incrementar la cobertura de los tests unitarios. De hecho, es muy difícil tener tests unitarios realmente buenos.&lt;/p&gt;
&lt;p&gt;Por otra parte, la &lt;strong&gt;cobertura de los tests de integración&lt;/strong&gt; nos muestra la cantidad de código que &lt;strong&gt;no se ha probado&lt;/strong&gt; de ninguna manera. Es decir: no es una medida de la bondad, sino de la duda. Se puede asegurar que el código probado funciona al menos para un caso de uso, pero el código no probado&amp;hellip; Es un misterio. He tenido código python fallando en métodos triviales por una errata, sólo porque no había ningún test.&lt;/p&gt;
&lt;p&gt;Y, finalmente, la &lt;strong&gt;cobertura de los tests de aceptación&lt;/strong&gt; muestra qué métodos &lt;em&gt;probablemente&lt;/em&gt; no se usan o no son útiles. Nadie se preocupó de probarlos, por lo que probablemente no haya un flujo para llegar hasta ellos y están obsoletos o bien están aportando una funcionalidad innecesaria.&lt;/p&gt;
&lt;p&gt;Lamentablemente, las empresas tienden a unir todos estos porcentajes.&lt;/p&gt;
&lt;p&gt;En general, el número que dice más es el &lt;em&gt;código no cubierto&lt;/em&gt;, a pesar de que la gente sólo mira el código cubierto.&lt;/p&gt;
&lt;h2 id=&#34;qué-ofrece-en-realidad-una-alta-cobertura&#34;&gt;¿Qué ofrece en realidad una alta cobertura?&lt;/h2&gt;
&lt;p&gt;Bueno&amp;hellip; Ofrece probabilidades.&lt;/p&gt;
&lt;p&gt;Por ejemplo, con &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/ms679351%28VS.85%29.aspx&#34;&gt;FormatMessage&lt;/a&gt;, un método de la API de Windows, es difícil conseguir una alta cobertura: demasiados argumentos, demasiados flujos. Requeriría un montón de tests. Pero las líneas no cubiertas nos muestran dónde es más probable que falle el código.&lt;/p&gt;
&lt;p&gt;Con la típica función &lt;code&gt;math.sqrt&lt;/code&gt;, que devuelve la raíz cuadrada de un número dado, es fácil obtener un 100% de cobertura sin probar nada en absoluto: puede fallar con un cero o valores negativos, o incluso funcionar sólo para un par de números. Por lo tanto, la cobertura nos dice&amp;hellip; probablemente nada.&lt;/p&gt;
&lt;p&gt;Sólo podemos hablar del código no cubierto, porque es algo desconocido.&lt;/p&gt;
&lt;p&gt;Además, una alta cobertura en los tests unitarios puede significar que se tienen métodos muy pequeños, que desperdiciamos un montón de tiempo en las pruebas o bien que tenemos test unitarios muy malos (que realmente son tests de integración). Probablemente.&lt;/p&gt;
&lt;h2 id=&#34;conclusión&#34;&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;Me gusta muchísimo el artículo &lt;a href=&#34;https://googletesting.blogspot.com.es/2010/07/code-coverage-goal-80-and-no-less.html&#34;&gt;Code coverage goal: 80% and no less!&lt;/a&gt;, de Alberto Savoia. La cobertura es algo que nos ayuda a asegurarnos de lo que hace nuestro código y de sus puntos débiles. No se puede utilizar como una medida de avance o la bondad de los desarrolladores.&lt;/p&gt;
&lt;p&gt;Como siempre digo: &lt;strong&gt;Es sencillo conseguir un 100% de cobertura, pero lo difícil es probarlo todo&lt;/strong&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
