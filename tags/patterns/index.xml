<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>patterns - Etiqueta - El blog de MagMax</title>
        <link>https://magmax.org/tags/patterns/</link>
        <description>patterns - Etiqueta - El blog de MagMax</description>
        <generator>Hugo -- gohugo.io</generator><language>es</language><lastBuildDate>Sat, 18 May 2013 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://magmax.org/tags/patterns/" rel="self" type="application/rss+xml" /><item>
    <title>Patrones: Observer (Java/Python)</title>
    <link>https://magmax.org/blog/patterns-observer/</link>
    <pubDate>Sat, 18 May 2013 00:00:00 &#43;0000</pubDate>
    <author>Miguel Ángel</author>
    <guid>https://magmax.org/blog/patterns-observer/</guid>
    <description><![CDATA[<p>A menudo necesitamos realizar operaciones cuando ocurren eventos. En este tipo de situaciones existen dos soluciones: inyectar el objeto que tiene que recibir los eventos en el que los provoca o implementar el patrón <em>Observer</em> (&ldquo;Observador&rdquo;, pero es raro que alguien traduzca los nombres de los patrones).</p>
<p>También es posible que un objeto genere eventos pero sean varios los consumidores de éstos.  En <em>swing</em>, <em>gtk</em>,&hellip; ocurre constantemente, utilizando los conocidos <em>listeners</em>. Pero&hellip; ¿Qué es un <em>listener</em> realmente? No es más que una implementación del patrón <em>Observer</em>.</p>
<p>Veremos cómo utilizar este utilísimo patrón en Java y en Python.</p>]]></description>
</item>
<item>
    <title>Constructores simples</title>
    <link>https://magmax.org/blog/constructores-simples/</link>
    <pubDate>Mon, 23 Jan 2012 00:00:00 &#43;0000</pubDate>
    <author>Miguel Ángel</author>
    <guid>https://magmax.org/blog/constructores-simples/</guid>
    <description><![CDATA[<p>Esta semana me he dado cuenta de la diferencia existente entre un constructor feo y uno bonito. Es curioso lo fácil que es hacerlo bien y lo poquito que cuesta, así que voy a compartir mis apreciaciones con vosotros, a ver qué opináis.</p>
<p>Durante mi carrera profesional he hecho muchas cosas feas, así que no me echéis en cara si encontráis que he hecho algo diferente de lo que diga :D ¡Esto consiste en ir mejorando día a día!</p>
<p><em>Actualización 2012/01/24</em>: Por petición de <em>YeBeNeS</em>, añado ejemplos en java.</p>]]></description>
</item>
<item>
    <title>El patrón Singleton</title>
    <link>https://magmax.org/blog/patron-singleton/</link>
    <pubDate>Mon, 16 Jan 2012 00:00:00 &#43;0000</pubDate>
    <author>Miguel Ángel</author>
    <guid>https://magmax.org/blog/patron-singleton/</guid>
    <description><![CDATA[<h2 id="para-qué-sirve">Para qué sirve</h2>
<p>Permite tener una única instancia de un objeto en toda la aplicación</p>]]></description>
</item>
<item>
    <title>Estático vs Dinámico</title>
    <link>https://magmax.org/blog/estatico-vs-dinamico/</link>
    <pubDate>Mon, 02 Jan 2012 00:00:00 &#43;0000</pubDate>
    <author>Miguel Ángel</author>
    <guid>https://magmax.org/blog/estatico-vs-dinamico/</guid>
    <description><![CDATA[<p>A menudo escribo tutoriales. Realmente, estos tutoriales son artículos de opinión: Alguien puede estar en desacuerdo conmigo. Siempre hay otra manera de hacer las cosas y es más que probable que yo no la conozca. En este caso va a ser más patente.</p>
<p>En este caso vamos a ver las diferencias que hay entre hacer las cosas de manera estática y hacerlas dinámica. Y veremos también cómo hay más cosas estáticas de las que creemos.</p>]]></description>
</item>
<item>
    <title>Patrones de diseño mediante ejemplos</title>
    <link>https://magmax.org/blog/patrones-ejemplos/</link>
    <pubDate>Thu, 02 Dec 2010 00:00:00 &#43;0000</pubDate>
    <author>Miguel Ángel</author>
    <guid>https://magmax.org/blog/patrones-ejemplos/</guid>
    <description><![CDATA[<p>¿No os ha pasado nunca que encontráis un artículo tan bueno que decís &ldquo;éste me lo guardo&rdquo;? ¿Y qué ocurre cuando lo que os ha gustado tanto es un comentario?</p>
<p>No he podido resistirme a hacerme eco de <a href="https://stackoverflow.com/questions/1673841/examples-of-gof-design-patterns/2707195#2707195" target="_blank" rel="noopener noreffer ">este comentario, encontrado en
stackoverflow</a>, de <a href="https://balusc.blogspot.com/:" target="_blank" rel="noopener noreffer ">BalusC</a>.</p>]]></description>
</item>
<item>
    <title>Patrones 1: Sistema de log</title>
    <link>https://magmax.org/blog/patrones-sistema-log/</link>
    <pubDate>Sun, 12 Sep 2010 00:00:00 &#43;0000</pubDate>
    <author>Miguel Ángel</author>
    <guid>https://magmax.org/blog/patrones-sistema-log/</guid>
    <description><![CDATA[<p>Voy a comenzar una serie de posts con la idea de mejorar la capacidad de identificar patrones y aprender cómo implementarlos. Esto ayudará al lector y también a mí a manejar Patrones de programación de una manera mucho más habitual.</p>]]></description>
</item>
<item>
    <title>Cómo programar mal: La API de Windows (I)</title>
    <link>https://magmax.org/blog/api-windows/</link>
    <pubDate>Sat, 21 Aug 2010 00:00:00 &#43;0000</pubDate>
    <author>Miguel Ángel</author>
    <guid>https://magmax.org/blog/api-windows/</guid>
    <description><![CDATA[<p>Para mi más completa desgracia, últimamente me he tenido que pelear bastante con la API de Windows. No será la primera vez que digo que esta API tiene tantas cosas mal hechas que darían para escribir un libro. Y voy a comenzar por ahí.</p>
<p>Voy a utilizar la API pública de microsoft para explicar cosas que NUNCA deberían haberse hecho así. Si hay un millón de opciones, se ha elegido la peor.</p>]]></description>
</item>
</channel>
</rss>
