<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>unittest - Etiqueta - El blog de MagMax</title>
        <link>https://magmax.org/tags/unittest/</link>
        <description>unittest - Etiqueta - El blog de MagMax</description>
        <generator>Hugo -- gohugo.io</generator><language>es</language><lastBuildDate>Tue, 27 Sep 2011 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://magmax.org/tags/unittest/" rel="self" type="application/rss+xml" /><item>
    <title>Python: Cómo hacer pruebas 2: unittest</title>
    <link>https://magmax.org/blog/python-pruebas-2/</link>
    <pubDate>Tue, 27 Sep 2011 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>https://magmax.org/blog/python-pruebas-2/</guid>
    <description><![CDATA[Tras el artículo Python: Cómo hacer pruebas (1) es lógico pensar que vendrá la segunda parte.
En esta ocasión nos centraremos en UnitTest.
  Construcción básica Hay muchas ocasiones en las que las pruebas realizadas con doctest se nos quedarán cortas. Por ejemplo, ¿cómo probamos un acceso a base de datos? ¿Y una interacción entre clases? Con este fin está unittest. Hay gente que lo denomina &ldquo;PyUnit&rdquo;, ya que es similar a JUnit.]]></description>
</item></channel>
</rss>
