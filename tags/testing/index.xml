<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Testing - Etiqueta - El blog de MagMax</title><link>/tags/testing/</link><description>Testing - Etiqueta - El blog de MagMax</description><generator>Hugo -- gohugo.io</generator><language>es</language><lastBuildDate>Mon, 24 Mar 2014 00:00:00 +0000</lastBuildDate><atom:link href="/tags/testing/" rel="self" type="application/rss+xml"/><item><title>Testing en django: mejoras</title><link>/blog/testing-en-django-mejoras/</link><pubDate>Mon, 24 Mar 2014 00:00:00 +0000</pubDate><author>Miguel Ángel</author><guid>/blog/testing-en-django-mejoras/</guid><description><![CDATA[<p>A menudo, cuando me pongo a hacer algo en <a href="https://www.djangoproject.com/" title="High-level Python Web framework" target="_blank" rel="noopener noreffer ">Django</a> y escribo mis primeros tests, los noto pesados y desordenados. Me resulta difícil diferenciar entre tests unitarios, de integracción y de aceptación.</p>
<p>De la misma manera, suele ser una aventura añadir <em>coverage</em>, ya que nunca me acuerdo de cómo se hace.</p>
<p>En este artículo describiré cómo hacer ambas cosas.</p>]]></description></item><item><title>Python Tornado: Web Testing</title><link>/blog/python-tornado-2/</link><pubDate>Fri, 03 May 2013 00:00:00 +0000</pubDate><author>Miguel Ángel</author><guid>/blog/python-tornado-2/</guid><description><![CDATA[<p>Una vez tenemos los <a href="/blog/python-tornado/" rel="">conocimientos básicos de Tornado</a>, lo lógico es seguir añadiendo características del <em>framework</em>.</p>
<p>En este caso voy a añadir una de las características más importantes: el entorno de pruebas. En mi opinión, es siempre lo primero que se debería enseñar, mucho antes de otras cosas como el sistema de <em>location</em> (idiomas, etc.), acceso a servicios de terceros (google, facebook, twitter, oauth, &hellip;) y otras cosas molonas.</p>
<p>Partiremos de los conocimientos anteriores y pondremos un ejemplo sencillo de uso de esta herramienta.</p>
<p>Se tratará de pruebas de integración. <strong>No</strong> se utilizará un <em>Browser</em>, y <strong>podremos <em>mockear</em></strong> lo que nos haga falta (aunque en este artículo no se utilizarán <em>mocks</em>).</p>]]></description></item><item><title>Selenium y QA Automation: tests</title><link>/blog/selenium-y-qa-automation-2/</link><pubDate>Wed, 13 Mar 2013 00:00:00 +0000</pubDate><author>Miguel Ángel</author><guid>/blog/selenium-y-qa-automation-2/</guid><description><![CDATA[<p>En mi anterior post sobre <a href="/blog/selenium-y-qa-automation/" rel="">Selenium y QA Automation</a> comenzamos a ver cómo utilizar <a href="https://docs.seleniumhq.org/" target="_blank" rel="noopener noreffer ">Selenium/Webdriver</a> para la automatización de tareas web. En esta ocasión lo adaptaremos para su uso más habitual: la creación de pruebas de aceptación.</p>
<p>Mediante ejemplos en Python adaptaremos nuestro ejercicio anterior para ejecutarlo como tests. Así mismo, refactorizaremos para obtener un entorno de pruebas sencillo, extensible y fácil de utilizar.</p>
<p>Tras este artículo, no debería ser difícil utilizar un sistema de integración contínua para la automatización de pruebas de aceptación.</p>]]></description></item><item><title>Integración contínua: BuildBot</title><link>/blog/buildbot/</link><pubDate>Thu, 02 Aug 2012 00:00:00 +0000</pubDate><author>Miguel Ángel</author><guid>/blog/buildbot/</guid><description><![CDATA[<p>Como prometí en el <a href="/blog/jenkins/" rel="">artículo anterior</a>, es hora de presentar otra alternativa para la Integración Contínua (<em>CI</em>, o <em>Continuous Integration</em>).</p>
<p>No es la única alternativa, pero yo sólo he trasteado con <a href="https://jenkins-ci.org/" target="_blank" rel="noopener noreffer ">Jenkins</a> y con <a href="https://buildbot.net/" target="_blank" rel="noopener noreffer ">BuildBot</a>.</p>]]></description></item><item><title>Integración continua: Jenkins</title><link>/blog/jenkins/</link><pubDate>Sat, 21 Jul 2012 00:00:00 +0000</pubDate><author>Miguel Ángel</author><guid>/blog/jenkins/</guid><description><![CDATA[<p>Ahora está de moda eso de la integración continua (en adelante, <em>CI</em>. de <em>Continuous Integration</em>). Pero&hellip; ¿Qué es eso de la <em>CI</em>?</p>
<p>Contaré a grandes rasgos algunos aspectos y después me centraré en la configuración de un trabajo con jenkins.</p>]]></description></item><item><title>Unit tests en Java (II)</title><link>/blog/java-unit-test-2/</link><pubDate>Mon, 16 Jul 2012 00:00:00 +0000</pubDate><author>Miguel Ángel</author><guid>/blog/java-unit-test-2/</guid><description><![CDATA[<p>En el último artículo comencé a explicar algunas cosas sobre los <a href="/blog/java-unit-test/" rel="">unit tests en
Java</a>. Este artículo comienza donde lo dejamos en el anterior.</p>
<p>En este caso veremos cómo emplear las TestSuites para poder evolucionar el modelo anterior.</p>]]></description></item><item><title>Unit tests en Java</title><link>/blog/java-unit-test/</link><pubDate>Mon, 09 Jul 2012 00:00:00 +0000</pubDate><author>Miguel Ángel</author><guid>/blog/java-unit-test/</guid><description><![CDATA[<p>El otro día me di cuenta de que no había escrito ningún artículo sobre tests unitarios en Java. ¡Eso hay que arreglarlo!</p>
<p>Tengo artículos más complejos pero, a veces, volver a la base ayuda a tener una mejor visión de conjunto. Además, nunca se sabe lo que se puede aprender de lo básico.</p>
<p>Aprovecharé para hacer incapié en las características de los buenos tests.</p>
<p><em>Actualización 2012-07-11</em>: Añado árbol de directorios y cabeceras indicando a qué archivo pertenecen.
<em>Actualización 2012-07-13</em>: Gracias a un comentario de David Marín, descubro que la parte de los proveedores de datos es completamente errónea y la arreglo.</p>]]></description></item><item><title>Code Coverage o cómo engañarte a ti mismo</title><link>/blog/codecoverage/</link><pubDate>Mon, 05 Dec 2011 00:00:00 +0000</pubDate><author>Miguel Ángel</author><guid>/blog/codecoverage/</guid><description><![CDATA[<p>Viene siendo muy habitual pensar que las pruebas son sinónimo de corrección y que es importante tener una gran cobertura de código. Voy a tratar de demostrar que esto no es así.</p>
<p>Ojo&hellip; con ello no digo que estén mal, sino que es necesario saber de qué estamos hablando. Yo soy partidario de un número de pruebas adecuado y de un porcentaje de cobertura&hellip; suficiente.</p>]]></description></item><item><title>No comentes: ¡Asegura!</title><link>/blog/asegura/</link><pubDate>Sun, 14 Aug 2011 00:00:00 +0000</pubDate><author>Miguel Ángel</author><guid>/blog/asegura/</guid><description><![CDATA[<p>Hoy he descubierto mucho de ese gran desconocido que es <em>assert</em>.</p>
<p>Resulta que tenía a mi alcance una herramienta de depuración bastante fuerte y aún no he hecho uso de ella.</p>
<p>Con el fin de solucionar este problema, escribo este artículo, aunque no
escribiré nada que no se encuentre en la <a href="https://download.oracle.com/javase/6/docs/technotes/guides/language/assert.html" target="_blank" rel="noopener noreffer ">Documentación de Java sobre Assert</a>
o la <a href="https://docs.python.org/release/2.5.2/ref/assert.html" target="_blank" rel="noopener noreffer ">documentación Python</a>.</p>]]></description></item><item><title>Atheist, No seas crédulo ¡¡Prueba!!</title><link>/blog/atheist-no-seas-credulo/</link><pubDate>Sat, 13 Aug 2011 00:00:00 +0000</pubDate><author>Miguel Ángel</author><guid>/blog/atheist-no-seas-credulo/</guid><description><![CDATA[<p>Hay dos tipos de programadores: los creyentes y los ateos.</p>
<p>Los creyentes se <em>creen</em> tan buenos que no necesitan pruebas. Tienen fe en su forma de escribir código.</p>
<p>Los ateos, necesitan <em>pruebas</em> para poder creer.</p>
<p>Precisamente por esta razón nace <a href="https://savannah.nongnu.org/projects/atheist/" target="_blank" rel="noopener noreffer ">Atheist</a>.</p>]]></description></item></channel></rss>