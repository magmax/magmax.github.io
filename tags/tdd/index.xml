<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tdd on El blog de MagMax</title>
    <link>http://example.org/tags/tdd/</link>
    <description>Recent content in tdd on El blog de MagMax</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 05 Dec 2012 00:00:00 +0000</lastBuildDate><atom:link href="http://example.org/tags/tdd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>10 razones para evitar el Desarrollo Dirigido por Tests</title>
      <link>http://example.org/blog/10reasons-to-avoid-tdd/</link>
      <pubDate>Wed, 05 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/10reasons-to-avoid-tdd/</guid>
      <description>
        
          &lt;p&gt;Como saben los que me siguen habitualmente, de vez en cuando me da por traducir algún artículo, con la intención de acercar información interesante a los más perezosos a la hora de leer en inglés. Éste es otro de &lt;em&gt;esos artículos&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;En este caso he traducido el artículo &lt;a href=&#34;http://www.softwareandi.com/2011/12/10-reasons-to-avoid-test-driven.html&#34;&gt;10 Reasons to Avoid Test Driven Development&lt;/a&gt;, de &lt;a href=&#34;https://plus.google.com/107676240236745204608/posts&#34;&gt;Assaf Stone&lt;/a&gt;. No sé la licencia que tiene&amp;hellip; no pone nada en su web.&lt;/p&gt;
&lt;p&gt;Espero que os guste tanto como a mí.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;10-razones-para-evitar-tdd&#34;&gt;10 razones para evitar TDD&lt;/h1&gt;
&lt;p&gt;El Desarrollo Dirigido por Tests (TDD), y todas sus variantes (BDD, ATDD) son en mi opinión buenos métodos para dirigir los esfuerzos de desarrollo de cualquier grupo, e incrementar la calidad el producto. Pero TDD no es una bala de plata. No encaja en todos los proyectos. El siguiente artículo lista las 10 principales razones para &lt;strong&gt;no&lt;/strong&gt; escribir tests automatizados para tu código.&lt;/p&gt;
&lt;p&gt;Si se te aplica una o más de estas condiciones, deberías considerar olvidar TDD y, de hecho, todas las demás técnicas ágiles, ya que serán un esfuerzo desperdiciado:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;http://example.org/images/no-TDD.png&#34;
         alt=&#34;No TDD&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;10-no-hay-cliente&#34;&gt;10. No hay cliente&lt;/h2&gt;
&lt;p&gt;A veces se desarrolla un producto que nunca usará nadie. En este caso, cualquier esfuerzo dedicado por mejorar la calidad es un completo desperdicio. A nadie le importará.&lt;/p&gt;
&lt;h2 id=&#34;9-el-cliente-es-un-téster-ávido&#34;&gt;9. El cliente es un &lt;em&gt;téster&lt;/em&gt; ávido&lt;/h2&gt;
&lt;p&gt;Hay gente que adora más que nada probar software inestable (beta). La diversión de encontrar nuevos errores y tratar de imaginar qué fue mal es su razón de vivir. Otros son científicos de corazón, y adoran mirar trazas de error, para hacer ingeniería inversa en el código. Si da la casualidad de que tu cliente es uno de esos, entonces escribir tests automatizados le quitará toda la diversión a tu código. ¡No lo hagas!&lt;/p&gt;
&lt;h2 id=&#34;8-el-proyecto-es-corto-simple-y-directo&#34;&gt;8. El proyecto es corto, simple y directo&lt;/h2&gt;
&lt;p&gt;Si tu equipo puede completar el proyecto en un periodo de tiempo corto (no más de unas semanas), y &lt;strong&gt;nunca&lt;/strong&gt;, &lt;strong&gt;jamás&lt;/strong&gt; tendrá que volver a abrirlo por mantenimiento, entonces los beneficios de la &lt;strong&gt;mantenibilidad&lt;/strong&gt;, &lt;strong&gt;reusabilidad&lt;/strong&gt; y &lt;strong&gt;extensibilidad&lt;/strong&gt; se perderán. Dedicar tiempo y esfuerzo a estos valores es desperdiciarlo.&lt;/p&gt;
&lt;h2 id=&#34;7-tu-arquitectura-es-perfecta&#34;&gt;7. Tu arquitectura es perfecta&lt;/h2&gt;
&lt;p&gt;Si no hay forma de mejorar tu arquitectura, entonces no hay necesidad de que sea extensible. TDD, por su flujo de desarrollo incremental, fuerza a la arquitectura a ser extensible, simplemente haciéndote extenderla a medida que avanzas, y esto, como pintalabios en un cerdo, es algo que simplemente no necesitas.&lt;/p&gt;
&lt;h2 id=&#34;6-tu-documentación-es-perfecta&#34;&gt;6. Tu documentación es perfecta&lt;/h2&gt;
&lt;p&gt;Nunca olvidas una API, y cualquier cambio que hagas en tu software se documenta instantáneamente. Los tests que creas con TDD sirven como documentación, un ejemplo de cómo utilizar la API. Los tests correctamente nombrados y escritos explican el contexto del test, por lo que resulta sencillo encontrar el test que te muestra lo que necesitas entender. &lt;em&gt;Tu&lt;/em&gt; documentación es tan completa, que escribir tests es una clara violación del &lt;a href=&#34;http://c2.com/cgi/wiki?DontRepeatYourself&#34;&gt;principio DRY&lt;/a&gt;, así que claramente deberías evitar las pruebas.&lt;/p&gt;
&lt;h2 id=&#34;5-tu-equipo-nunca-cambia-y-todas-las-memorias-de-sus-miembros-son-perfectas&#34;&gt;5. Tu equipo nunca cambia y todas las memorias de sus miembros son perfectas&lt;/h2&gt;
&lt;p&gt;La memoria colectiva nunca olvida cada una de las líneas de código que escribió, o cuál era el contexto cuando la escribió. En ese caso, no necesitas las pruebas para recordarte lo que hace el código, por qué lo hace o cuál es la causa de ello. También significa que los miembros de tu equipo &lt;strong&gt;nunca se marchan&lt;/strong&gt;, o &lt;strong&gt;se reclutan nuevos miembros&lt;/strong&gt;, porque si este ocurriese, perderías información, o habría miembros que no recuerdan el código (sin haber estado allí cuando se escribió). Si este es el caso, no te molestes con las pruebas; tan solo interferirán en tu increible velocidad.&lt;/p&gt;
&lt;h2 id=&#34;4-hecho-significa-que-el-código-está-terminado&#34;&gt;4. &amp;ldquo;Hecho&amp;rdquo; significa que el código está terminado&lt;/h2&gt;
&lt;p&gt;Muchos equipos tienen una &lt;a href=&#34;http://www.allaboutagile.com/definition-of-done-10-point-checklist/&#34;&gt;definición de hecho&lt;/a&gt; (DoD) que significa que la característica está &amp;ldquo;hecha&amp;rdquo; cuando se encuentra en un estado tal que el usuario final puede recibir y ejecutar (codificada, probada, desplegada, documentada, etc.). Muchos otros en cambio, tu equipo incluido, prefieren una definición más sencilla y fácil de obtener que acepta &amp;ldquo;terminado&amp;rdquo; como &amp;ldquo;hecho&amp;rdquo;. Para ti es suficienet con que el desarrollador declare que él o ella completó su parte, y cualquier otra cosa es responsabilidad de otro. Si no necesitas que el código se pruebe por el dueño del producto / director / usuario para aceptarlo, entonces lo mejor que puedes hacer es pasar a la siguiente característica ya mismo, en lugar de alargar tu relación con &lt;em&gt;esta&lt;/em&gt; característica.&lt;/p&gt;
&lt;h2 id=&#34;3-te-pagan-por-codificar-no-por-probar&#34;&gt;3. Te pagan por codificar, no por probar&lt;/h2&gt;
&lt;p&gt;Ignorando el hecho de que los tests son código (sorpresa), las pruebas están hechas para probar. Quizá tu equipo de testers es suficientemente rápido como para ejecutar las pruebas a medida que tú codificas, y darte &lt;strong&gt;feedback&lt;/strong&gt; en pocos segundos, señalando las zonas en las que rompiste el código, de manera que puedas arreglarlo mientras los cambios están frescos en tu mente, así como una suite de regresión completa del producto, en caso de que hayas roto algo en un componente distinto cada noche (a ellos no les importa trabajar por las noches; adoran el silencio absoluto). Bien por ti, cuida esos testers, y asegúrate de que tienen suficiente trabajo como para no aburrirse e irse a otra compañía que les ofrezca mejores retos.&lt;/p&gt;
&lt;h2 id=&#34;2-depurar-no-cuenta-y-probar-requiere-mucho-tiempo&#34;&gt;2. Depurar no cuenta, y probar requiere mucho tiempo&lt;/h2&gt;
&lt;p&gt;Como en cualquier empresa competitiva, tu equipo debe entregar a tiempo, lo que significa que deben estimar cuándo se entregará. Ya que tu &lt;strong&gt;DoD&lt;/strong&gt; no incluye pruebas, y probablemente no podrás adivinar cuánto tiempo te llevará depurar la característica, lo que implica todo el ciclo de tira y afloja entre desarrollo y QA, sólo tienes que estimar cuánto tiempo te llevará codificarlo. Si quieres cumplir la fecha, no es necesario que añadas el &lt;strong&gt;20% de margen&lt;/strong&gt; en tu tiempo de entrega o perderás la fecha final. Peor aún, si añades el 20% a tus estimaciones, tu jefe podría pensar que estás rellenando las estimaciones, lo que es su trabajo. Si ocurre esto, ¿quién sabe lo que podría pasar? Es mejor jugar sobre seguro.&lt;/p&gt;
&lt;h2 id=&#34;1-sólo-es-una-teoría&#34;&gt;1. Sólo es una teoría&lt;/h2&gt;
&lt;p&gt;Como la Evolución (y la Gravedad), sólo es una teoría. Incluso si todas las razones de más arriba no fueran válidas, nunca nadie ha probado de forma inequívoca que &lt;em&gt;&lt;strong&gt;este producto&lt;/strong&gt;&lt;/em&gt; podría haberse hecho más rápido y con mejor calidad usando las metodologías de desarrollo new-age como TDD. Es solo una cuestión de opinión.&lt;/p&gt;
&lt;h2 id=&#34;prueba-tú-mismo&#34;&gt;Prueba tú mismo&lt;/h2&gt;
&lt;p&gt;Ahora, para probar si deberías usar el desarrollo dirigido por pruebas o no, vuelve a la lista. Cuenta cuántas razones te puedes aplicar. Si tienes &lt;strong&gt;diez&lt;/strong&gt; puntos, no uses TDD. De hecho, si marcaste más de &lt;strong&gt;uno&lt;/strong&gt; (la razón #8 podría hasta ser legítima), &lt;strong&gt;no escribas nada de código&lt;/strong&gt;. Quizás serías más útil eligiendo una carrera que tenga menos incógnitas y partes móviles. ¿Quizá pavimentar carreteras?&lt;/p&gt;
&lt;p&gt;Artículo original: &lt;a href=&#34;https://plus.google.com/107676240236745204608/posts&#34;&gt;Assaf Stone&lt;/a&gt;
Traducción: &lt;a href=&#34;http://www.magmax.org&#34;&gt;Miguel Ángel García&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
