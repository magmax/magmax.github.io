<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ruby on El blog de MagMax</title>
    <link>https://magmax.org/tags/ruby/</link>
    <description>Recent content in ruby on El blog de MagMax</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 06 Aug 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://magmax.org/tags/ruby/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Calculando la letra del DNI</title>
      <link>https://magmax.org/blog/calculando-la-letra-del-dni/</link>
      <pubDate>Thu, 06 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/calculando-la-letra-del-dni/</guid>
      <description>
        
          &lt;p&gt;Hay pequeños algoritmos que pueden ser muy útiles, como calcular la letra del DNI.&lt;/p&gt;
&lt;p&gt;Puede valer tanto para solicitar el NIF y calcularla como para algo mucho más útil y menos usado: para validar que el DNI es válido.&lt;/p&gt;
&lt;p&gt;Vamos a ver cómo hacerlo en &lt;a href=&#34;http://www.python.org&#34;&gt;Python&lt;/a&gt;, &lt;a href=&#34;https://www.ruby-lang.org/es/&#34;&gt;Ruby&lt;/a&gt; y &lt;a href=&#34;http://www.w3schools.com/js/&#34;&gt;Javascript&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/dni.jpg&#34;
         alt=&#34;Documentación en España&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;algoritmo&#34;&gt;Algoritmo&lt;/h2&gt;
&lt;p&gt;Acordaos de esta secuencia: &lt;code&gt;TRWAGMYFPDXBNJZSQVHLCKE&lt;/code&gt; Ésta es la clave para calcular la letra de un NIF y obtener el DNI.&lt;/p&gt;
&lt;p&gt;El algoritmo no puede ser más sencillo: basta con obtener el resto entre el número del NIF y 23 y obtener el valor en esa cadena.&lt;/p&gt;
&lt;h3 id=&#34;python&#34;&gt;Python&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calculate_dni_letter&lt;/span&gt;(nif):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;  seq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TRWAGMYFPDXBNJZSQVHLCKE&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; seq[nif &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; len(seq)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;javascript&#34;&gt;Javascript&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calculateDNILetter&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nif&lt;/span&gt;) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;seq&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TRWAGMYFPDXBNJZSQVHLCKE&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;seq&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;nif&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;seq&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;];
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;ruby&#34;&gt;Ruby&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calculate_dni_letter&lt;/span&gt;(nif)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;  seq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TRWAGMYFPDXBNJZSQVHLCKE&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;  seq&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;nif &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; seq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;length&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ejemplo&#34;&gt;Ejemplo&lt;/h2&gt;
&lt;div&gt;
    &lt;input id=&#34;nif&#34; onchange=&#34;showLetter()&#34; onkeyup=&#34;showLetter()&#34; class=&#34;form-control&#34; placeholder=&#34;Introduzca su NIF&#34;/&gt;&lt;br/&gt;
    &lt;b&gt;DNI:&lt;/b&gt; &lt;span id=&#34;dni&#34;&gt;&lt;/span&gt;
&lt;/div&gt;
&lt;script&gt;
    function showLetter() {
      function calculateDNILetter(nif) {
        var seq = &#34;TRWAGMYFPDXBNJZSQVHLCKE&#34;;
        return seq[nif % seq.length];
      }
      var nif = document.getElementById(&#39;nif&#39;).value;
      var text;
      if (isNaN(parseInt(nif)) ) {
        text = &#34;Debe introducir un número&#34;;
      } else {
        text = nif + &#39;-&#39; + calculateDNILetter(nif);
      }

    document.getElementById(&#39;dni&#39;).innerHTML = text;
    }
&lt;/script&gt;

&lt;h2 id=&#34;conclusión&#34;&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;A partir de ahora lo tenéis fácil para validar un DNI. ¡No hay excusas! :)&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Por qué Ruby mola</title>
      <link>https://magmax.org/blog/porque-ruby-mola/</link>
      <pubDate>Fri, 07 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/porque-ruby-mola/</guid>
      <description>
        
          &lt;p&gt;Este artículo me resulta muy complejo. Así como en el resto de la saga de los &amp;ldquo;&lt;em&gt;por qué UN LENGUAJE mola&lt;/em&gt;&amp;rdquo; he tratado de ser todo lo imparcial que he podido, temo que en este caso me sea imposible.&lt;/p&gt;
&lt;p&gt;Y la causa es muy sencilla: mi propia ignorancia.&lt;/p&gt;
&lt;p&gt;Nunca he hecho nada en &lt;a href=&#34;http://www.ruby-lang.org/&#34;&gt;Ruby&lt;/a&gt;, salvo algún &lt;em&gt;kata&lt;/em&gt; que otro. Pero me estoy leyendo el libro &amp;ldquo;&lt;em&gt;7 languages in 7 weeks&lt;/em&gt;&amp;rdquo; (libro muy recomendable) y he aprovechado para tomar algunas notas.&lt;/p&gt;
&lt;p&gt;Así que éste es el artículo: &amp;ldquo;Por qué ruby mola, en mi opinión&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Admitiré todo tipo de críticas y sugerencias&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/ruby.png&#34;
         alt=&#34;Ruby&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;por-qué-ruby-me-mola&#34;&gt;Por qué Ruby me mola&lt;/h2&gt;
&lt;h3 id=&#34;toda-expresión-devuelve-algo&#34;&gt;Toda expresión devuelve algo&lt;/h3&gt;
&lt;p&gt;Creo que es una cosa que me gusta mucho. No tienes que preguntarte si un método devuelve algo, ya que &lt;em&gt;todos&lt;/em&gt; lo hacen. Aunque no quieran.&lt;/p&gt;
&lt;p&gt;Como azúcar sintáctico es algo genial. Pero mejor no hablaremos de los posibles problemas de cambio de API simplemente por añadir una instrucción más, sobreescritura de un &lt;strong&gt;return&lt;/strong&gt; implícito o del coste en rendimiento de apilar/desapilar muchos valores que nunca se utilizarán.&lt;/p&gt;
&lt;p&gt;Aún así, me gusta.&lt;/p&gt;
&lt;h3 id=&#34;condiciones-inline&#34;&gt;Condiciones inline&lt;/h3&gt;
&lt;p&gt;Tener la posibilidad de escribir una condición en una línea facilita la lectura de código. Eso es algo que me gusta del lenguaje.&lt;/p&gt;
&lt;p&gt;Por si alguien tiene dudas, me refiero a esto:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;erroneous filename&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exists?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;nombres-de-funciones-con-los-decoradores--y-&#34;&gt;Nombres de funciones con los decoradores ? y !&lt;/h3&gt;
&lt;p&gt;Venga, va: Me encanta eso de preguntar cosas y que el lenguaje quede legible. Sin embargo creo que debería ser más restrictivo, y prohibir que este tipo de funciones admita parámetros. ¿Por qué? Fijaos:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exists? &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;  file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;remove!
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Queda claro dónde estamos preguntando y que vamos a realizar una operación que modifica el objeto actual.&lt;/p&gt;
&lt;p&gt;Sin embargo, si añadimos parámetros a estas funciones la cosa cambia mucho:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; fs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exists? filename &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;  fs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;remove! filename
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Creo que queda claro a lo que me refiero :D&lt;/p&gt;
&lt;h3 id=&#34;duck-typing&#34;&gt;Duck typing&lt;/h3&gt;
&lt;p&gt;Si algo parece un pato y hace &amp;ldquo;cuac&amp;rdquo; como un pato, es un pato. Ni qué decir tiene que, si me gusta en Python, me tiene que gustar también en Ruby.&lt;/p&gt;
&lt;p&gt;Con esto se hace referencia a que es innecesario indicar qué interfaces se implementan en una clase, ya que basta con que implemente la funcionalidad adecuada.&lt;/p&gt;
&lt;h3 id=&#34;tipado-dinámico&#34;&gt;Tipado dinámico&lt;/h3&gt;
&lt;p&gt;Nuevamente una característica que también tiene Python y que también me gusta.&lt;/p&gt;
&lt;h3 id=&#34;symbols&#34;&gt;Symbols&lt;/h3&gt;
&lt;p&gt;La posibilidad de definir constantes invaluadas me gusta. No son pocas las veces que necesito una constante sólo a modo de documentación, y a veces necesito que sean valores únicos.&lt;/p&gt;
&lt;p&gt;Ya que estoy comparando con Python&amp;hellip; ¡Python &lt;strong&gt;no&lt;/strong&gt; lo tiene!&lt;/p&gt;
&lt;h3 id=&#34;bloques-de-código&#34;&gt;Bloques de código&lt;/h3&gt;
&lt;p&gt;Apesar de que tienen sus problemas potenciales, me gustan los bloques de código. Evitan la creación de funciones innecesarias porque se va a realizar una tarea simple. Me viene a la cabeza el ejemplo de ordenar un vector de objetos. En Java necesitaría una clase que implemente una interfaz &lt;strong&gt;Comparable&lt;/strong&gt;, de manera que pueda compararme dos objetos&amp;hellip; En ruby puedo hacer lo mismo en una línea.&lt;/p&gt;
&lt;p&gt;Quizá tienen demasiada potencia y pueden dar lugar a código duplicado. Aquí entra en juego la experiencia y habilidad del programador.&lt;/p&gt;
&lt;p&gt;En Python existe algo parecido aunque más limitado, que es el &lt;strong&gt;lambda&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;clases-abiertas&#34;&gt;Clases abiertas&lt;/h3&gt;
&lt;p&gt;Aunque vuelve a ser una espada de Damocles, me gustan las clases abiertas. No son pocas las veces que he deseado añadir una pequeña funcionalidad a una clase existente con el fin de ajustarla a mis necesidades, en lugar de tener que crear todo un wrapper por encima.&lt;/p&gt;
&lt;h2 id=&#34;por-qué-ruby-no-me-mola&#34;&gt;Por qué Ruby no me mola&lt;/h2&gt;
&lt;h3 id=&#34;cláusula-unless&#34;&gt;Cláusula Unless&lt;/h3&gt;
&lt;p&gt;Cada vez que me encuentro esta cláusula tengo que releer la expresión 3 veces para estar seguro de lo que hace. Y eso que es un simple &amp;ldquo;&lt;strong&gt;if not&lt;/strong&gt;&amp;rdquo;. Además, puede dar lugar a código difícil de leer, si se mezcla con condiciones habituales:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exists? &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; another_file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exists? &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; file &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; another_file &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# some stuff&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;cero-es-true&#34;&gt;Cero es True&lt;/h3&gt;
&lt;p&gt;A mí me resulta poco intuitivo. Será porque he sido programador de Ansi C durante mucho tiempo. Me resulta más sencillo pensar que algo que devuelve cero, es Falso.&lt;/p&gt;
&lt;h3 id=&#34;paréntesis-opcionales-al-llamar-a-una-función&#34;&gt;Paréntesis opcionales al llamar a una función&lt;/h3&gt;
&lt;p&gt;Aunque en muchas ocasiones permite una mayor legibilidad del código, yo prefiero que las cosas se hagan siempre de la misma manera. Si la manera de invocar a una función es mediante paréntesis, pues se ponen.&lt;/p&gt;
&lt;h3 id=&#34;los-tres-puntos&#34;&gt;Los tres puntos&lt;/h3&gt;
&lt;p&gt;Me parece demasiado afinar la diferencia entre &lt;em&gt;..&lt;/em&gt; y &lt;em&gt;&amp;hellip;&lt;/em&gt;, ya que resulta fácil confundirlos visualmente.&lt;/p&gt;
&lt;h3 id=&#34;parámetros-nombrados&#34;&gt;Parámetros nombrados&lt;/h3&gt;
&lt;p&gt;A mí me parecen muy interesantes los parámetros nombrados, ya que pueden ofrecer mucha semántica al código, sobre todo cuando algo deja de ser lo que es para ser otra cosa (python):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;create_output(output_filename&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;current_path)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ruby carece de esta característica, aunque podéis encontrar ejemplos en los que se pasa una hash como parámetro a la función. Horrible.&lt;/p&gt;
&lt;h3 id=&#34;hay-dos-maneras-de-crear-bloques&#34;&gt;Hay dos maneras de crear bloques&lt;/h3&gt;
&lt;p&gt;La sintaxis debería ser más simple, y la manera de hacerlo es reducir las formas de hacer las cosas. En Ruby podemos utilizar el &lt;strong&gt;do/end&lt;/strong&gt; o bien el &lt;strong&gt;{/}&lt;/strong&gt; para hacer lo mismo. Si una manera es buena, ¿por qué ofrecer una alternativa?&lt;/p&gt;
&lt;h2 id=&#34;no-sé-si-me-mola-en-ruby&#34;&gt;No sé si me mola en Ruby&lt;/h2&gt;
&lt;p&gt;No me gustan las evaluaciones automáticas de Strings. No sé si será porque me recuerda a PHP, pero el caso es que me parece muy arriesgado que por cambiar el tipo de comillas se pierda rendimiento.&lt;/p&gt;
&lt;p&gt;Sinceramente, me gusta cómo hace esto mismo Python, utilizando Templates. Si necesito una plantilla, ya usaré plantillas.&lt;/p&gt;
&lt;h2 id=&#34;conclusiones&#34;&gt;Conclusiones&lt;/h2&gt;
&lt;p&gt;Cuando comencé leerme el libro, Ruby me parecía un lenguaje muy curioso. Tiene muchas cosas muy molonas.&lt;/p&gt;
&lt;p&gt;Tras leerme el capítulo de Ruby, mi opinión ha cambiado drásticamente. No me gusta el lenguaje. Me parece innecesariamente complejo y, contra lo que defienden sus seguidores, me parece ofuscado.&lt;/p&gt;
&lt;h3 id=&#34;comparativa-ruby-python&#34;&gt;Comparativa Ruby-Python&lt;/h3&gt;
&lt;p&gt;Con el fin de explicar por qué me parece ofuscado, aquí tenéis una comparativa entre un código en Ruby y uno en Python. Se trata de un &amp;ldquo;&lt;em&gt;grep&lt;/em&gt;&amp;rdquo; pequeñito. Por favor, si algún programador de algún lenguaje quiere mejorarlo, se aceptan sugerencias, siempre y cuando haga exactamente lo mismo.&lt;/p&gt;
&lt;p&gt;Lo que hará es buscar una expresión regular en el directorio actual (&lt;em&gt;no&lt;/em&gt; es recursivo), mostrando el nombre del archivo, dos puntos, línea donde se encontró.&lt;/p&gt;
&lt;p&gt;Ruby:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/ruby&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;expression &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Regexp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#66d9ef&#34;&gt;ARGV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Dir&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;foreach(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;filename&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;  file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(filename)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;file? &lt;span style=&#34;color:#e6db74&#34;&gt;filename&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;foreach(filename) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;line&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;expression&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;        puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;filename&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;line&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Python:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; re
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;expression &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; filename &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;listdir(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isfile(filename):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(filename) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; content:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; content:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;        line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rstrip()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;match(expression, line):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{filename}:{line}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(filename&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;filename, line&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;line)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://gist.github.com/3706670&#34;&gt;Solución Ruby&lt;/a&gt; aportada por Juan F. Pérez, con una pequeña modificación:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/ruby&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;expression &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Regexp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#66d9ef&#34;&gt;ARGV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Dir&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;foreach(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;filename&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;file? filename
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;open(filename)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;line&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;    puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;filename&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;line&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; expression
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sed sinceros y pensad cuál resulta más legible.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Rails: Crear un ToDoList básico en 1 minuto</title>
      <link>https://magmax.org/blog/rails-todolist/</link>
      <pubDate>Thu, 23 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/rails-todolist/</guid>
      <description>
        
          &lt;p&gt;Ahora me ha dado por probar &lt;a href=&#34;http://rubyonrails.org&#34;&gt;Ruby On Rails&lt;/a&gt;. Y aquí tenéis los pasos para crear un ToDo List muy básico:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/ruby.png&#34;
         alt=&#34;Ruby&#34;/&gt; 
&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;rails todolist&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd todolist&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ruby script/generate scaffold Task title:string description:text priority:integer effort:integer duedate:datetime scheduleddate:datetime scope:string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rake db:create&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rake db:migrate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ruby script/server&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Abrir un navegador en la ruta &lt;code&gt;http://localhost:3000/tasks&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;He estado probando a meter referencias a otras tablas, pero el andamio (&lt;em&gt;scaffold&lt;/em&gt;) no es muy bueno para eso.&lt;/p&gt;
&lt;p&gt;Por defecto ya tiene configurada una BBDD sqlite que es la que estamos usando.&lt;/p&gt;
&lt;p&gt;En general, me está gustando bastante la filosofía de Ruby On Rails, y veo que es una herramienta más depurada que Kohana o, incluso, Django (muy a mi pesar).&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
