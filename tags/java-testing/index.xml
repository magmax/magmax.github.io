<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java testing on El blog de MagMax</title>
    <link>https://magmax.org/tags/java-testing/</link>
    <description>Recent content in java testing on El blog de MagMax</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 16 Jul 2012 00:00:00 +0000</lastBuildDate><atom:link href="https://magmax.org/tags/java-testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unit tests en Java (II)</title>
      <link>https://magmax.org/blog/java-unit-test-2/</link>
      <pubDate>Mon, 16 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/java-unit-test-2/</guid>
      <description>En el último artículo comencé a explicar algunas cosas sobre los unit tests en Java. Este artículo comienza donde lo dejamos en el anterior.
En este caso veremos cómo emplear las TestSuites para poder evolucionar el modelo anterior.
  El problema Como siempre, partimos de un problema y vamos caminando hacia la solución. En este caso vamos a tratar de añadir una nueva funcionalidad a nuestra clase de estadística: vamos a calcular la media de un vector de números.</description>
    </item>
    
    <item>
      <title>Unit tests en Java</title>
      <link>https://magmax.org/blog/java-unit-test/</link>
      <pubDate>Mon, 09 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/java-unit-test/</guid>
      <description>El otro día me di cuenta de que no había escrito ningún artículo sobre tests unitarios en Java. ¡Eso hay que arreglarlo!
Tengo artículos más complejos pero, a veces, volver a la base ayuda a tener una mejor visión de conjunto. Además, nunca se sabe lo que se puede aprender de lo básico.
Aprovecharé para hacer incapié en las características de los buenos tests.
Actualización 2012-07-11: Añado árbol de directorios y cabeceras indicando a qué archivo pertenecen.</description>
    </item>
    
    <item>
      <title>JBehave y JUnit</title>
      <link>https://magmax.org/blog/jbehave-junit/</link>
      <pubDate>Wed, 20 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/jbehave-junit/</guid>
      <description>No hace tanto, escribí el artículo JBehave. El problema es que era necesario lanzar cada historia por separado.
Este artículo es un pequeño parche, con la intención de permitir que JUnit encuentre nuestros tests.
  Recordando Bien, recordemos un poco la estructura que teníamos:
1. 2├── pom.xml 3└── src 4 └── test 5 ├── java 6 │ └── org 7 │ └── magmax 8 │ └── jbehaveexample 9 │ ├── MyExample.</description>
    </item>
    
    <item>
      <title>Pruebas Unitarias: Proveedores de datos</title>
      <link>https://magmax.org/blog/dataproviders/</link>
      <pubDate>Sun, 10 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/dataproviders/</guid>
      <description>A menudo, cuando realizamos pruebas unitarias de algún problema algorítmico, nos encontramos con muchos tests iguales. Tan solo cambia la entrada y el resultado.
La mayor parte de los XUnit ya se han dado cuenta de esto y por eso han implementado soluciones. El problema es que no se han puesto de acuerdo en la nomenclatura ni en la implementación.
Veremos aquí aproximaciones en Java, PHP y Python.
  Java: Parametrized Poca gente sabe (y yo lo he descubierto hace poco) que JUnit 4 incluyó los tests parametrizados.</description>
    </item>
    
    <item>
      <title>JBehave</title>
      <link>https://magmax.org/blog/jbehave/</link>
      <pubDate>Thu, 12 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/jbehave/</guid>
      <description>Apesar de mi mal comienzo con JBehave , debo decir que le voy cogiendo el tranquillo.
JBehave consiste en un sistema para hacer BDD en Java. En otras palabras: permite definir en un lenguaje no formal el comportamiento de la aplicación, utilizando expresiones regulares para transformarlo en un lenguaje formal.
  Ejemplo JBehave tiene cosas que no me gustan nada, pero también tiene otras que me gustan mucho. Veamos primero un ejemplito lo más pequeño que he sido capaz de hacerlo:</description>
    </item>
    
    <item>
      <title>No comentes: ¡Asegura!</title>
      <link>https://magmax.org/blog/asegura/</link>
      <pubDate>Sun, 14 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/asegura/</guid>
      <description>Hoy he descubierto mucho de ese gran desconocido que es assert.
Resulta que tenía a mi alcance una herramienta de depuración bastante fuerte y aún no he hecho uso de ella.
Con el fin de solucionar este problema, escribo este artículo, aunque no escribiré nada que no se encuentre en la Documentación de Java sobre Assert o la documentación Python.
  Lo más básico Lo primero es saber cómo vamos a usarlo.</description>
    </item>
    
    <item>
      <title>Pruebas unitarias: Mocks y Stubs</title>
      <link>https://magmax.org/blog/mocks-y-stubs/</link>
      <pubDate>Wed, 17 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/mocks-y-stubs/</guid>
      <description>Cuando estamos desarrollando, es necesario probar lo que estamos haciendo. En ocasiones esto puede resultar muy difícil (y más aún cuando no se ha hecho TDD), o muy lento.
En este artículo trataré de dar una introducción a la utilización de MOCKs y STUBs en estos casos.
En los ejemplos usaré Java y la librería mockito .
Voy a comenzar por plantear unas premisas: Las pruebas deben ser unitarias, rápidas e inocuas (no alteran el estado inicial).</description>
    </item>
    
  </channel>
</rss>
