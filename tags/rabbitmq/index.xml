<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rabbitmq on El blog de MagMax</title>
    <link>https://magmax.org/tags/rabbitmq/</link>
    <description>Recent content in rabbitmq on El blog de MagMax</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Jun 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://magmax.org/tags/rabbitmq/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Colas de mensajes: RabbitMQ</title>
      <link>https://magmax.org/blog/colas-de-mensajes-rabbitmq/</link>
      <pubDate>Fri, 19 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/colas-de-mensajes-rabbitmq/</guid>
      <description>
        
          &lt;p&gt;Cuando se desarrolla una aplicación y ésta comienza a crecer, a menudo necesitamos interconectar distintos componentes. En estos casos se utiliza un &lt;em&gt;middleware&lt;/em&gt; que nos permita comunicar las distintas piezas.&lt;/p&gt;
&lt;p&gt;Una opción es usar una cola de mensajes. No es el mecanismo más rápido, pero probablemente sí el más sencillo, y permite realizar acciones de forma asíncrona.&lt;/p&gt;
&lt;p&gt;Y un gestor de colas de mensajes sencillo, robusto y muy utilizado es &lt;a href=&#34;https://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt;.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/rabbitmq.png&#34;
         alt=&#34;Rabbit MQ&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;instalando-rabbitmq&#34;&gt;Instalando RabbitMQ&lt;/h2&gt;
&lt;p&gt;Esta aplicación &lt;em&gt;Erlang&lt;/em&gt; es sencilla de instalar en Linux:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;apt-get install rabbitmq-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y tendremos la aplicación funcionando, escuchando en el puerto 5672.&lt;/p&gt;
&lt;p&gt;Es interesante instalar el &lt;a href=&#34;https://www.rabbitmq.com/management.html&#34;&gt;plugin de gestión&lt;/a&gt; para poder ver qué está pasando
ahí dentro. Para ello basta con hacer:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;rabbitmq-plugins enable rabbitmq_management
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y automáticamente lo tendremos escuchando en https://localhost:15672/&lt;/p&gt;
&lt;h2 id=&#34;lo-básico-de-rabbitmq&#34;&gt;Lo básico de RabbitMQ&lt;/h2&gt;
&lt;p&gt;Hay algunos conceptos que hay que tener claros de RabbitMQ:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Exchange&lt;/em&gt;
Es el punto de entrada de un mensaje. Pueden ser &lt;strong&gt;Direct&lt;/strong&gt;, si entregan un mensaje en una cola, &lt;strong&gt;Fanout&lt;/strong&gt; si se entregan copias del mensaje a todas las colas o &lt;strong&gt;Topic&lt;/strong&gt; si se entregan copias del mensaje sólo a algunas colas.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Queue&lt;/em&gt;
Es el punto de lectura de un mensaje. Pueden ser &lt;strong&gt;durable&lt;/strong&gt; o persistentes, si almacenan los mensajes para sobrevivir a un reinicio de RabbitMQ_. También pueden ser **exclusivas**, si sólo un consumidor puede estar conectado a la vez.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Bindings&lt;/em&gt;
Son reglas que indican cómo llegar de un &lt;strong&gt;Exchange&lt;/strong&gt; a las &lt;strong&gt;Queue&lt;/strong&gt; asociadas.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Routing key&lt;/em&gt;
Filtro asociado a un &lt;strong&gt;Binging&lt;/strong&gt; que permite seleccionar sólo algunos mensajes para dicho &lt;strong&gt;binding&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Producer o Productor&lt;/em&gt;
Programa que escribe en un &lt;strong&gt;Exchange&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Consumer o Consumidor&lt;/em&gt;
Programa que escucha en una &lt;strong&gt;Queue&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;AMQP&lt;/em&gt;
Protocolo de comunicaciones utilizado por RabbitMQ. Lo usa tanto el &lt;strong&gt;Productor&lt;/strong&gt; como el &lt;strong&gt;Consumidor&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Virtual host o vhost&lt;/em&gt;
Un entorno aislado, con sus propios grupos de usuarios, &lt;em&gt;exchanges&lt;/em&gt;, &lt;em&gt;queues&lt;/em&gt;, &amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;mnesia&lt;/em&gt;
La base de datos interna de &lt;a href=&#34;https://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Una vez dicho esto, podemos describir el flujo básico de &lt;a href=&#34;https://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt;:&lt;/p&gt;
&lt;div hidden&gt;

@startuml rabbitmq-overview
package RabbitMQ {
  component Exchange
  Component Queue

  Exchange --&gt; Queue
}

Producer --&gt; Exchange: send
Queue --&gt; Consumer: listen
@enduml

&lt;/div&gt;

&lt;img src=&#34;https://magmax.org/diagrams/rabbitmq-overview.png&#34;/&gt;

&lt;p&gt;Claro, que esto puede evolucionar a entornos mucho más complejos:&lt;/p&gt;
&lt;div hidden&gt;

@startuml rabbitmq-complex-flow
package RabbitMQ {
  component Exchange_1
  component Exchange_2
  Component Queue_1
  Component Queue_2
  Component Queue_3

  Exchange_1 --&gt; Queue_1
  Exchange_1 --&gt; Queue_2
  Exchange_2 --&gt; Queue_2
  Exchange_2 --&gt; Queue_3
}

Producer_1 --&gt; Exchange_1
Producer_2 --&gt; Exchange_2
Queue_1 --&gt; Consumer_1
Queue_2 --&gt; Consumer_2
Queue_3 --&gt; Consumer_3
Queue_3 --&gt; Consumer_4
@enduml

&lt;/div&gt;

&lt;img src=&#34;https://magmax.org/diagrams/rabbitmq-complex-flow.png&#34;/&gt;

&lt;p&gt;En este entorno, y asumiendo que los &lt;em&gt;Exchange&lt;/em&gt; están en modo &lt;strong&gt;Topic&lt;/strong&gt; (es decir, que un mensaje llega a todas las colas):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Consumer_1&lt;/code&gt; recibe todo lo que produzca &lt;code&gt;Producer_1&lt;/code&gt;, pasando por &lt;code&gt;Queue_1&lt;/code&gt;. Este tipo de escenario es igual que el básico.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Consumer_2&lt;/code&gt; recibe todo lo que produzca tanto &lt;code&gt;Producer_1&lt;/code&gt; como &lt;code&gt;Producer_2&lt;/code&gt;, pasando por &lt;code&gt;Queue_2&lt;/code&gt;. Útil para procesar eventos que se producen en distintos lugares pero tienen un destino común. Ejemplo: guardar logs de distintas máquinas en base de datos.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Consumer_3&lt;/code&gt; y &lt;code&gt;Consumer_4&lt;/code&gt; se repartirán lo producido por &lt;code&gt;Producer_2&lt;/code&gt;, pasando por &lt;code&gt;Queue_3&lt;/code&gt;. Útil cuando la carga producida es muy alta y se requieren muchos recursos para consimir cada mensaje. Ejemplo: Renderización de vídeo 3D.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;puertos-y-valores-por-defecto&#34;&gt;Puertos y valores por defecto&lt;/h3&gt;
&lt;p&gt;Si no cambiamos nada, &lt;a href=&#34;https://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt; escucha en el puerto 5672, y la interfaz de administración en el 15672.&lt;/p&gt;
&lt;p&gt;Se crea un usuario &lt;em&gt;guest/guest&lt;/em&gt; que nos permite acceder a ambas.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt; consume mucha memoria. Recomiendo utilizar servidores dedicados, para que no se haga con toda y tengamos problemas.&lt;/p&gt;
&lt;h2 id=&#34;algunas-tareas-de-administración&#34;&gt;Algunas tareas de administración&lt;/h2&gt;
&lt;h3 id=&#34;crear-un-vhost&#34;&gt;Crear un vhost&lt;/h3&gt;
&lt;p&gt;Con el fin de aislar un entorno, podemos crear un &lt;strong&gt;vhost&lt;/strong&gt;. Nada más sencillo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;rabbitmqctl add_vhost /mi_vhost
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;crear-un-usuario&#34;&gt;Crear un usuario&lt;/h3&gt;
&lt;p&gt;Ahora podemos crear un usuario&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;rabbitmqctl add_user my_user my_pass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y podemos asociarlo al &lt;strong&gt;vhost&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;rabbitmqctl set_permissions -p /my_vhost my_user &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.*&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;asignar-permisos&#34;&gt;Asignar permisos&lt;/h3&gt;
&lt;p&gt;Si queremos poder utilizar este usuario para entrar en la interfaz de administracción, necesitamos darle permisos de &lt;em&gt;management&lt;/em&gt; y &lt;em&gt;monitoring&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;rabbitmqctl set_user_tags my_user management monitoring
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Por tanto, los mensajes se escriben en un &lt;strong&gt;Exchange&lt;/strong&gt; pero se leen de una &lt;strong&gt;Queue&lt;/strong&gt;. Para llegar de un &lt;strong&gt;Exchange&lt;/strong&gt; a una &lt;strong&gt;Queue&lt;/strong&gt; se utilizan los &lt;strong&gt;Routes&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;crear-un-cluster&#34;&gt;Crear un cluster&lt;/h3&gt;
&lt;p&gt;Una de las tareas típicas es &lt;code&gt;crear un cluster de RabbitMQ&lt;/code&gt;&lt;em&gt;. Esto nos permite &lt;code&gt;mejorar la disponibilidad del sistema&lt;/code&gt;&lt;/em&gt;, ya que si uno de nuestros servidores cae, el otro seguirá atendiendo peticiones.&lt;/p&gt;
&lt;p&gt;Esta tarea es algo más compleja. Supongamos que tenemos dos nodos: &lt;em&gt;rabbit1&lt;/em&gt; y &lt;em&gt;rabbit2&lt;/em&gt;. Vamos a añadir &lt;em&gt;Rabbit2&lt;/em&gt;, dejando &lt;em&gt;Rabbit1&lt;/em&gt; como maestro inicial. Lo primero que podemos hacer es ver el estado actual del sistema:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;rabbit2$ rabbitmqctl cluster_status
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;nodes,&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;disc,&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rabbit@rabbit2&lt;span style=&#34;color:#f92672&#34;&gt;]}]}&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;running_nodes,&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rabbit@rabbit2&lt;span style=&#34;color:#f92672&#34;&gt;]}]&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;...done.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Para crear un cluster, tenemos que parar uno de los &lt;a href=&#34;https://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt;, pero debemos hacerlo con órdenes especiales:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;rabbit2$ rabbitmqctl stop_app
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;Stopping node rabbit@rabbit2 ...done.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A continuación lo añadimos al cluster:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;rabbit2$ rabbitmqctl join_cluster rabbit@rabbit1
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;Clustering node rabbit@rabbit2 with rabbit@rabbit1 ...done.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y volvemos a arrancar:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;rabbit2$ rabbitmqctl start_app
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;Starting node rabbit@rabbit2 ...done.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ahora podemos comprobar que todo fue bien:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;rabbit2$ rabbitmqctl cluster_status
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;Cluster status of node rabbit@rabbit2 ...
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;nodes,&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;disc,&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rabbit@rabbit1,rabbit@rabbit2&lt;span style=&#34;color:#f92672&#34;&gt;]}]}&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;running_nodes,&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rabbit@rabbit1,rabbit@rabbit2&lt;span style=&#34;color:#f92672&#34;&gt;]}]&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;...done.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Aunque también podemos verlo desde la herramienta de administración (mucho más molona XD)&lt;/p&gt;
&lt;p&gt;Es &lt;strong&gt;IMPORTANTE&lt;/strong&gt; que todos los nodos de un cluster tengan la misma versión de
&lt;a href=&#34;https://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt; o podríamos tener problemas.&lt;/p&gt;
&lt;p&gt;Si se va a gestionar un cluster, recomiendo encarecidamente leerse toda la
&lt;a href=&#34;https://www.rabbitmq.com/clustering.html&#34;&gt;documentación de RabbitMQ sobre clusters&lt;/a&gt;. Es poco y muy conveniente. Además,
es bueno tenerlo siempre a mano.&lt;/p&gt;
&lt;p&gt;Una vez creado el cluster se puede utilizar una VIp (Virtual IP), de manera que
nos respondan ambos indistintamente. Si uno cae, la VIp se puede cambiar
mediante &lt;a href=&#34;https://tldp.org/HOWTO/TCP-Keepalive-HOWTO/usingkeepalive.html&#34;&gt;Keepalive&lt;/a&gt; y, si preparamos nuestra aplicación para hacer reintentos,
no se verá afectada por la caída.&lt;/p&gt;
&lt;p&gt;En la interfaz de administración podemos ver cómo los mensajes estarán
replicados en ambos nodos, el estado de los mismos, etc.&lt;/p&gt;
&lt;h2 id=&#34;programando&#34;&gt;Programando&lt;/h2&gt;
&lt;p&gt;Para programar contra un &lt;a href=&#34;https://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt; recomiendo usar &lt;a href=&#34;https://www.rabbitmq.com/devtools.html&#34;&gt;una de las librerías AMQP&lt;/a&gt;.
Hay otras opciones de más alto nivel. Por ejemplo, en Python está &lt;a href=&#34;https://kombu.readthedocs.org/en/latest/&#34;&gt;Kombu&lt;/a&gt;, que se
abstrae de la cola de mensajes a usar, o incluso &lt;a href=&#34;https://pypi.org/project/celery/&#34;&gt;Celery&lt;/a&gt;, que permite usar una
cola de mensajes para la gestión de tareas distribuidas.&lt;/p&gt;
&lt;p&gt;Veamos unos ejemplillos sencillos. Recordad que hay muchas opciones y se pueden
configurar bastantes historias, pero voy a ir a lo básico:&lt;/p&gt;
&lt;h3 id=&#34;python&#34;&gt;Python&lt;/h3&gt;
&lt;p&gt;Utilizaré la librería &lt;code&gt;Pika&lt;/code&gt; (tomado de la propia documentación de la librería):&lt;/p&gt;
&lt;p&gt;El consumidor:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pika
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;connection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pika&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BlockingConnection()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;channel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; connection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;channel()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;method_frame, header_frame, body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; channel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;basic_get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; method_frame:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; method_frame, header_frame, body
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;    channel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;basic_ack(method_frame&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;delivery_tag)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;No message returned&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;connection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y el productor:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pika
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;parameters &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pika&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;URLParameters(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;amqp://guest:guest@localhost:5672/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%2F&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;connection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pika&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BlockingConnection(parameters)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;channel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; connection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;channel()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;channel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;basic_publish(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test_exchange&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;                      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test_routing_key&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;                      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hello, world!&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;                      pika&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BasicProperties(content_type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;                                           delivery_mode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;connection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;java&#34;&gt;Java&lt;/h3&gt;
&lt;p&gt;Usando la &lt;a href=&#34;https://www.rabbitmq.com/java-client.html&#34;&gt;rabbitmq-java-client&lt;/a&gt;, el consumidor:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.rabbitmq.client.Connection&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.rabbitmq.client.Channel&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Consumer&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(){&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;        ConnectionFactory factory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ConnectionFactory&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;        factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setUri&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;amqp://guest:guest@hostName:5672/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;        Connection conn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;newConnection&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;        Channel channel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; conn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;createChannel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;        channel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;basicConsume&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;queueName&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;myConsumerTag&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DefaultConsumer&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;channel&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handleDelivery&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String consumerTag&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;                                           Envelope envelope&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;                                           AMQP&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BasicProperties&lt;/span&gt; properties&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19&lt;/span&gt;                                           &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; body&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20&lt;/span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; IOException
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21&lt;/span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22&lt;/span&gt;                    System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;body&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23&lt;/span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;});&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27&lt;/span&gt;        channel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28&lt;/span&gt;        conn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;y el productor:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.rabbitmq.client.Connection&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.rabbitmq.client.Channel&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Producer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(){&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;        ConnectionFactory factory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ConnectionFactory&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;        factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setUri&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;amqp://guest:guest@hostName:5672/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;        Connection conn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;newConnection&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;        Channel channel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; conn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;createChannel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; messageBodyBytes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, world!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getBytes&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;        channel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;basicPublish&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test_exchange&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test_routing_key&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; messageBodyBytes&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;        channel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;        conn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Debo admitir que no los he probado&amp;hellip; Así que si alguien encuentra algún fallo, que me lo diga XD&lt;/p&gt;
&lt;h2 id=&#34;conclusión&#34;&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt; es un canal de comunicaciones. Quizá no sea muy rápido, ya que no
deja de ser un &lt;em&gt;man-in-the-middle&lt;/em&gt;, pero permite integrarse fácilmente con
cualquier sistema existente.&lt;/p&gt;
&lt;p&gt;Además, como no fuerza ningún formato de mensaje, resulta muy sencillo crear
conectores que permitan publicar/consumir mensajes e integrar distintos
escenarios. Y en las últimas versiones han añadido soporte para &lt;a href=&#34;https://www.rabbitmq.com/priority.html&#34;&gt;mensajes
prioritarios&lt;/a&gt;, lo que puede dar mucho juego para enviar mensajes de control.&lt;/p&gt;
&lt;p&gt;De todas maneras, &lt;a href=&#34;https://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt; es sólo un sistema de colas de mensajes, pero hay
otros. También está &lt;a href=&#34;https://activemq.apache.org/&#34;&gt;Apache ActiveMQ&lt;/a&gt;, &lt;a href=&#34;https://kafka.apache.org/&#34;&gt;Apache Kafka&lt;/a&gt;, &lt;a href=&#34;https://qpid.apache.org/&#34;&gt;Apache Qpid&lt;/a&gt;,
&lt;a href=&#34;https://zeromq.org/&#34;&gt;ZeroMQ&lt;/a&gt;, &lt;a href=&#34;https://hornetq.jboss.org/&#34;&gt;HornetQ&lt;/a&gt;, &lt;a href=&#34;https://code.google.com/p/sparrow/&#34;&gt;Sparrow&lt;/a&gt;, &lt;a href=&#34;https://github.com/starling/starling/tree/master&#34;&gt;Starling&lt;/a&gt;, &lt;a href=&#34;https://aws.amazon.com/es/sqs/&#34;&gt;Amazon SQS&lt;/a&gt;, &lt;a href=&#34;https://kr.github.io/beanstalkd/&#34;&gt;Beanstalkd&lt;/a&gt;, &amp;hellip;&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
