<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>python testing - Etiqueta - El blog de MagMax</title>
        <link>https://magmax.org/tags/python-testing/</link>
        <description>python testing - Etiqueta - El blog de MagMax</description>
        <generator>Hugo -- gohugo.io</generator><language>es</language><lastBuildDate>Sun, 10 Jun 2012 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://magmax.org/tags/python-testing/" rel="self" type="application/rss+xml" /><item>
    <title>Pruebas Unitarias: Proveedores de datos</title>
    <link>https://magmax.org/blog/dataproviders/</link>
    <pubDate>Sun, 10 Jun 2012 00:00:00 &#43;0000</pubDate>
    <author>Miguel Ángel</author>
    <guid>https://magmax.org/blog/dataproviders/</guid>
    <description><![CDATA[<p>A menudo, cuando realizamos pruebas unitarias de algún problema algorítmico, nos encontramos con muchos tests iguales. Tan solo cambia la entrada y el resultado.</p>
<p>La mayor parte de los XUnit ya se han dado cuenta de esto y por eso han implementado soluciones. El problema es que no se han puesto de acuerdo en la nomenclatura ni en la implementación.</p>
<p>Veremos aquí aproximaciones en Java, PHP y Python.</p>]]></description>
</item>
<item>
    <title>Python: Cómo hacer pruebas 5: freshen</title>
    <link>https://magmax.org/blog/python-pruebas-5/</link>
    <pubDate>Fri, 02 Dec 2011 00:00:00 &#43;0000</pubDate>
    <author>Miguel Ángel</author>
    <guid>https://magmax.org/blog/python-pruebas-5/</guid>
    <description><![CDATA[<p>Después del éxito cosechado con el artículo <a href="https://magmax.org/blog/python-pruebas-4/" rel="">Python: Cómo hacer pruebas (4)</a>, no puedo evitar aprovechar el tirón y subir el nivel: <em>BDD</em>, o, lo que es lo mismo, <em>Business Driven Development</em>.</p>
<p>Éste va a ser un tema muy arriesgado, ya que en mi vida he conseguido hacer BDD para&hellip; el ejemplo que os voy a mostrar. No lo he usado nunca más, aunque me parece bastante interesante el tema.</p>
<p>Aún me guardo un temita en el tintero para otro artículo. Lo dejaré como una sorpresa :D</p>]]></description>
</item>
<item>
    <title>Python: Cómo hacer pruebas 4: pyDoubles</title>
    <link>https://magmax.org/blog/python-pruebas-4/</link>
    <pubDate>Wed, 09 Nov 2011 00:00:00 &#43;0000</pubDate>
    <author>Miguel Ángel</author>
    <guid>https://magmax.org/blog/python-pruebas-4/</guid>
    <description><![CDATA[<p>Tras las <a href="https://twitter.com/#!/programania/status/133533559779635200" target="_blank" rel="noopener noreffer ">peticiones populares</a> , no puedo evitar escribir este post antes de lo que esperaba.</p>
<p>Es la continuación del artículo <a href="https://magmax.org/blog/python-pruebas-3/" rel="">Python: Cómo hacer pruebas(3)</a>, que parece haber tenido bastante éxito.</p>
<p>En este caso vamos a ver los dobles de prueba, y utilizaremos, cómo no, <a href="https://www.pydoubles.org/" target="_blank" rel="noopener noreffer ">pyDoubles</a> , creado principalmente por <a href="https://www.carlosble.com/" target="_blank" rel="noopener noreffer ">Carlos Blé</a>  y disponible en Debian gracias a mi buen amigo <a href="https://arco.esi.uclm.es/~david.villa/" target="_blank" rel="noopener noreffer ">David Villa</a>.</p>
<p><em>Actualización 2011-11-16</em>: Corrijo el significado de las siglas F.I.R.S.T. (¡Gracias, David!).</p>]]></description>
</item>
<item>
    <title>Python: Cómo hacer pruebas 3: nose y hamcrest</title>
    <link>https://magmax.org/blog/python-pruebas-3/</link>
    <pubDate>Mon, 07 Nov 2011 00:00:00 &#43;0000</pubDate>
    <author>Miguel Ángel</author>
    <guid>https://magmax.org/blog/python-pruebas-3/</guid>
    <description><![CDATA[<p>Después del artículo <a href="https://magmax.org/blog/python-pruebas-2/" rel="">Python: Cómo hacer pruebas (2)</a>, viene el (3) :D</p>
<p>En esta ocasión temo que el tutorial va a ser un poco <em>light</em>, pero ya lo compensaremos con el próximo. Nos vamos a centrar en dos herramientas para hacer tests. Estas herramientas son <a href="https://readthedocs.org/docs/nose/en/latest/" target="_blank" rel="noopener noreffer ">nose</a>  y <a href="https://code.google.com/p/hamcrest/" target="_blank" rel="noopener noreffer ">Hamcrest</a> .</p>
<p>Ambos son paquetes <a href="https://www.debian.org" target="_blank" rel="noopener noreffer ">Debian</a>  y sencillos de instalar.</p>]]></description>
</item>
<item>
    <title>Python: Cómo hacer pruebas 2: unittest</title>
    <link>https://magmax.org/blog/python-pruebas-2/</link>
    <pubDate>Tue, 27 Sep 2011 00:00:00 &#43;0000</pubDate>
    <author>Miguel Ángel</author>
    <guid>https://magmax.org/blog/python-pruebas-2/</guid>
    <description><![CDATA[<p>Tras el artículo <a href="https://magmax.org/blog/python-pruebas-1/" rel="">Python: Cómo hacer pruebas (1)</a> es lógico pensar que vendrá la segunda parte.</p>
<p>En esta ocasión nos centraremos en UnitTest.</p>]]></description>
</item>
<item>
    <title>Python: Cómo hacer pruebas 1: doctest</title>
    <link>https://magmax.org/blog/python-pruebas-1/</link>
    <pubDate>Sun, 25 Sep 2011 00:00:00 &#43;0000</pubDate>
    <author>Miguel Ángel</author>
    <guid>https://magmax.org/blog/python-pruebas-1/</guid>
    <description><![CDATA[<p>Voy a redactar distintas maneras de hacer pruebas en Python. En este sentido, veremos diferentes estilos, desde el más sencillo al más complejo; desde las pruebas unitarias hasta las pruebas de sistema.</p>
<p>Estoy convencido de que me voy a dejar mil historias en el tintero&hellip; os ruego un poco de paciencia y de ayuda :D</p>
<p>En esta primera entrega, veremos cómo probar utilizando los desconocidos <em>doctest</em>.</p>]]></description>
</item>
<item>
    <title>No comentes: ¡Asegura!</title>
    <link>https://magmax.org/blog/asegura/</link>
    <pubDate>Sun, 14 Aug 2011 00:00:00 &#43;0000</pubDate>
    <author>Miguel Ángel</author>
    <guid>https://magmax.org/blog/asegura/</guid>
    <description><![CDATA[<p>Hoy he descubierto mucho de ese gran desconocido que es <em>assert</em>.</p>
<p>Resulta que tenía a mi alcance una herramienta de depuración bastante fuerte y aún no he hecho uso de ella.</p>
<p>Con el fin de solucionar este problema, escribo este artículo, aunque no
escribiré nada que no se encuentre en la <a href="https://download.oracle.com/javase/6/docs/technotes/guides/language/assert.html" target="_blank" rel="noopener noreffer ">Documentación de Java sobre Assert</a>
o la <a href="https://docs.python.org/release/2.5.2/ref/assert.html" target="_blank" rel="noopener noreffer ">documentación Python</a>.</p>]]></description>
</item>
</channel>
</rss>
