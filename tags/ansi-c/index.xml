<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>ansi c - Etiqueta - El blog de MagMax</title>
        <link>https://magmax.org/tags/ansi-c/</link>
        <description>ansi c - Etiqueta - El blog de MagMax</description>
        <generator>Hugo -- gohugo.io</generator><language>es</language><lastBuildDate>Mon, 20 Aug 2012 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://magmax.org/tags/ansi-c/" rel="self" type="application/rss+xml" /><item>
    <title>Por qué C mola</title>
    <link>https://magmax.org/blog/porque_c_mola/</link>
    <pubDate>Mon, 20 Aug 2012 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>https://magmax.org/blog/porque_c_mola/</guid>
    <description><![CDATA[No he podido evitar darme cuenta de que se me había pasado escribir el artículo del lenguaje que quizá más domino. Así que tenía que arreglarlo :D
C es un lenguaje antiguo. Se escribió con un objetivo muy concreto: la creación de sistemas operativos; y aún más concretamente, para la creación de Unix. No solo se ideó antes de que existieran los patrones de programación, sino que ha sido gracias a C que muchos de éstos han sido inventados.]]></description>
</item><item>
    <title>Cutre-framework de pruebas en Ansi C</title>
    <link>https://magmax.org/blog/framework-pruebas-c/</link>
    <pubDate>Thu, 01 Sep 2011 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>https://magmax.org/blog/framework-pruebas-c/</guid>
    <description><![CDATA[En este caso vamos a demostrar que no hay excusa para no hacer pruebas, ya que podemos montarnos un framework en un momento en cualquier lenguaje.
El framework no va a ser una maravilla, pero lo vamos a hacer muy rápido.
  ¿Qué es lo que queremos? Realmente sólo necesitamos que nos facilite comprobaciones y que nos muestre un resultado al final. Como es algo sencillito, asumiremos que no vamos aprobar nada concurrente.]]></description>
</item><item>
    <title>Buenas prácticas en Ansi C (1)</title>
    <link>https://magmax.org/blog/buenas-practicas-c-1/</link>
    <pubDate>Sat, 18 Jun 2011 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>https://magmax.org/blog/buenas-practicas-c-1/</guid>
    <description><![CDATA[Hay muchas cosas a tener en cuenta cuando se desarrolla un programa. El problema es que en C estas primeras decisiones son cruciales para conseguir un poco de orden y concierto.
La falta de espacios de nombres y de jerarquía hace que todo sea un cajón de sastre. La falta de clases y objetos provoca interfaces poco definidas y accesos incorrectos.
Llevo unos 6 años programando en Ansi C y voy a exponer algunas de las buenas prácticas que he detectado en este tiempo.]]></description>
</item><item>
    <title>Buenas prácticas en Ansi C (2)</title>
    <link>https://magmax.org/blog/buenas-practicas-c-2/</link>
    <pubDate>Sat, 18 Jun 2011 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>https://magmax.org/blog/buenas-practicas-c-2/</guid>
    <description><![CDATA[Tras comentar las buenas prácticas más básicas en Ansi C, veamos ahora las buenas prácticas cuando estamos haciendo una librería, ya sea estática o dinámica.
En concreto, me centraré en la librería estática y luego pasaré a dar algunas pautas para las dinámicas.
  Encapsulación El objetivo de lo que voy a exponer consiste en aislar en la medida de lo posible nuestra librería con el fin de que sea lo más reutilizable posible.]]></description>
</item><item>
    <title>Atheist: Probando módulos C</title>
    <link>https://magmax.org/blog/atheist-c/</link>
    <pubDate>Mon, 09 May 2011 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>https://magmax.org/blog/atheist-c/</guid>
    <description><![CDATA[Vamos a usar Atheist con el módulo CxxTest , de manera que podamos probar un programa C.
Recordemos algo que yo olvidé: Atheist es una herramienta para pruebas de integración (que tiene como algo adicional la posibilidad de integrarse con python-testunit). Eso quiere decir que nuestras pruebas estarán en C, pero las llamaremos desde Atheist.
  Para comenzar, escribimos nuestras pruebas C. Primero sólo vamos a comprobar la interacción entre Atheist y CxxTest (lo saco de los ejemplos de Atheist):]]></description>
</item></channel>
</rss>
