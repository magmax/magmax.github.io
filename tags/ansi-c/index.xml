<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>ansi c - Etiqueta - El blog de MagMax</title>
        <link>https://magmax.org/tags/ansi-c/</link>
        <description>ansi c - Etiqueta - El blog de MagMax</description>
        <generator>Hugo -- gohugo.io</generator><language>es</language><lastBuildDate>Mon, 20 Aug 2012 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://magmax.org/tags/ansi-c/" rel="self" type="application/rss+xml" /><item>
    <title>Por qué C mola</title>
    <link>https://magmax.org/blog/porque_c_mola/</link>
    <pubDate>Mon, 20 Aug 2012 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>https://magmax.org/blog/porque_c_mola/</guid>
    <description><![CDATA[<p>No he podido evitar darme cuenta de que se me había pasado escribir el artículo del lenguaje que quizá más domino. Así que tenía que arreglarlo :D</p>
<p>C es un lenguaje antiguo. Se escribió con un objetivo muy concreto: la creación de sistemas operativos; y aún más concretamente, para la creación de Unix. No solo se ideó antes de que existieran los patrones de programación, sino que ha sido gracias a C que muchos de éstos han sido inventados.</p>]]></description>
</item><item>
    <title>Cutre-framework de pruebas en Ansi C</title>
    <link>https://magmax.org/blog/framework-pruebas-c/</link>
    <pubDate>Thu, 01 Sep 2011 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>https://magmax.org/blog/framework-pruebas-c/</guid>
    <description><![CDATA[<p>En este caso vamos a demostrar que no hay excusa para no hacer pruebas, ya que podemos montarnos un <em>framework</em> en un momento en cualquier lenguaje.</p>
<p>El <em>framework</em> no va a ser una maravilla, pero lo vamos a hacer muy rápido.</p>]]></description>
</item><item>
    <title>Buenas prácticas en Ansi C (1)</title>
    <link>https://magmax.org/blog/buenas-practicas-c-1/</link>
    <pubDate>Sat, 18 Jun 2011 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>https://magmax.org/blog/buenas-practicas-c-1/</guid>
    <description><![CDATA[<p>Hay muchas cosas a tener en cuenta cuando se desarrolla un programa. El problema es que en C estas primeras decisiones son cruciales para conseguir un poco de orden y concierto.</p>
<p>La falta de espacios de nombres y de jerarquía hace que todo sea un cajón de sastre. La falta de clases y objetos provoca interfaces poco definidas y accesos incorrectos.</p>
<p>Llevo unos 6 años programando en Ansi C y voy a exponer algunas de las buenas prácticas que he detectado en este tiempo.</p>
<p>No entraré en temas de estilo, sino en cuestiones prácticas.</p>
<p>No están todas las que son, pero son todas las que están.</p>]]></description>
</item><item>
    <title>Buenas prácticas en Ansi C (2)</title>
    <link>https://magmax.org/blog/buenas-practicas-c-2/</link>
    <pubDate>Sat, 18 Jun 2011 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>https://magmax.org/blog/buenas-practicas-c-2/</guid>
    <description><![CDATA[<p>Tras comentar las <a href="https://magmax.org/blog/buenas-practicas-c-1/" rel="">buenas prácticas más básicas en Ansi C</a>, veamos ahora las buenas prácticas cuando estamos haciendo una librería, ya sea estática o dinámica.</p>
<p>En concreto, me centraré en la librería estática y luego pasaré a dar algunas pautas para las dinámicas.</p>]]></description>
</item><item>
    <title>Atheist: Probando módulos C</title>
    <link>https://magmax.org/blog/atheist-c/</link>
    <pubDate>Mon, 09 May 2011 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>https://magmax.org/blog/atheist-c/</guid>
    <description><![CDATA[<p>Vamos a usar <a href="https://savannah.nongnu.org/projects/atheist/" target="_blank" rel="noopener noreffer">Atheist</a>  con el módulo <a href="https://cxxtest.tigris.org/" target="_blank" rel="noopener noreffer">CxxTest</a> , de manera que podamos probar un programa C.</p>
<p>Recordemos algo que yo olvidé: <a href="https://savannah.nongnu.org/projects/atheist/" target="_blank" rel="noopener noreffer">Atheist</a>  es una herramienta para pruebas de integración (que tiene como algo adicional la posibilidad de integrarse con python-testunit). Eso quiere decir que nuestras pruebas estarán en C, pero las llamaremos desde Atheist.</p>]]></description>
</item></channel>
</rss>
