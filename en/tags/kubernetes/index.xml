<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kubernetes on MagMax&#39;s blog</title>
    <link>http://example.org/en/tags/kubernetes/</link>
    <description>Recent content in kubernetes on MagMax&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 11 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://example.org/en/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ArgoCD with Kind</title>
      <link>http://example.org/en/blog/argocd/</link>
      <pubDate>Sun, 11 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/en/blog/argocd/</guid>
      <description>
        
          &lt;p&gt;This post will document how to run an
&lt;a href=&#34;https://argoproj.github.io/argo-cd/https://argoproj.github.io/argo-cd/&#34;&gt;ArgoCD&lt;/a&gt;
instance locally, using &lt;a href=&#34;https://kind.sigs.k8s.io/&#34;&gt;Kind&lt;/a&gt; to create the
Kubernetes cluster.
In addition, I will use cert-manager to create a self-signed certificate to
serve it with HTTPS.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;http://example.org/images/argocd.jpg&#34;
         alt=&#34;Argo CD&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;creating-the-cluster-with-kind&#34;&gt;Creating the cluster with kind&lt;/h2&gt;
&lt;p&gt;First of all, is to have a Kubernetes cluster. You will require to have &lt;code&gt;kind&lt;/code&gt;
available in your path (maybe downloading to your &lt;code&gt;~/bin&lt;/code&gt; or &lt;code&gt;~/.local/bin&lt;/code&gt;
makes the trick). This is the configuration file I used:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# kind.yaml
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
nodes:
- role: control-plane
  kubeadmConfigPatches:
  - |
    kind: InitConfiguration
    nodeRegistration:
      kubeletExtraArgs:
        node-labels: &amp;quot;ingress-ready=true&amp;quot;
  extraPortMappings:
  - containerPort: 80
    hostPort: 80
    protocol: TCP
  - containerPort: 443
    hostPort: 443
    protocol: TCP
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So, to create the cluster just type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kind create cluster --config=kind.yaml

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Wait until full process ends and&amp;hellip; you got it!&lt;/p&gt;
&lt;h3 id=&#34;add-ingress-to-your-cluster&#34;&gt;Add ingress to your cluster&lt;/h3&gt;
&lt;p&gt;In order to add ingress to the kind cluster, it&amp;rsquo;s required to &lt;a href=&#34;https://kind.sigs.k8s.io/docs/user/ingress/&#34;&gt;add an ingress
controller&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here you have what I did to install the nginx controller:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/kind/deploy.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It requires a couple of minutes to download images and&amp;hellip; Done!&lt;/p&gt;
&lt;h2 id=&#34;cert-manager&#34;&gt;Cert manager&lt;/h2&gt;
&lt;p&gt;Well&amp;hellip; let&amp;rsquo;s do things almost in the right way by using self-signed
certificates. This will be easier than it seems to be :)&lt;/p&gt;
&lt;p&gt;To install cert-manager, just run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v1.0.2/cert-manager.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now it will require a issuer. I needed to create this file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cert-issuer.yaml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: test-selfsigned
spec:
  selfSigned: {}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And run next command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl apply -f cert-issuer.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That&amp;rsquo;s it.&lt;/p&gt;
&lt;h2 id=&#34;argocd&#34;&gt;ArgoCD&lt;/h2&gt;
&lt;p&gt;Now it&amp;rsquo;s time to install ArgoCD:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl create namespace argocd
$ kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;local-link&#34;&gt;Local link&lt;/h3&gt;
&lt;p&gt;I will serve it at &lt;em&gt;argocd.local&lt;/em&gt;. So I need to modify my &lt;code&gt;/etc/hosts&lt;/code&gt; to have
this line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;127.0.0.1       localhost argocd.local

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;ingress&#34;&gt;Ingress&lt;/h3&gt;
&lt;p&gt;Once we have the URL, it&amp;rsquo;s required to have an ingress. So I needed the file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: argocd-server-ingress
  namespace: argocd
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: test-selfsigned
    nginx.ingress.kubernetes.io/force-ssl-redirect: &amp;quot;true&amp;quot;
    nginx.ingress.kubernetes.io/ssl-passthrough: &amp;quot;true&amp;quot;
    nginx.ingress.kubernetes.io/backend-protocol: &amp;quot;HTTPS&amp;quot;
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: argocd-server
          servicePort: https
    host: argocd.local
  tls:
  - secretName: https-cert
    hosts:
    - argocd.local
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And run it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl apply -f ingress.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And it will be ready!&lt;/p&gt;
&lt;h3 id=&#34;access&#34;&gt;Access&lt;/h3&gt;
&lt;p&gt;Just open &lt;a href=&#34;https://argocd.local&#34;&gt;https://argocd.local&lt;/a&gt; to enter. The username is admin and the password
is the name of the argo server docker, which can be obtained with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl get pods -n argocd -l app.kubernetes.io/name=argocd-server -o name | cut -d&#39;/&#39; -f 2
&lt;/code&gt;&lt;/pre&gt;
        
      </description>
    </item>
    
  </channel>
</rss>
