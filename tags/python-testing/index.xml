<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python testing on El blog de MagMax</title>
    <link>https://magmax.org/tags/python-testing/</link>
    <description>Recent content in python testing on El blog de MagMax</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 Jun 2012 00:00:00 +0000</lastBuildDate><atom:link href="https://magmax.org/tags/python-testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pruebas Unitarias: Proveedores de datos</title>
      <link>https://magmax.org/blog/dataproviders/</link>
      <pubDate>Sun, 10 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/dataproviders/</guid>
      <description>
        
          &lt;p&gt;A menudo, cuando realizamos pruebas unitarias de algún problema algorítmico, nos encontramos con muchos tests iguales. Tan solo cambia la entrada y el resultado.&lt;/p&gt;
&lt;p&gt;La mayor parte de los XUnit ya se han dado cuenta de esto y por eso han implementado soluciones. El problema es que no se han puesto de acuerdo en la nomenclatura ni en la implementación.&lt;/p&gt;
&lt;p&gt;Veremos aquí aproximaciones en Java, PHP y Python.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/test.jpg&#34;
         alt=&#34;Testing&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;java-parametrized&#34;&gt;Java: Parametrized&lt;/h2&gt;
&lt;p&gt;Poca gente sabe (y yo lo he descubierto hace poco) que JUnit 4 incluyó los tests parametrizados.&lt;/p&gt;
&lt;p&gt;En Java todo son clases. No se puede pasar un puntero a función, lo que complica terriblemente cosas realmente sencillas. y éste es uno de esos casos.&lt;/p&gt;
&lt;p&gt;Vamos a hacer un ejemplo básico: Fibonacci. Como sabréis, los dos primeros números valen 1 y el resto se genera sumando los dos anteriores. ¡A por ello!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// file src/test/java/fibonacciTest.java
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.Arrays&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.Collection&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.junit.*&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import static&lt;/span&gt; org.junit.Assert.*&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.junit.runner.RunWith&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.junit.runners.Parameterized&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@RunWith&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Parameterized&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FibonacciTest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; input&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; expected&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Fibonacci sut&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FibonacciTest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; input&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; expected&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;expected&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; expected&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Parameterized.Parameters&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Collection &lt;span style=&#34;color:#a6e22e&#34;&gt;numbers&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Arrays&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;asList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Object&lt;span style=&#34;color:#f92672&#34;&gt;[][]{&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23&lt;/span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;},&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24&lt;/span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 2&lt;span style=&#34;color:#f92672&#34;&gt;},&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25&lt;/span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;4&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 3&lt;span style=&#34;color:#f92672&#34;&gt;},&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26&lt;/span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;5&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 5&lt;span style=&#34;color:#f92672&#34;&gt;},&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;});&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Before&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setUp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sut&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Fibonacci&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testFibonacci&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37&lt;/span&gt;        assertEquals&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;expected&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; sut&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fibonacci&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;input&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Mucho código y poca chicha. Vamos por las cosas importantes:&lt;/p&gt;
&lt;h3 id=&#34;cambiando-el-ejecutor&#34;&gt;Cambiando el ejecutor&lt;/h3&gt;
&lt;p&gt;Pues eso, que tenemos que decirle a JUnit que el ejecutor es &lt;code&gt;Parameterized&lt;/code&gt; en lugar del que utiliza por defecto:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@RunWith&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Parameterized&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;constructor&#34;&gt;Constructor&lt;/h3&gt;
&lt;p&gt;El constructor debe recibir como argumentos lo que queramos usar en los tests. Es una restricción por utilizar el &lt;code&gt;@Test&lt;/code&gt;, que requiere una función sin argumentos.&lt;/p&gt;
&lt;h3 id=&#34;generador&#34;&gt;Generador&lt;/h3&gt;
&lt;p&gt;Ahora necesitamos una función que genere los argumentos. Ésta será una función estática que devuelve un &lt;code&gt;Collection&lt;/code&gt; y marcada con la anotación adecuada:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Parameterized.Parameters&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Collection &lt;span style=&#34;color:#a6e22e&#34;&gt;numbers&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Arrays&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;asList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Object&lt;span style=&#34;color:#f92672&#34;&gt;[][]{&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;},&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 2&lt;span style=&#34;color:#f92672&#34;&gt;},&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;4&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 3&lt;span style=&#34;color:#f92672&#34;&gt;},&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;5&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 5&lt;span style=&#34;color:#f92672&#34;&gt;},&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;});&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;En este caso he decidido devolver los números a mano, claro.&lt;/p&gt;
&lt;h3 id=&#34;tests&#34;&gt;Tests&lt;/h3&gt;
&lt;p&gt;Finalmente, los tests, en los que se utilizan los argumentos.&lt;/p&gt;
&lt;h3 id=&#34;ejecución&#34;&gt;Ejecución&lt;/h3&gt;
&lt;p&gt;Y ejecutamos los tests normalmente, pero veremos que ha realizado más tests de los habituales (para ejecutarlos usé &lt;em&gt;maven&lt;/em&gt;, pero sabéis que no es necesario):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;-------------------------------------------------------
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt; T E S T S
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;-------------------------------------------------------
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;Running FibonacciTest
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.253 sec
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;Results :
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9&lt;/span&gt;Tests run: 4, Failures: 0, Errors: 0, Skipped: 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;el-código&#34;&gt;El código&lt;/h3&gt;
&lt;p&gt;Os pego el código de la función principal por si queréis probarlo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// file src/main/java/fibonacci.java
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Fibonacci&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fibonacci&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(;&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 2&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;            c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;            a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;            b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;php&#34;&gt;PHP&lt;/h2&gt;
&lt;p&gt;En PHP todo es más fácil, menos hacer las cosas bien. Aquí lo pondré todo junto:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fibonacci&lt;/span&gt;($input) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;    $a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;    $b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(; $input &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;$input) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;        $c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $a;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;        $a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $b;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;        $b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $b &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; $c;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;    }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; $b;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FibonacciTest&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PHPUnit_Framework_TestCase&lt;/span&gt; {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     * @dataProvider numbers
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     */&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testFibonacci&lt;/span&gt;($input, $expected) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20&lt;/span&gt;        $this&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;assertEquals&lt;/span&gt;($expected, &lt;span style=&#34;color:#a6e22e&#34;&gt;fibonacci&lt;/span&gt;($input));
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21&lt;/span&gt;    }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numbers&lt;/span&gt; () {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;),
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;),
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;),
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29&lt;/span&gt;        );
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30&lt;/span&gt;    }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Como he dicho, todo es más fácil, se entiende más fácil, pero no está bien hecho. Odio tener código en comentarios, y aquí se indica que se utilice el &amp;ldquo;&lt;em&gt;dataProvider&lt;/em&gt;&amp;rdquo; en un comentario. Los comentarios son para comentar. Y punto.&lt;/p&gt;
&lt;p&gt;Pero dejemos ya de juzgar a PHP, cosa que resulta tremendamente sencilla. Vamos a ver lo que he hecho.&lt;/p&gt;
&lt;h3 id=&#34;proporcionando-datos&#34;&gt;Proporcionando datos&lt;/h3&gt;
&lt;p&gt;Pues nada: una función que devuelve un &lt;em&gt;array&lt;/em&gt; de &lt;em&gt;arrays&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;escribiendo-el-test&#34;&gt;Escribiendo el test&lt;/h3&gt;
&lt;p&gt;Se pone un comentario (eso sí: ¡¡con doble asterisco!!) y se indica qué función es la que va a proporcionar los datos. Y ya.&lt;/p&gt;
&lt;p&gt;Cada dato provocará una llamada a la función de tests.&lt;/p&gt;
&lt;h2 id=&#34;comparativa-entre-junit-y-phpunit&#34;&gt;Comparativa entre JUnit y PHPUnit&lt;/h2&gt;
&lt;p&gt;Como véis, en PHP ha resultado mucho más sencillo. Además, en Java tiene un problema: todos los tests se ejecutarán con todos los datos. No hay manera de especificar distintos proveedores de datos para dos funciones, sino separándolos a dos clases.&lt;/p&gt;
&lt;p&gt;En PHP es horrible eso de usar anotaciones embebidas en comentarios. Bueno&amp;hellip; Todo en PHP es horrible.&lt;/p&gt;
&lt;h2 id=&#34;python&#34;&gt;Python&lt;/h2&gt;
&lt;p&gt;Pues&amp;hellip;. Ya he terminado. Python no soporta este tipo de características.&lt;/p&gt;
&lt;p&gt;Tienen abierta una incidencia, pero no parecen por la labor de implementarlo. Dicen que es tan sencillo simularlo que no interesa. Yo, personalmente, no estoy de acuerdo. A mí me gusta eso de ver un punto por cada test y que me indique exactamente cuál es el que ha fallado.&lt;/p&gt;
&lt;p&gt;Por otra parte, creo que &lt;em&gt;nose&lt;/em&gt; proporciona una manera, pero no en la versión disponible en Debian. Quizá cuando sea oficial cambiaré esta entrada :D&lt;/p&gt;
&lt;p&gt;De todas maneras, siempre podéis utilizar &lt;a href=&#34;http://en.wikipedia.org/wiki/Behavior_Driven_Development&#34;&gt;BDD&lt;/a&gt; , mediante &lt;a href=&#34;https://github.com/rlisagor/freshen&#34;&gt;freshen&lt;/a&gt; , que sí
soporta estas características, como ya expliqué en el artículo &lt;a href=&#34;https://magmax.org/blog/python-pruebas-5/&#34;&gt;Python: Cómo
hacer pruebas 5: freshen&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;más-información&#34;&gt;Más información&lt;/h2&gt;
&lt;p&gt;Para Java, os recomiendo la web de Isagoksu, `Using JUnit Parameterized
Annotation].&lt;/p&gt;
&lt;p&gt;Para PHP, el propio &lt;a href=&#34;http://www.phpunit.de/manual/3.7/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.data-providers&#34;&gt;manual de PHPUnit, en la sección de Data Providers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Y para Python, ya os dije que no hay nada, y que lo mejor que podéis hacer es
usar &lt;a href=&#34;http://en.wikipedia.org/wiki/Behavior_Driven_Development&#34;&gt;BDD&lt;/a&gt;  mediante &lt;a href=&#34;https://github.com/rlisagor/freshen&#34;&gt;freshen&lt;/a&gt;  y mi artículo en castellano  &lt;a href=&#34;https://magmax.org/blog/python-pruebas-5/&#34;&gt;Python: Cómo hacer
pruebas 5: freshen&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Python: Cómo hacer pruebas 5: freshen</title>
      <link>https://magmax.org/blog/python-pruebas-5/</link>
      <pubDate>Fri, 02 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/python-pruebas-5/</guid>
      <description>
        
          &lt;p&gt;Después del éxito cosechado con el artículo &lt;a href=&#34;https://magmax.org/blog/python-pruebas-4/&#34;&gt;Python: Cómo hacer pruebas (4)&lt;/a&gt;, no puedo evitar aprovechar el tirón y subir el nivel: &lt;em&gt;BDD&lt;/em&gt;, o, lo que es lo mismo, &lt;em&gt;Business Driven Development&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Éste va a ser un tema muy arriesgado, ya que en mi vida he conseguido hacer BDD para&amp;hellip; el ejemplo que os voy a mostrar. No lo he usado nunca más, aunque me parece bastante interesante el tema.&lt;/p&gt;
&lt;p&gt;Aún me guardo un temita en el tintero para otro artículo. Lo dejaré como una sorpresa :D&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/python.png&#34;
         alt=&#34;Python&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;qué-vamos-a-utilizar&#34;&gt;Qué vamos a utilizar&lt;/h2&gt;
&lt;p&gt;Hay un montón de formas de hacer BDD. En Python también. Sin embargo, parece que &lt;a href=&#34;http://cukes.info/&#34;&gt;Cucumber&lt;/a&gt;  se ha transformado en un estándar, aunque es &lt;a href=&#34;http://www.ruby-lang.org/&#34;&gt;Ruby&lt;/a&gt;  y no Python.&lt;/p&gt;
&lt;p&gt;He estado buscando mucho, evaluando posibilidades como &lt;a href=&#34;https://github.com/hugobr/pyhistorian&#34;&gt;PyHistorian&lt;/a&gt; , &lt;a href=&#34;https://github.com/hugobr/pycukes&#34;&gt;PyCukes&lt;/a&gt; , &lt;a href=&#34;http://lettuce.it/&#34;&gt;Lettuce&lt;/a&gt; , &amp;hellip; Pero ninguno es paquete Debian. Eso no es un problema, claro, porque puede usarse &lt;a href=&#34;http://pypi.python.org/pypi&#34;&gt;PyPi&lt;/a&gt;  o empaquetarse a mano, pero sabía yo que podía encontrar algo mejor.&lt;/p&gt;
&lt;p&gt;Finalmente, lo he encontrado y&amp;hellip; es paquete Debian. Se trata de &lt;a href=&#34;https://github.com/rlisagor/freshen&#34;&gt;python-freshen&lt;/a&gt; . ¿Y cuál es la mejor característica de esta pequeña maravilla? ¡Pues que se utiliza como un plug-in para nuestro amito &lt;a href=&#34;http://code.google.com/p/python-nose/&#34;&gt;nose&lt;/a&gt; , &lt;a href=&#34;https://magmax.org/blog/python-pruebas-3/&#34;&gt;al cuál dediqué un artículo&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Así que es requisito indispensable tener instalado &lt;em&gt;python-freshen&lt;/em&gt;, el cual ya tiene como dependencia a &lt;em&gt;python-nose&lt;/em&gt;, por lo que nos vale.&lt;/p&gt;
&lt;h2 id=&#34;el-problema&#34;&gt;El problema&lt;/h2&gt;
&lt;p&gt;Como sabéis, explico mediante ejemplos. En esta ocasión no va a ser menos. El ejemplo que voy a ejecutar es el conocidísimo problema de &lt;a href=&#34;https://github.com/12meses12katas/Marzo-FizzBuzz&#34;&gt;fizzbuzz&lt;/a&gt; . Resumiendo: imprimir los valores hasta uno dado, sustituyendo los múltiplos de 3 por &amp;ldquo;fizz&amp;rdquo;, los de 5 por &amp;ldquo;buzz&amp;rdquo; y los de 3 y 5 por &amp;ldquo;fizzbuzz&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;estructura-de-ficheros&#34;&gt;Estructura de ficheros&lt;/h2&gt;
&lt;p&gt;Lo primero y más importante es ver cómo deben quedar los ficheros que vamos a escribir más adelante. Tendremos 3 ficheros, repartidos en dos directorios. Podéis situar el directorio raíz donde queráis:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;.
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;├── features
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;│   ├── fizzbuzz.feature
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;│   └── steps.py
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;└── fizzbuzz.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Para ejecutar las pruebas, nos situaremos en el directorio raíz (donde se encuentra &amp;ldquo;@fizzbuzz.py@&amp;quot;) y ejecutaremos &lt;em&gt;nose&lt;/em&gt;, con la opción &lt;em&gt;&amp;ndash;with-freshen&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ nosetests --with-freshen .
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;----------------------------------------------------------------------
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;Ran &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; tests in 0.000s
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Podríamos usar también la opción &lt;em&gt;-v&lt;/em&gt; para que nos cuente qué test está ejecutando. No he conseguido que sea todo lo bueno que me gustaría, pero&amp;hellip; me vale.&lt;/p&gt;
&lt;p&gt;Y ahora es cuando creamos los archivos.&lt;/p&gt;
&lt;h3 id=&#34;archivo-featuresfizzbuzzfeature&#34;&gt;Archivo features/fizzbuzz.feature&lt;/h3&gt;
&lt;p&gt;Este archivo va a especificar nuestro problema, desde un punto de vista funcional y en lenguaje casi natural. Si os lo curráis un poco podéis especificarlo en vuestro idioma, pero&amp;hellip; lo siento; en castellano me suena raro y complicaría la explicación, así que lo pongo en inglés:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;Feature:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;  In order to check my fizzbuzz implementation
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;  I want to recover the list of fizzbuzz numbers up to &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;  Scenario Outline: Get the list of first values
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;    Given a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;number&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;    When you calculate the result
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;    Then it returns a vector &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; the &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;  Examples:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; result                                                                                   &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]                                                                                      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]                                                                                   &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;]                                                                           &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]                                                                        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;buzz&amp;#39;&lt;/span&gt;]                                                                &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;buzz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;]                                                        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;buzz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]                                                     &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;buzz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]                                                  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;buzz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;]                                          &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;buzz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;buzz&amp;#39;&lt;/span&gt;]                                  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;buzz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;buzz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]                              &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;buzz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;buzz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;]                      &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;buzz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;buzz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;]                  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;buzz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;buzz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;]              &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;buzz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;buzz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizzbuzz&amp;#39;&lt;/span&gt;]  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Realmente este archivo se creará poco a poco, añadiendo un &amp;ldquo;Ejemplo&amp;rdquo; cada vez.&lt;/p&gt;
&lt;p&gt;Lo más importante de aquí son los comienzos de las líneas: las palabras &lt;code&gt;Feature&lt;/code&gt;, &lt;code&gt;In order to&lt;/code&gt;, &lt;code&gt;I want&lt;/code&gt;, &lt;code&gt;Scenario Outline&lt;/code&gt;, &lt;code&gt;Examples&lt;/code&gt; y, sobre todo, &lt;code&gt;Given&lt;/code&gt;, &lt;code&gt;When&lt;/code&gt;, &lt;code&gt;Then&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Hay libros escritos sobre este pseudo lenguaje, así que os dejo que echéis un poco de imaginación o que busquéis en la documentación. Siento no poder explicarlo aquí.&lt;/p&gt;
&lt;p&gt;Como se puede observar, a parte de tener un poco cuidado con las palabras con las que empezamos cada línea, es casi lenguaje natural. Según el caso, se puede conseguir un lenguaje natural completo.&lt;/p&gt;
&lt;p&gt;En teoría, este archivo podemos enseñárselo al cliente e, incluso, pedirle que nos ayude a construirlo. Con el tiempo, podría llegar a crearlo el propio cliente.&lt;/p&gt;
&lt;h3 id=&#34;featuresstepspy&#34;&gt;features/steps.py&lt;/h3&gt;
&lt;p&gt;En este archivo vamos a utilizar expresiones regulares para emparejar las definiciones del archivo &lt;em&gt;features&lt;/em&gt; con nuestro programa principal.&lt;/p&gt;
&lt;p&gt;Veamos qué aspecto queda:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; freshen &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; freshen.checks &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; fizzbuzz &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Given&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a (\d+)&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_data&lt;/span&gt;(number):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;    scc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(number)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@When&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;you calculate the result&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calculate&lt;/span&gt;():
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;    scc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fizzbuzz(scc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;number)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Then&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;it returns a vector with the (.+)&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check_result&lt;/span&gt;(pattern):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;    assert_equal(pattern, str(scc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;result))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Como puede observarse, realizamos operaciones para &lt;code&gt;Given&lt;/code&gt;, &lt;code&gt;When&lt;/code&gt; y &lt;code&gt;Then&lt;/code&gt;, pasando a los decoradores un parámetro que es la expresión regular que debe cumplirse para ejecutar el propio test.&lt;/p&gt;
&lt;p&gt;En nuestro caso, he utilizado una variable de &lt;em&gt;freshen&lt;/em&gt; para almacenar mis datos. Existen 3 variables posibles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;glc&lt;/code&gt; o &lt;em&gt;Global Context&lt;/em&gt;, que se mantendrá durante toda la ejecución actual.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ftc&lt;/code&gt; o &lt;em&gt;Feature Context&lt;/em&gt;, que se mantendrá durante esta característica.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scc&lt;/code&gt; o &lt;em&gt;Scenario Context&lt;/em&gt;, que se mantendrá durante este escenario.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En las funciones lo que hago es almacenar el valor inicial, calcular el resultado y comprobar que el resultado es lo esperado, respectivamente.&lt;/p&gt;
&lt;p&gt;Se puede observar cómo los &lt;em&gt;matchings&lt;/em&gt; de las expresiones regulares se transforman en parámetros de nuestras funciones.&lt;/p&gt;
&lt;h3 id=&#34;fizzbuzzpy&#34;&gt;fizzbuzz.py&lt;/h3&gt;
&lt;p&gt;Finalmente, el archivo solución del problema que, en este caso, es lo que menos nos interesa, pero lo incluyo para que podáis probarlo todo junto:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fizzbuzz&lt;/span&gt;(number):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [offuscate(x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; xrange(number)]
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;offuscate&lt;/span&gt;(n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizzbuzz&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fizz&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;buzz&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ejecutando-ahora&#34;&gt;Ejecutando ahora&amp;hellip;&lt;/h2&gt;
&lt;p&gt;Y cuando ahora ejecutamos, el resultado es más que satisfactorio:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ nosetests --with-freshen .
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;...............
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;----------------------------------------------------------------------
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;Ran &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; tests in 0.031s
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Insisto en que con la opción &lt;em&gt;-v&lt;/em&gt; se nos mostrará el nombre del escenario actual&lt;/p&gt;
&lt;h2 id=&#34;más-información&#34;&gt;Más información&lt;/h2&gt;
&lt;p&gt;Pues de &lt;em&gt;python-freshen&lt;/em&gt; hay poco&amp;hellip; algún ejemplo y poco más. &lt;a href=&#34;https://github.com/rlisagor/freshen&#34;&gt;Podéis mirarlo en su propia web&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Pero claro, podéis ver más cosas en la &lt;a href=&#34;http://cukes.info/&#34;&gt;web de cucumber&lt;/a&gt;  o buscar, directamente, &lt;a href=&#34;http://rspec.info/&#34;&gt;RSpec&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;También podéis echar un ojo a alguno de mis antiguos posts relacionados con las pruebas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://magmax.org/blog/python-pruebas-1/&#34;&gt;Python: Cómo hacer pruebas(1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://magmax.org/blog/python-pruebas-2/&#34;&gt;Python: Cómo hacer pruebas(2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://magmax.org/blog/python-pruebas-3/&#34;&gt;Python: Cómo hacer pruebas(3)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://magmax.org/blog/python-pruebas-4/&#34;&gt;Python: Cómo hacer pruebas(4)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://magmax.org/blog/asegura/&#34;&gt;No comentes: ¡Asegura!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://magmax.org/blog/atheist-no-seas-credulo/&#34;&gt;Atheist: No seas crédulo ¡¡Prueba!!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
    <item>
      <title>Python: Cómo hacer pruebas 4: pyDoubles</title>
      <link>https://magmax.org/blog/python-pruebas-4/</link>
      <pubDate>Wed, 09 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/python-pruebas-4/</guid>
      <description>
        
          &lt;p&gt;Tras las &lt;a href=&#34;https://twitter.com/#!/programania/status/133533559779635200&#34;&gt;peticiones populares&lt;/a&gt; , no puedo evitar escribir este post antes de lo que esperaba.&lt;/p&gt;
&lt;p&gt;Es la continuación del artículo &lt;a href=&#34;https://magmax.org/blog/python-pruebas-3/&#34;&gt;Python: Cómo hacer pruebas(3)&lt;/a&gt;, que parece haber tenido bastante éxito.&lt;/p&gt;
&lt;p&gt;En este caso vamos a ver los dobles de prueba, y utilizaremos, cómo no, &lt;a href=&#34;http://www.pydoubles.org/&#34;&gt;pyDoubles&lt;/a&gt; , creado principalmente por &lt;a href=&#34;http://www.carlosble.com/&#34;&gt;Carlos Blé&lt;/a&gt;  y disponible en Debian gracias a mi buen amigo &lt;a href=&#34;http://arco.esi.uclm.es/~david.villa/&#34;&gt;David Villa&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Actualización 2011-11-16&lt;/em&gt;: Corrijo el significado de las siglas F.I.R.S.T. (¡Gracias, David!).&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/python.png&#34;
         alt=&#34;Python&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;qué-vamos-a-hacer&#34;&gt;Qué vamos a hacer&lt;/h2&gt;
&lt;p&gt;En las ocasiones anteriores me he centrado en pruebas unitarias de objetos que no tienen relación con el mundo exterior. Esto está muy bien, pero es una mala programación. En una programación más &lt;em&gt;pythónica&lt;/em&gt; utilizaremos objetos. Montones de objetos. Y los objetos hablan entre ellos.&lt;/p&gt;
&lt;p&gt;Una batería de pruebas unitarias que se precie tiene que cumplir las condiciones FIRST, a saber:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Fast&lt;/em&gt;, deben ejecutarse en unos pocos segundos.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Independant&lt;/em&gt;, evitando el &lt;em&gt;scripting&lt;/em&gt;: una prueba es independiente de todas las anteriores y, por tanto, pueden ejecutarse en cualquier orden.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Repeatable&lt;/em&gt;, de manera que podemos ejecutarla dos o más veces seguidas sin que afecte al resultado.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Self-Validating&lt;/em&gt;, dando un valor booleano por respuesta, y evitando así buscar esta respuesta en un mar de logs.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Timely&lt;/em&gt;, en el momento adecuado; de nada sirve escribir los tests &lt;em&gt;después&lt;/em&gt; del código, ya que éste puede resultar difícil de probar.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Podéis consultar la definición original de estas reglas en el libro &amp;ldquo;Clean Code&amp;rdquo;, de Robert C. Martin, al final del capítulo 9, &amp;ldquo;Unit Tests&amp;rdquo;, páginas 130-131.&lt;/p&gt;
&lt;p&gt;Supongamos por un momento que tenemos un objeto que depende de otro. ¿Cómo hacemos que sean las pruebas del primero sean independientes? Lo tenemos complicado. Bueno, pues aquí es donde entran los &lt;em&gt;dobles de pruebas&lt;/em&gt;: Creamos un objeto que &lt;em&gt;parece&lt;/em&gt; el original, pero que &lt;em&gt;no es&lt;/em&gt; el original (bueno, o sí&amp;hellip; ya lo veremos).&lt;/p&gt;
&lt;p&gt;Puedo aseguraros que me ha resultado difícil encontrar un ejemplo en el que relacionar dos objetos, con un dominio conocido por todos, pequeño y sencillo, de manera que resulte altamente didáctico&amp;hellip; Y resulta que tenía el caso justo enfrente de mí :D. Vamos a implementar un pequeño &lt;em&gt;sistema de ficheros&lt;/em&gt; muy muy básico. Vamos a centrarnos en un &lt;em&gt;directorio&lt;/em&gt;. Y nos vamos a centrar en dos operaciones: &lt;em&gt;borrar&lt;/em&gt; y &lt;em&gt;cambiar permisos&lt;/em&gt;. Claro&amp;hellip; Tenemos el problema de que un directorio depende fuertemente de otros directorios y de archivos, pero no quiero meterme en la implementación de los archivos&amp;hellip; ¿Cómo lo hacemos?&lt;/p&gt;
&lt;h2 id=&#34;archivos&#34;&gt;Archivos&lt;/h2&gt;
&lt;p&gt;Como he dicho, no queremos meternos en la implementación de archivos, así que esto es lo que vamos a necesitar (lo copio aquí para no estar repitiéndolo todo el rato):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Archivo&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;borrar&lt;/span&gt;(self):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NotImplementedError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no lo vamos a necesitar&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cambiar_permisos&lt;/span&gt;(self, permisos):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NotImplementedError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no lo vamos a necesitar&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Como véis, si llegáramos a entrar en alguna de las funciones, nuestros tests fallarían estrepitosamente. Tenemos que ser capaces de probarlo sin usar el archivo real.&lt;/p&gt;
&lt;h2 id=&#34;las-pruebas&#34;&gt;Las Pruebas&amp;hellip;&lt;/h2&gt;
&lt;p&gt;Para probarlo voy a usar &lt;a href=&#34;http://readthedocs.org/docs/nose/en/latest/&#34;&gt;nose&lt;/a&gt; , ¡¡que para eso expliqué &lt;a href=&#34;https://magmax.org/blog/python-pruebas-3/&#34;&gt;en el artículo anterior&lt;/a&gt; cómo usarlo!!.&lt;/p&gt;
&lt;p&gt;El problema de &lt;em&gt;nose&lt;/em&gt; es que la clase de pruebas debe estar arriba del todo. Tenedlo en cuenta a la hora de ir componiendo los tests&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;directorios&#34;&gt;Directorios&lt;/h2&gt;
&lt;p&gt;Asumamos que nuestro código es &lt;em&gt;legacy&lt;/em&gt; y ya teníamos las clases escritas&amp;hellip; Así me ahorro bastante tiempo XD. Ahí va la clase Directorio:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Directorio&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;contenido &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;borrar&lt;/span&gt;(self):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;contenido:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;            x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;borrar()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;anadir&lt;/span&gt;(self, objeto):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;contenido&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(objeto)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cambiar_permisos&lt;/span&gt;(self, permisos):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;contenido:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;            x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cambiar_permisos(permisos)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;probando-que-es-gerundio&#34;&gt;Probando, que es gerundio&lt;/h2&gt;
&lt;h3 id=&#34;añadiendo&#34;&gt;Añadiendo&lt;/h3&gt;
&lt;p&gt;Pues ya tenemos nuestros Directorios, (no) tenemos nuestros Archivos&amp;hellip; ¡¡Vamos a probarlo!! Voy a necesitar una prueba de la que no os he hablado, y es que para probar que borramos, necesitamos añadir. ¿Estará funcionando correctamente este método? (nuevamente recuerdo que los tests deben ir al principio del archivo para que &lt;em&gt;nose&lt;/em&gt; funcione):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; unittest
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pyDoubles.framework &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testSeBorrarDirectorios&lt;/span&gt; (unittest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TestCase):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_probamos_que_anadimos&lt;/span&gt;(self):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;        archivo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stub(Archivo())
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;        sut &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Directorio()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;        sut&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;anadir(archivo)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;assertTrue (archivo &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; sut&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;contenido)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;¿Qué ha ocurrido aquí? ¿Qué es todo eso?&lt;/p&gt;
&lt;p&gt;Bueno, es más sencillo de lo que parece. Lo que hacemos es usar pyDoubles, y por eso importamos todo lo que hay en el framework. Además, creamos una clase que hereda de &lt;em&gt;TestCase&lt;/em&gt; para que se ejecuten las pruebas, y será en esta clase donde meteremos todos los tests.&lt;/p&gt;
&lt;p&gt;El primero de los tests crea un archivo que no es un archivo&amp;hellip; Es un &amp;ldquo;&lt;em&gt;stub&lt;/em&gt;&amp;rdquo;. ¿Qué es eso?&lt;/p&gt;
&lt;p&gt;Un &lt;em&gt;STUB&lt;/em&gt; es un objeto que se comporta como el original, pero no es el original. Puede reemplazar un único método o un conjunto de ellos.&lt;/p&gt;
&lt;p&gt;Como véis, lo que sea &amp;ldquo;archivo&amp;rdquo; no importa, ya que sólo me importa comprobar que, después, puedo recuperarlo. Técnicamente, y aprovechando la potencia de &lt;em&gt;Python&lt;/em&gt; podría haber puesto cualquier cosa, pero usar un objeto pseudo-real es más claro. Si no me creéis, podéis comprobar que es un objeto de tipo Archivo.&lt;/p&gt;
&lt;p&gt;Pero veamos el segundo ejemplo, que es más claro.&lt;/p&gt;
&lt;h3 id=&#34;borrando&#34;&gt;Borrando&lt;/h3&gt;
&lt;p&gt;En este caso vamos a borrar. Evidentemente, se tratará de un borrado recursivo, ya que si no pierde la gracia.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_probamos_que_borramos&lt;/span&gt;(self):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;    archivo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; spy(Archivo())
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;    sut &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Directorio()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;    sut&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;anadir(archivo)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;    sut&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;borrar()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt;    assert_that_method(archivo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;borrar)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;was_called()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Aquí no he usado un &lt;em&gt;stub&lt;/em&gt;, sino un &lt;em&gt;spy&lt;/em&gt;, un espía.&lt;/p&gt;
&lt;p&gt;Los &lt;em&gt;SPY&lt;/em&gt; o &lt;em&gt;spies&lt;/em&gt; son dobles de prueba como los &lt;em&gt;stub&lt;/em&gt;, solo que tienen post-condiciones. Es decir: se crean, se usan y después se comprueba que se usaron correctamente.&lt;/p&gt;
&lt;p&gt;Precisamente por eso está la comprobación final, en la que compruebo que el método &amp;ldquo;&lt;em&gt;borrar&lt;/em&gt;&amp;rdquo; del objeto &amp;ldquo;&lt;em&gt;archivo&lt;/em&gt;&amp;rdquo; se llamó. ¿Qué hizo? Pues nada, porque era un objeto de coña :D&lt;/p&gt;
&lt;p&gt;Una de las grandes ventajas de pyDoubles es lo semántico que resulta su uso. ¡¡Casi se puede leer!!&lt;/p&gt;
&lt;h3 id=&#34;cambiando-permisos&#34;&gt;Cambiando permisos&lt;/h3&gt;
&lt;p&gt;Ahora vamos con la segunda parte: comprobar que el cambio de permisos es recursivo. Es igual que el borrado, con la diferencia de que tenemos que pasar un parámetro:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_cambiar_permisos_llama_con_valores_adecuados&lt;/span&gt;(self):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;    archivo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; spy(Archivo())
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;    sut &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Directorio()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;    sut&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;anadir(archivo)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;    sut&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cambiar_permisos(&lt;span style=&#34;color:#ae81ff&#34;&gt;0777&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt;    assert_that_method(archivo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cambiar_permisos)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;was_called()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;with_args(&lt;span style=&#34;color:#ae81ff&#34;&gt;0777&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9&lt;/span&gt;    assert_that_method(archivo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;borrar)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;was_never_called()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Como podemos observar, en este caso hemos vuelto a utilizar un espía. Aquí comprobamos que el método se llamó con los permisos indicados, y también que el método borrar no se llamó nunca. Esto no es ni necesario, pero lo he puesto por mostrar más capacidades de pyDoubles.&lt;/p&gt;
&lt;p&gt;Lo mismo se podría hacer de otra manera ligeramente diferente:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_cambiar_permisos_con_mock&lt;/span&gt;(self):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;    archivo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mock(Archivo())
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;    expect_call(archivo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cambiar_permisos)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;with_args(&lt;span style=&#34;color:#ae81ff&#34;&gt;0777&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;    sut &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Directorio()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;    sut&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;anadir(archivo)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;    sut&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cambiar_permisos(&lt;span style=&#34;color:#ae81ff&#34;&gt;0777&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9&lt;/span&gt;    archivo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;assert_that_is_satisfied()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Aquí he utilizado un &lt;em&gt;mock&lt;/em&gt;. Un &lt;em&gt;mock&lt;/em&gt; es un &lt;em&gt;stub&lt;/em&gt; con precondiciones. Es decir: primero digo lo que va a pasar, ejecuto, y compruebo que ha pasado.&lt;/p&gt;
&lt;p&gt;Tan solo nos quedaría ver los &amp;ldquo;&lt;em&gt;proxyspy&lt;/em&gt;&amp;rdquo;, que son espías que llaman al objeto real.&lt;/p&gt;
&lt;h3 id=&#34;todo-junto&#34;&gt;Todo junto&lt;/h3&gt;
&lt;p&gt;Aquí tenéis todo el código de un tirón:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; unittest
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pyDoubles.framework &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testSeBorrarDirectorios&lt;/span&gt; (unittest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TestCase):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_probamos_que_anadimos&lt;/span&gt;(self):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;        archivo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stub(Archivo())
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;        sut &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Directorio()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;        sut&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;anadir(archivo)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;assertTrue (archivo &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; sut&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;contenido)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_probamos_que_borramos&lt;/span&gt;(self):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;        archivo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; spy(Archivo())
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;        sut &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Directorio()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;        sut&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;anadir(archivo)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19&lt;/span&gt;        sut&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;borrar()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21&lt;/span&gt;        assert_that_method(archivo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;borrar)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;was_called()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_cambiar_permisos_llama_con_valores_adecuados&lt;/span&gt;(self):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24&lt;/span&gt;        archivo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; spy(Archivo())
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25&lt;/span&gt;        sut &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Directorio()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26&lt;/span&gt;        sut&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;anadir(archivo)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28&lt;/span&gt;        sut&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cambiar_permisos(&lt;span style=&#34;color:#ae81ff&#34;&gt;0777&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30&lt;/span&gt;        assert_that_method(archivo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cambiar_permisos)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;was_called()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;with_args(&lt;span style=&#34;color:#ae81ff&#34;&gt;0777&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31&lt;/span&gt;        assert_that_method(archivo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;borrar)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;was_never_called()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_cambiar_permisos_con_mock&lt;/span&gt;(self):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34&lt;/span&gt;        archivo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mock(Archivo())
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35&lt;/span&gt;        expect_call(archivo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cambiar_permisos)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;with_args(&lt;span style=&#34;color:#ae81ff&#34;&gt;0777&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36&lt;/span&gt;        sut &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Directorio()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37&lt;/span&gt;        sut&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;anadir(archivo)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39&lt;/span&gt;        sut&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cambiar_permisos(&lt;span style=&#34;color:#ae81ff&#34;&gt;0777&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41&lt;/span&gt;        archivo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;assert_that_is_satisfied()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Archivo&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;borrar&lt;/span&gt;(self):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NotImplementedError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no lo vamos a necesitar&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cambiar_permisos&lt;/span&gt;(self, permisos):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NotImplementedError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no lo vamos a necesitar&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Directorio&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54&lt;/span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;contenido &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;borrar&lt;/span&gt;(self):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;contenido:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58&lt;/span&gt;            x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;borrar()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;anadir&lt;/span&gt;(self, objeto):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61&lt;/span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;contenido&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(objeto)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cambiar_permisos&lt;/span&gt;(self, permisos):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;contenido:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65&lt;/span&gt;            x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cambiar_permisos(permisos)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;respuestas-predefinidas&#34;&gt;Respuestas predefinidas&lt;/h2&gt;
&lt;p&gt;Habrá casos en los que necesitemos una respuesta determinada cuando se llame a un método, de manera que el algoritmo que estamos probando pueda continuar. Para ello podemos &amp;ldquo;prediseñar&amp;rdquo; métodos; ahí van diferentes maneras diferentes de hacerlo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;objeto&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;metodo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; method_returning(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;objeto&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;metodo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; method_raising(&lt;span style=&#34;color:#a6e22e&#34;&gt;NotImplementedError&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;when(objeto&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;metodo)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;then_return(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;when(objeto&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;metodo)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;with_args(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;then_return(&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;cuestión-de-nomenclatura&#34;&gt;Cuestión de nomenclatura&lt;/h2&gt;
&lt;p&gt;La diferencia entre un &lt;em&gt;stub&lt;/em&gt;, &lt;em&gt;mock&lt;/em&gt; y &lt;em&gt;spy&lt;/em&gt; es puramente teórica. Hay muchos &lt;em&gt;frameworks&lt;/em&gt; que los confunden o ignoran. Yo, personalmente, utilizo siempre &lt;em&gt;spies&lt;/em&gt;, ya que me parecen más intuitivos, aunque suelo llamarlos &lt;em&gt;mocks&lt;/em&gt;, término con el que se suelen denominar globalmente a todos los dobles de prueba.&lt;/p&gt;
&lt;p&gt;Hay más dobles de prueba, como los &lt;em&gt;Fake&lt;/em&gt;, que son implementaciones completas de una interfaz pero con funcionalidad simplificada (imaginad una clase de acceso a base de datos que siempre devuelve datos fijos, sin acceder realmente). Si lo pensáis, un &lt;em&gt;stub&lt;/em&gt; no es más que un &lt;em&gt;fake&lt;/em&gt; automático XD. ¡¡Todos están relacionados!!&lt;/p&gt;
&lt;p&gt;Así que, resumiendo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Es un &lt;em&gt;stub&lt;/em&gt; si no se realizan comprobaciones.&lt;/li&gt;
&lt;li&gt;Será un &lt;em&gt;mock&lt;/em&gt; si tenemos precondiciones.&lt;/li&gt;
&lt;li&gt;Un &lt;em&gt;spy&lt;/em&gt; si tenemos postcondiciones.&lt;/li&gt;
&lt;li&gt;Un &lt;em&gt;fake&lt;/em&gt; si usamos un objeto que implementa la funcionalidad simplificada.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Diré una cosa de corazón: llamadlos como queráis, pero no los mezcléis. La mezcla da lugar a métodos más complejos. Podéis usar distintos tipos en distintas pruebas, pero en una misma prueba, no los mezcléis. Y mucho menos con un único objeto.&lt;/p&gt;
&lt;h2 id=&#34;hamcrest-y-pydoubles&#34;&gt;Hamcrest y pyDoubles&lt;/h2&gt;
&lt;p&gt;Resulta que escribí el artículo anterior sabiendo lo que me hacía, y que
podemos combinar los &lt;em&gt;matchers&lt;/em&gt; de &lt;a href=&#34;http://code.google.com/p/hamcrest/&#34;&gt;Hamcrest&lt;/a&gt;  junto a pyDoubles&amp;hellip; ¿Cómo?
Pues, por ejemplo, en el método &lt;code&gt;with_args&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;when(objeto&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;metodo)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;with_args(instance_of(objeto))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;then_return(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hola, mundo&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;when(objeto&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;metodo)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;with_args(any_of(starts_with(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hola&amp;#39;&lt;/span&gt;), ends_with(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mundo&amp;#39;&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;then_return(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hola, mundo&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Como véis, hemos usado &lt;code&gt;instance_of&lt;/code&gt;, &lt;code&gt;any_of&lt;/code&gt;, &lt;code&gt;starts_with&lt;/code&gt; y &lt;code&gt;ends_with&lt;/code&gt;, que son &lt;em&gt;matchers&lt;/em&gt; de &lt;em&gt;Hamcrest&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;un-gran-poder-conlleva-una-gran-responsabilidad&#34;&gt;Un gran poder conlleva una gran responsabilidad&lt;/h2&gt;
&lt;p&gt;&amp;hellip; como le dijo el Tío Ben a Peter Parker :D&lt;/p&gt;
&lt;p&gt;Tenemos en nuestras manos una gran herramienta, pero debemos tener en cuenta que debemos usarlo con cuidado, de la misma manera que un mecánico no arregla todas las averías con el mismo martillo.&lt;/p&gt;
&lt;p&gt;Hay ciertas reglas básicas que cumplir, con el fin de evitar terminar con pruebas terriblemente complejas o nos metamos en camisas de once varas.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Nunca &amp;ldquo;&lt;em&gt;mockeéis&lt;/em&gt;&amp;rdquo; un objeto que no sea vuestro.&lt;/em&gt; De esta manera se evitan &lt;em&gt;mocks&lt;/em&gt; interminables de todo &lt;em&gt;Hibernate&lt;/em&gt; o cosas incluso peores. Es un fallo habitual en todo novato, y yo no fui la excepción.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Realizad &lt;em&gt;mocks&lt;/em&gt; precisos&lt;/em&gt;. Cuantas menos cosas reemplacéis, más estable será el test (en la terminología típica, &amp;ldquo;los tests serán menos frágiles&amp;rdquo;). Si estáis reemplazando muchos métodos, a lo mejor necesitáis un &lt;em&gt;fake&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;para-más-información&#34;&gt;Para más información&lt;/h2&gt;
&lt;p&gt;Podéis visitar &lt;a href=&#34;http://www.pydoubles.org/&#34;&gt;la web de pyDoubles&lt;/a&gt; , la de &lt;a href=&#34;http://code.google.com/p/hamcrest/&#34;&gt;Hamcrest&lt;/a&gt; , la de &lt;a href=&#34;http://readthedocs.org/docs/nose/en/latest/&#34;&gt;nose&lt;/a&gt; , &amp;hellip; O releer mis antiguos posts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://magmax.org/blog/python-pruebas-1/&#34;&gt;Python: Cómo hacer pruebas(1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://magmax.org/blog/python-pruebas-2/&#34;&gt;Python: Cómo hacer pruebas(2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://magmax.org/blog/python-pruebas-3/&#34;&gt;Python: Cómo hacer pruebas(3)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://magmax.org/blog/asegura/&#34;&gt;No comentes: ¡Asegura!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://magmax.org/blog/atheist-no-seas-credulo/&#34;&gt;Atheist: No seas crédulo ¡¡Prueba!!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No sé si me he dejado algo en el tintero. Tengo la sensación de que sí&amp;hellip; sobre todo en las reglas a cumplir cuando usamos mocks. Toda contribución será bienvenida.&lt;/p&gt;
&lt;p&gt;Un saludo!!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Python: Cómo hacer pruebas 3: nose y hamcrest</title>
      <link>https://magmax.org/blog/python-pruebas-3/</link>
      <pubDate>Mon, 07 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/python-pruebas-3/</guid>
      <description>
        
          &lt;p&gt;Después del artículo &lt;a href=&#34;https://magmax.org/blog/python-pruebas-2/&#34;&gt;Python: Cómo hacer pruebas (2)&lt;/a&gt;, viene el (3) :D&lt;/p&gt;
&lt;p&gt;En esta ocasión temo que el tutorial va a ser un poco &lt;em&gt;light&lt;/em&gt;, pero ya lo compensaremos con el próximo. Nos vamos a centrar en dos herramientas para hacer tests. Estas herramientas son &lt;a href=&#34;http://readthedocs.org/docs/nose/en/latest/&#34;&gt;nose&lt;/a&gt;  y &lt;a href=&#34;http://code.google.com/p/hamcrest/&#34;&gt;Hamcrest&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Ambos son paquetes &lt;a href=&#34;http://www.debian.org&#34;&gt;Debian&lt;/a&gt;  y sencillos de instalar.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/python.png&#34;
         alt=&#34;Python&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;nose&#34;&gt;Nose&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Nose&lt;/em&gt; es una herramienta que nos permitirá ejecutar nuestros tests de una manera sencilla y cómoda.&lt;/p&gt;
&lt;p&gt;Para ejecutarlo, usaremos la orden &lt;em&gt;nosetests&lt;/em&gt;, seguida del archivo o archivos a probar. No es necesario que los archivos tengan nada especial, salvo que éstos deben definir las pruebas en función a &lt;em&gt;unittest&lt;/em&gt; o &lt;em&gt;doctest&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Cuando utilizamos &lt;em&gt;nosetests&lt;/em&gt; no son necesarias las líneas:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;    unittest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;main()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;De la misma manera, cuando utilizamos &lt;em&gt;doctest&lt;/em&gt; no es necesario indicar:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;   doctest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;testmod()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Aunque en el caso de &lt;em&gt;doctest&lt;/em&gt; tendremos que habilitarlo en &lt;em&gt;nosetests&lt;/em&gt; mediante la opción &lt;em&gt;&amp;ndash;with-doctests&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Veremos ejemplos en el apartado de &lt;em&gt;hamcrest&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;truco&#34;&gt;Truco&lt;/h3&gt;
&lt;p&gt;No sé dónde vi un truco para avisar que los tests deben ejecutarse con &lt;em&gt;nosetests&lt;/em&gt;. El truco es muy sencillo, y consiste en escribir las siguientes líneas:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;You must run these tests with nose.&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Fácil y estúpido, pero realmente útil.&lt;/p&gt;
&lt;p&gt;Sin embargo, también tenemos la opción de usar nose directamente, utilizando:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; nose
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;   nose&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;main()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;O bien, si queremos saber si el resultado es válido o no:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; nose
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;   result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nose&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;ventajas&#34;&gt;Ventajas&lt;/h3&gt;
&lt;p&gt;Entre las ventajas de usar &lt;em&gt;nose&lt;/em&gt; está que podemos lanzar sólo los tests que fallaron en la última ejecución, seleccionar si queremos las pruebas &lt;em&gt;doctest&lt;/em&gt; o &lt;em&gt;unittest&lt;/em&gt;, pruebas de covertura (aunque requiere algunos módulos aparte), posibilidad de guardar perfiles para reutilizarlos, &amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;hamcrest&#34;&gt;Hamcrest&lt;/h2&gt;
&lt;p&gt;Es una herramienta que nos facilita la comprobación de condiciones. No sólo está en &lt;em&gt;Python&lt;/em&gt;, sino que también está disponible en &lt;em&gt;Java&lt;/em&gt;, &lt;em&gt;C++&lt;/em&gt;, &lt;em&gt;Objetive C&lt;/em&gt;, &lt;em&gt;PHP&lt;/em&gt; y &lt;em&gt;Erlang&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Además, provee una sintaxis más semántica que usando el tradicional &lt;em&gt;XUnit&lt;/em&gt;. ¿Qué significa esto? Pues que podremos &amp;ldquo;leer&amp;rdquo; el código.&lt;/p&gt;
&lt;p&gt;Y como ya he escrito mucho, veamos un ejemplo.&lt;/p&gt;
&lt;h3 id=&#34;ejemplo-1-fibonacci&#34;&gt;Ejemplo 1: Fibonacci&lt;/h3&gt;
&lt;p&gt;Ya sabéis, esa &lt;a href=&#34;http://es.wikipedia.org/wiki/Sucesi%C3%B3n_de_Fibonacci&#34;&gt;secuencia en la que cada número es la suma de los dos anteriores&lt;/a&gt; , comenzando por dos 1 seguidos (1, 1, 2, 3, 5, 8, 13, &amp;hellip;)&lt;/p&gt;
&lt;p&gt;Como son ejemplos sencillos, voy a poner el código de prueba y el código válido en el mismo bloque. Para probarlo, usaremos &lt;em&gt;nose&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; unittest
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; hamcrest &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testFibonacci&lt;/span&gt; (unittest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TestCase):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testFirstElementIs1&lt;/span&gt;(self):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;        assert_that(fibonacci(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), equal_to(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testSecondElementIs1&lt;/span&gt;(self):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;        assert_that(fibonacci(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), equal_to(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testThirdElementIs2&lt;/span&gt;(self):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;        assert_that(fibonacci(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;), equal_to(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testFourthElementIs3&lt;/span&gt;(self):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;        assert_that(fibonacci(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;), equal_to(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testFifthElementIs5&lt;/span&gt;(self):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19&lt;/span&gt;        assert_that(fibonacci(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;), equal_to(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fibonacci&lt;/span&gt; (n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22&lt;/span&gt;    a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23&lt;/span&gt;    b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; xrange(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25&lt;/span&gt;        c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26&lt;/span&gt;        a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27&lt;/span&gt;        b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Fijaros en un test cualquiera (son todos iguales, a lo mejor deberíamos &lt;em&gt;refactorizar&lt;/em&gt;): son bastante verbosos. Comparando:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;assert_that(fibonacci(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;), equal_to(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;assertEquals(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, fibonacci(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Vemos que es ligeramente más clara la versión &lt;em&gt;Hamcrest&lt;/em&gt; que la habitual.&lt;/p&gt;
&lt;h3 id=&#34;ejemplo-2-fibonacci-como-vector&#34;&gt;Ejemplo 2: fibonacci como vector&lt;/h3&gt;
&lt;p&gt;Voy a implementar el mismo algoritmo, pero ahora lo que quiero es que me devuelva un vector con todos los valores anteriores al dado:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; unittest
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; hamcrest &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testFibonacci&lt;/span&gt; (unittest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TestCase):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testVectorForValue1&lt;/span&gt;(self):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;        assert_that(fibonacci(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), only_contains(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testVectorForValue2&lt;/span&gt;(self):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;        assert_that(fibonacci(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), only_contains(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testVectorForValue3&lt;/span&gt;(self):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;        assert_that(fibonacci(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;), only_contains(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testVectorForValue4&lt;/span&gt;(self):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;        assert_that(fibonacci(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;), only_contains(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testVectorForValue5&lt;/span&gt;(self):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19&lt;/span&gt;        assert_that(fibonacci(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;), only_contains(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fibonacci&lt;/span&gt; (n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24&lt;/span&gt;    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; xrange(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27&lt;/span&gt;        result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(result[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; result[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y comparemos cómo sería el test habitual:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;assert_that(fibonacci(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;), only_contains(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;assertEquals([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;], fibonacci(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Nuevamente es ligeramente más clara la versión &lt;em&gt;Hamcrest&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;La verdad es que como &lt;em&gt;Python&lt;/em&gt; es tan sencillo, ¡¡resulta complicadísimo encontrar un ejemplo en el que &lt;em&gt;Hamcrest&lt;/em&gt; resulte claramente vencedor!! Con &lt;em&gt;Java&lt;/em&gt; es muchísimo más sencillo dar el trofeo a Hamcrest.&lt;/p&gt;
&lt;p&gt;Sin embargo, me guardo un as en la manga. Aunque la comprobación no aporta mucho más, veamos un error provocado:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;$ nosetests fibonacci.py
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;...F
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;======================================================================&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;FAIL: testVectorForValue4 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;fibonacci.testFibonacci&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;----------------------------------------------------------------------
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;Traceback &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;most recent call last&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fibonacci.py&amp;#34;&lt;/span&gt;, line 19, in testVectorForValue4
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;    assert_that&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;fibonacci&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;4&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, only_contains&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1, 1, 2&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;AssertionError:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;Expected: a sequence containing items matching &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&amp;lt;1&amp;gt; or &amp;lt;1&amp;gt; or &amp;lt;2&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;     but: was &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1, 1, 2, 3&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&amp;gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;----------------------------------------------------------------------
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;Ran &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; tests in 0.001s
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;FAILED &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;failures&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;¡¡¡Ahá!!! ¿Véis qué claro ha quedado el error?&lt;/p&gt;
&lt;h2 id=&#34;más-información&#34;&gt;Más información&lt;/h2&gt;
&lt;p&gt;Tenéis toda la información que necesitéis en los sites de &lt;a href=&#34;http://readthedocs.org/docs/nose/en/latest/&#34;&gt;nose&lt;/a&gt;  y &lt;a href=&#34;http://code.google.com/p/hamcrest/&#34;&gt;Hamcrest&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para más información, podéis ver el &lt;a href=&#34;https://magmax.org/blog/python-pruebas-4/&#34;&gt;siguiente tutorial de python&lt;/a&gt;, donde hablaremos de los dobles de pruebas.&lt;/p&gt;
&lt;p&gt;Espero que hayáis encontrado útil este tutorial.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Python: Cómo hacer pruebas 2: unittest</title>
      <link>https://magmax.org/blog/python-pruebas-2/</link>
      <pubDate>Tue, 27 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/python-pruebas-2/</guid>
      <description>
        
          &lt;p&gt;Tras el artículo &lt;a href=&#34;https://magmax.org/blog/python-pruebas-1/&#34;&gt;Python: Cómo hacer pruebas (1)&lt;/a&gt; es lógico pensar que vendrá la segunda parte.&lt;/p&gt;
&lt;p&gt;En esta ocasión nos centraremos en UnitTest.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/python.png&#34;
         alt=&#34;Python&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;construcción-básica&#34;&gt;Construcción básica&lt;/h2&gt;
&lt;p&gt;Hay muchas ocasiones en las que las pruebas realizadas con doctest se nos quedarán cortas. Por ejemplo, ¿cómo probamos un acceso a base de datos? ¿Y una interacción entre clases? Con este fin está unittest. Hay gente que lo denomina &amp;ldquo;PyUnit&amp;rdquo;, ya que es similar a JUnit.&lt;/p&gt;
&lt;p&gt;Unittest nos ofrece toda la potencia del lenguaje para probar nuestros programas. De esta manera, escribiremos &amp;ldquo;Casos de pruebas&amp;rdquo; que podremos agrupar en &amp;ldquo;Suites de pruebas&amp;rdquo;. Además, nos permitirá agrupar funcionalidad común, de manera que preparemos nuestro entorno (a esto se le conoce como &amp;ldquo;fixture&amp;rdquo;).&lt;/p&gt;
&lt;p&gt;Como en el tutorial anterior, vamos a poner un ejemplo y a probarlo. Voy a utilizar la función &lt;code&gt;factorial&lt;/code&gt; del otro ejemplo que ya sabemos que funciona:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; unittest
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;factorial&lt;/span&gt;(n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; factorial(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tester&lt;/span&gt; (unittest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TestCase):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_1&lt;/span&gt;(self):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;assertEqual(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, factorial(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;    unittest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;main()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Como podemos ver, creamos una clase que hereda de &lt;em&gt;unittest.TestCase&lt;/em&gt;, ya que es un caso de pruebas. Python facilita la tarea de crear numerosas clases y así aislar los casos de uso que necesitemos, a menudo con una inicialización diferente. A continuación vienen los tests, que deben comenzar por la palabra &amp;ldquo;&lt;em&gt;test&lt;/em&gt;&amp;rdquo; o no se ejecutarán.&lt;/p&gt;
&lt;p&gt;En el &lt;code&gt;main&lt;/code&gt; ejecutamos el programa principal de unittest, lo que permitirá descubrir los tests de la clase en la que estamos. Esto se puede hacer en línea de órdenes mediante (sólo a partir de Python 2.7):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ python -m unittest MODULO_A_PROBAR_SIN_EXTENSIÓN
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;partes-de-un-test&#34;&gt;Partes de un test&lt;/h2&gt;
&lt;p&gt;Los tests, por lo general, constan de 3 partes que recomiendo diferenciar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Inicialización&lt;/em&gt;, que es donde se establecen valores necesarios para nuestros tests. Debe ser pequeña. A menudo ni siquiera es necesaria y se elimina. Por ejemplo, puede ser la construción del SUT (&lt;em&gt;Subject Under Test&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Ejecución&lt;/em&gt;, que es la línea en la que se llama a la funcionalidad a probar. No debe ocupar más de una línea.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Comprobación&lt;/em&gt;, que es el test propiamente dicho, expresado en forma de verificaciones.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Veamos el test desglosado:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;class tester &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;unittest.TestCase&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;    def test_1&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# inicialización (vacío)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;        result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; factorial&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# ejecución&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;        self.assertEqual&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1, result&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# comprobación&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;funciones-especiales&#34;&gt;Funciones especiales&lt;/h2&gt;
&lt;p&gt;Hay algunas funciones especiales, que son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;setUp&lt;/em&gt;, que permite inicializar la &lt;em&gt;fixture&lt;/em&gt;, es decir, establecer un entorno de pruebas para cada prueba. Se ejecutará siempre antes de cada test.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;tearDown&lt;/em&gt;, que realiza la operación contraria, es decir, se ejecuta siempre después de cada test.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;setUpClass&lt;/em&gt;, que se ejecuta una única vez al comienzo de la clase.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;tearDownClass&lt;/em&gt;, que se lanza cuando se han terminado todos los tests.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;comprobaciones&#34;&gt;Comprobaciones&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://docs.python.org/library/unittest.html#unittest.TestCase.assertEqual&#34;&gt;Hay muchos tipos de comprobaciones a realizar&lt;/a&gt; . Se puede comprobar si el resultado es igual, menor, mayor, contiene, etc. el valor esperado o, incluso, si lanza una excepción.&lt;/p&gt;
&lt;p&gt;Hay escuelas de pensamiento que opinan que &lt;em&gt;un test debe contener una única verificación&lt;/em&gt;. No es un grupo de radicales, sino que tiene su sentido: los tests nos evitan tener que depurar, y si el nombre del test está bien elegido, un fallo en una comprobación nos dirá exactamente dónde está el problema. Si tenemos varias comprobaciones en un test, esta comprobación no será inmediata.&lt;/p&gt;
&lt;p&gt;Realmente Python nos facilita esta tarea, ya que si necesitamos una nueva comprobación, podemos desglosarlo en una clase nueva, de manera que en la inicialización de la clase establezcamos la sección de inicialización del test y dejar para las funciones sólo las comprobaciones.&lt;/p&gt;
&lt;h2 id=&#34;comprobaciones-adicionales&#34;&gt;Comprobaciones adicionales&lt;/h2&gt;
&lt;p&gt;Si necesitamos realizar comprobaciones más complejas, podemos utilizar módulos dedicados a ello, como &lt;a href=&#34;http://code.google.com/p/hamcrest/wiki/TutorialPython&#34;&gt;Hamcrest&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;ineficiente&#34;&gt;Ineficiente&lt;/h2&gt;
&lt;p&gt;Alguien puede pensar que es peor utilizar Unittest frente a doctest. En algunos
casos, esta afirmación es totalmente cierta, como en el caso de la función
&lt;em&gt;factorial&lt;/em&gt;. Sin embargo, doctest no ofrece la versatilidad que permite
unittest. Esto quedará demostrado en la siguiente entrega de &lt;a href=&#34;https://magmax.org/blog/python-pruebas-1/&#34;&gt;Python: Cómo
hacer pruebas&lt;/a&gt;, donde estudiaremos herramientas que nos faciliten las pruebas,
y seguiremos con otro tutorial más con los dobles o &lt;em&gt;mocks&lt;/em&gt;, que facilitarán
aún más la creación de pruebas.&lt;/p&gt;
&lt;h2 id=&#34;más-información&#34;&gt;Más información&lt;/h2&gt;
&lt;p&gt;Podemos encontrar más información en la web de &lt;a href=&#34;http://docs.python.org/library/unittest.html&#34;&gt;unittest&lt;/a&gt; .&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Python: Cómo hacer pruebas 1: doctest</title>
      <link>https://magmax.org/blog/python-pruebas-1/</link>
      <pubDate>Sun, 25 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/python-pruebas-1/</guid>
      <description>
        
          &lt;p&gt;Voy a redactar distintas maneras de hacer pruebas en Python. En este sentido, veremos diferentes estilos, desde el más sencillo al más complejo; desde las pruebas unitarias hasta las pruebas de sistema.&lt;/p&gt;
&lt;p&gt;Estoy convencido de que me voy a dejar mil historias en el tintero&amp;hellip; os ruego un poco de paciencia y de ayuda :D&lt;/p&gt;
&lt;p&gt;En esta primera entrega, veremos cómo probar utilizando los desconocidos &lt;em&gt;doctest&lt;/em&gt;.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/python.png&#34;
         alt=&#34;Python&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;función-de-ejemplo&#34;&gt;Función de ejemplo&lt;/h2&gt;
&lt;p&gt;Vamos a practicar con la función que obtiene el factorial de un número, función que queremos probar. Es decir, que tenemos la función:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;factorial&lt;/span&gt;(n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; factorial(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y queremos probar si funciona.&lt;/p&gt;
&lt;h2 id=&#34;pruebas-en-la-documentación&#34;&gt;Pruebas en la documentación&lt;/h2&gt;
&lt;p&gt;Por esta razón vamos a añadirle el paquete &lt;em&gt;doctest&lt;/em&gt; y la línea de ejecución adecuada:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; doctest
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;factorial&lt;/span&gt;(n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; factorial(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;    doctest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;testmod()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finalmente, será necesario añadir un comentario a la función, de la misma manera que lo veríamos en el intérprete en línea:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; doctest
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;factorial&lt;/span&gt;(n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;gt;&amp;gt;&amp;gt; factorial(3)
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;gt;&amp;gt;&amp;gt; factorial(4)
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;gt;&amp;gt;&amp;gt; factorial(5)
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    120
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; factorial(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;    doctest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;testmod()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;ejecutando-que-es-gerundio&#34;&gt;Ejecutando, que es gerundio&lt;/h3&gt;
&lt;p&gt;Vamos a ver lo que ocurre cuando lo ejecutamos. Por favor, hacedlo.&lt;/p&gt;
&lt;p&gt;¿Nada? Eso es porque todo ha ido bien. Pero claro, no podemos fiarnos&amp;hellip; Así que ejecutaremos de nuevo pero con el parámetro &lt;code&gt;-v&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;$ ./example1.py -v
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;Trying:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;    factorial&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;Expecting:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;ok
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;Trying:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;    factorial&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;4&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;Expecting:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;ok
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;Trying:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;    factorial&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;5&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;Expecting:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;ok
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; items had no tests:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;    __main__
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; items passed all tests:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; tests in __main__.factorial
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; tests in &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; items.
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; passed and &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; failed.
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23&lt;/span&gt;Test passed.
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24&lt;/span&gt;$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Madre mía, qué cosa más sencilla.&lt;/p&gt;
&lt;h2 id=&#34;separación-de-tests-y-pruebas&#34;&gt;Separación de tests y pruebas&lt;/h2&gt;
&lt;p&gt;Usar este tipo de pruebas puede resultar un problema, ya que ensucia muchísimo el código. La solución está en sacarlo a un archivo diferente. De esta manera, el código se quedará más limpio (ojo a la función &lt;code&gt;doctest.testfile&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; doctest
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;factorial&lt;/span&gt;(n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; factorial(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;    doctest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;testfile(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;example2.txt&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Separando los tests a un fichero externo, que en este caso se tiene que llamar &lt;code&gt;example2.txt&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;Módulo de ejemplo
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=================&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;Usando &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;factorial&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;------------------&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;Primero importamos nuestra función:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; example &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; factorial
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;Y esto es un ejemplo de lo bien que se nos da calcular factoriales:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; factorial(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; factorial(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; factorial(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Lo más divertido de este método es que podemos dejar perfectamente documentado nuestro código y que estos comentarios se van a probar. Es decir: si nuestro código cambia, invalidará la documentación.&lt;/p&gt;
&lt;p&gt;El próximo día&amp;hellip; UnitTest/UnitTest2&lt;/p&gt;
&lt;h2 id=&#34;para-saber-más&#34;&gt;Para saber más&amp;hellip;&lt;/h2&gt;
&lt;p&gt;Aunque pensaba utilizar la función del factorial, resulta que la misma idea la tuvieron ya la gente de &lt;em&gt;Python&lt;/em&gt; al hacer el propio manual de &lt;a href=&#34;http://docs.python.org/library/doctest.html&#34;&gt;doctest&lt;/a&gt;. Aún así os contarán muchas cosas que yo me he dejado en el tintero, como la captura de excepciones, etc.&lt;/p&gt;
&lt;p&gt;También podéis preguntar en este foro y así responderemos a las preguntas entre todos&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>No comentes: ¡Asegura!</title>
      <link>https://magmax.org/blog/asegura/</link>
      <pubDate>Sun, 14 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/asegura/</guid>
      <description>
        
          &lt;p&gt;Hoy he descubierto mucho de ese gran desconocido que es &lt;em&gt;assert&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Resulta que tenía a mi alcance una herramienta de depuración bastante fuerte y aún no he hecho uso de ella.&lt;/p&gt;
&lt;p&gt;Con el fin de solucionar este problema, escribo este artículo, aunque no
escribiré nada que no se encuentre en la &lt;a href=&#34;http://download.oracle.com/javase/6/docs/technotes/guides/language/assert.html&#34;&gt;Documentación de Java sobre Assert&lt;/a&gt;
o la &lt;a href=&#34;http://docs.python.org/release/2.5.2/ref/assert.html&#34;&gt;documentación Python&lt;/a&gt;.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/test.jpg&#34;
         alt=&#34;Test&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;lo-más-básico&#34;&gt;Lo más básico&lt;/h2&gt;
&lt;p&gt;Lo primero es saber cómo vamos a usarlo. Suele haber dos maneras de utilizarlo: con un parámetro o con dos. El segundo parámetro indicará el texto a acompañar la excepción cuando el primero de los parámetros no se cumpla.&lt;/p&gt;
&lt;p&gt;En python:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; expression
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; expression1, expression2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;y en java:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; expression&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; expression1 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; expression2&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Es importante destacar que, si la &lt;code&gt;expresion1&lt;/code&gt; no se cumple, la &lt;code&gt;expression2&lt;/code&gt; no se evaluará. A menudo, esta segunda expresión debe generar una cadena.&lt;/p&gt;
&lt;h2 id=&#34;no-utilices-assert&#34;&gt;¡¡No utilices Assert!!&lt;/h2&gt;
&lt;p&gt;De la misma manera que no utilizarías un martillo neumático para apretar un tornillo, no podemos utilizar &lt;em&gt;assert&lt;/em&gt; en todos los casos.&lt;/p&gt;
&lt;p&gt;Donde no debemos usarlo es en los siguientes supuestos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Métodos públicos&lt;/em&gt;: Cuestión estética, ya que queda horrible recibir un &amp;ldquo;Assertion Error&amp;rdquo;. Será mejor recibir un &amp;ldquo;Se ha producido un error&amp;rdquo;, por lo que en métodos públicos es mejor utilizar una comparación y una excepción. Además, existe la posibilidad de &lt;em&gt;desactivar&lt;/em&gt; las aseveraciones, por lo que corremos el riesgo de dejar de comprobar la entrada de un método público.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Para hacer trabajo útil&lt;/em&gt; en un método, ya que las aseveraciones se pueden desactivar y, por tanto, dejaría de realizarse ese trabajo.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;utiliza-assert&#34;&gt;¡¡Utiliza Assert!!&lt;/h2&gt;
&lt;p&gt;A menudo nos sentimos tentados de escribir comentarios del tipo &amp;ldquo;Todo bien&amp;rdquo;, &amp;ldquo;no debería llegar aquí&amp;rdquo;, etc. Este tipo de comentario es un problema ya que, por un lado, pueden dejar de ser ciertos y por otro, nadie los está comprobando.&lt;/p&gt;
&lt;p&gt;Además, se requieren demasiadas letras para dar la misma semántica (comparo el
comentario con su equivalente con &lt;code&gt;assert&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;En Python:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# el valor de i debe ser mayor que 5&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;En Java:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// el valor de i debe ser mayor que 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 5&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Cuando tenemos un switch, en ocasiones dejamos el caso por defecto sin gestionar, ya que nunca se llegará allí. ¿O tal vez sí? ¿Qué ocurrirá el día que añadamos una nueva opción? Podemos asegurarnos de contemplarlas:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;var&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; value1&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; hacer_cosas1&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; value2&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; hacer_cosas2&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; valueN&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; hacer_cosasN&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt;   default: &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; False&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Valor no contemplado&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;precondiciones-y-postcondiciones&#34;&gt;Precondiciones y postcondiciones&lt;/h2&gt;
&lt;p&gt;Uno de mis usos favoritos es el de comprobar entradas y salidas. Por ejemplo: tenemos la función que devuelve el factorial de un número, y que debe exigir que la entrada sea mayor que 1 (y que no sea negativa, claro). Asumiendo que no sea un método público:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;factorial&lt;/span&gt; (n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Valor inválido:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; factorial (n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;También podemos asegurarnos de no haber dejado algo con un valor inválido:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; List &lt;span style=&#34;color:#a6e22e&#34;&gt;metodo&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;  ArrayList result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Hacer muchas cosas con ifs, llamadas a métodos, etc.
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;valor no inicializado&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;En Java, es muy común tener en una clase funciones &lt;em&gt;synchronized&lt;/em&gt; y no &lt;em&gt;synchronized&lt;/em&gt; que se llaman entre ellas. Eso es un foco de &lt;em&gt;deathlocks&lt;/em&gt; dificilísimos de detectar, ya que estamos esperando a que nosotros mismos soltemos el bloqueo. Es como buscar las gafas con las gafas puestas.&lt;/p&gt;
&lt;p&gt;Este caso es realmente sencillo de detectar con un &lt;em&gt;assert&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;synchronized&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;metodo_sincronizado&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;      metodo_no_sincronizado&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;synchronized&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;metodo_no_sincronizado&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; Thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;holdsLock&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// hacer cosas
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;desactivación&#34;&gt;Desactivación&lt;/h2&gt;
&lt;p&gt;Por último, indicar que estas aseveraciones (por favor, no uséis &amp;ldquo;aserciones&amp;rdquo;) se pueden desactivar en un entorno de producción, por lo que no importa si hacéis cosas &amp;ldquo;caras&amp;rdquo;. Cuando las desactivéis será como si nunca las hubierais escrito.&lt;/p&gt;
&lt;p&gt;En python están &lt;em&gt;ACTIVADAS&lt;/em&gt; por defecto. Se debe usar la opción &lt;code&gt;-O&lt;/code&gt; para desactivarlas:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ cat assert.py
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;assert False, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Aseveraciones activadas&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;$ python assert.py
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;Traceback &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;most recent call last&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;assert.py&amp;#34;&lt;/span&gt;, line 1, in &amp;lt;module&amp;gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;    assert False, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Aseveraciones activadas&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;AssertionError: Aseveraciones activadas
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt;$ python -O assert.py
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9&lt;/span&gt;$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;En Java estarán &lt;em&gt;DESACTIVADAS&lt;/em&gt; por defecto, aunque se pueden activar por módulo,
por método, etc. Aunque lo más útil es utilizar &lt;code&gt;-ea&lt;/code&gt; para activarlas todas.&lt;/p&gt;
&lt;p&gt;¡¡Empleadlo con cariño!!&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
