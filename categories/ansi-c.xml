<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>MagMax Blog (ansi c)</title><link>http://magmax.org/</link><description></description><atom:link href="http://magmax.org/categories/ansi-c.xml" rel="self" type="application/rss+xml"></atom:link><language>es</language><lastBuildDate>Tue, 08 Dec 2020 17:56:15 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Por qué C mola</title><link>http://magmax.org/blog/porque_c_mola/</link><dc:creator>Miguel Ángel García</dc:creator><description>&lt;div&gt;&lt;p&gt;No he podido evitar darme cuenta de que se me había pasado escribir el artículo del lenguaje que quizá más domino. Así que tenía que arreglarlo :D&lt;/p&gt;
&lt;p&gt;C es un lenguaje antiguo. Se escribió con un objetivo muy concreto: la creación de sistemas operativos; y aún más concretamente, para la creación de Unix. No solo se ideó antes de que existieran los patrones de programación, sino que ha sido gracias a C que muchos de éstos han sido inventados.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://magmax.org/blog/porque_c_mola/" class="btn btn-default"&gt;Leer más…&lt;/a&gt; (quedan 6 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>ansi c</category><category>languages</category><guid>http://magmax.org/blog/porque_c_mola/</guid><pubDate>Mon, 20 Aug 2012 00:00:00 GMT</pubDate></item><item><title>Cutre-framework de pruebas en Ansi C</title><link>http://magmax.org/blog/framework-pruebas-c/</link><dc:creator>Miguel Ángel García</dc:creator><description>&lt;div&gt;&lt;p&gt;En este caso vamos a demostrar que no hay excusa para no hacer pruebas, ya que podemos montarnos un &lt;em&gt;framework&lt;/em&gt; en un momento en cualquier lenguaje.&lt;/p&gt;
&lt;p&gt;El &lt;em&gt;framework&lt;/em&gt; no va a ser una maravilla, pero lo vamos a hacer muy rápido.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://magmax.org/blog/framework-pruebas-c/" class="btn btn-default"&gt;Leer más…&lt;/a&gt; (quedan 1 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>ansi c</category><category>ansi c testing</category><guid>http://magmax.org/blog/framework-pruebas-c/</guid><pubDate>Thu, 01 Sep 2011 00:00:00 GMT</pubDate></item><item><title>Buenas prácticas en Ansi C (1)</title><link>http://magmax.org/blog/buenas-practicas-c-1/</link><dc:creator>Miguel Ángel García</dc:creator><description>&lt;div&gt;&lt;p&gt;Hay muchas cosas a tener en cuenta cuando se desarrolla un programa. El problema es que en C estas primeras decisiones son cruciales para conseguir un poco de orden y concierto.&lt;/p&gt;
&lt;p&gt;La falta de espacios de nombres y de jerarquía hace que todo sea un cajón de sastre. La falta de clases y objetos provoca interfaces poco definidas y accesos incorrectos.&lt;/p&gt;
&lt;p&gt;Llevo unos 6 años programando en Ansi C y voy a exponer algunas de las buenas prácticas que he detectado en este tiempo.&lt;/p&gt;
&lt;p&gt;No entraré en temas de estilo, sino en cuestiones prácticas.&lt;/p&gt;
&lt;p&gt;No están todas las que son, pero son todas las que están.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://magmax.org/blog/buenas-practicas-c-1/" class="btn btn-default"&gt;Leer más…&lt;/a&gt; (quedan 5 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>ansi c</category><guid>http://magmax.org/blog/buenas-practicas-c-1/</guid><pubDate>Sat, 18 Jun 2011 00:00:00 GMT</pubDate></item><item><title>Buenas prácticas en Ansi C (2)</title><link>http://magmax.org/blog/buenas-practicas-c-2/</link><dc:creator>Miguel Ángel García</dc:creator><description>&lt;div&gt;&lt;p&gt;Tras comentar las "buenas prácticas más básicas en Ansi C":link://slug/buenas-practicas-c-1, veamos ahora las buenas prácticas cuando estamos haciendo una librería, ya sea estática o dinámica.&lt;/p&gt;
&lt;p&gt;En concreto, me centraré en la librería estática y luego pasaré a dar algunas pautas para las dinámicas.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://magmax.org/blog/buenas-practicas-c-2/" class="btn btn-default"&gt;Leer más…&lt;/a&gt; (quedan 6 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>ansi c</category><guid>http://magmax.org/blog/buenas-practicas-c-2/</guid><pubDate>Sat, 18 Jun 2011 00:00:00 GMT</pubDate></item><item><title>Atheist: Probando módulos C</title><link>http://magmax.org/blog/atheist-c/</link><dc:creator>Miguel Ángel García</dc:creator><description>&lt;div&gt;&lt;p&gt;Vamos a usar &lt;a class="reference external" href="https://savannah.nongnu.org/projects/atheist/"&gt;Atheist&lt;/a&gt;  con el módulo &lt;a class="reference external" href="http://cxxtest.tigris.org/"&gt;CxxTest&lt;/a&gt; , de manera que podamos probar un programa C.&lt;/p&gt;
&lt;p&gt;Recordemos algo que yo olvidé: &lt;a class="reference external" href="https://savannah.nongnu.org/projects/atheist/"&gt;Atheist&lt;/a&gt;  es una herramienta para pruebas de integración (que tiene como algo adicional la posibilidad de integrarse con python-testunit). Eso quiere decir que nuestras pruebas estarán en C, pero las llamaremos desde Atheist.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://magmax.org/blog/atheist-c/" class="btn btn-default"&gt;Leer más…&lt;/a&gt; (quedan 2 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>ansi c</category><category>ansi c testing</category><category>atheist</category><guid>http://magmax.org/blog/atheist-c/</guid><pubDate>Mon, 09 May 2011 00:00:00 GMT</pubDate></item></channel></rss>