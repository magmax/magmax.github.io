<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Webviews - Etiqueta - El blog de MagMax</title><link>/tags/webviews/</link><description>Webviews - Etiqueta - El blog de MagMax</description><generator>Hugo -- gohugo.io</generator><language>es</language><lastBuildDate>Sat, 07 Dec 2013 00:00:00 +0000</lastBuildDate><atom:link href="/tags/webviews/" rel="self" type="application/rss+xml"/><item><title>WebViews en el escritorio</title><link>/blog/webviews-en-el-escritorio/</link><pubDate>Sat, 07 Dec 2013 00:00:00 +0000</pubDate><author>Miguel Ángel</author><guid>/blog/webviews-en-el-escritorio/</guid><description><![CDATA[<p>La programación en móviles ha conseguido poner de moda las <a href="https://developer.android.com/reference/android/webkit/WebView.html" title="WebViews en Android" target="_blank" rel="noopener noreffer ">WebViews</a>. Esta técnica consiste en abrir un navegador y cargar la aplicación como si fuera una página web, embebida dentro del resto de la aplicación.</p>
<p>La primera vez que vi esta técnica, sin embargo, no fue en móvil, sino el cliente de <a href="https://store.steampowered.com/" title="Steam, la plataforma de videojuegos de Valve" target="_blank" rel="noopener noreffer ">Steam</a>, que se ejecutaba bajo Windows (ahora ya también está disponible para GNU/Linux). Desde entonces me picó la curiosidad sobre cómo se haría&hellip; y aquí lo tenemos.</p>
<p>Para los ejemplos usaré Python y GTK, aprovechando el post sobre <a href="/blog/micro-web-framework-en-python/" rel="">micro-framework web</a> anterior.</p>]]></description></item></channel></rss>