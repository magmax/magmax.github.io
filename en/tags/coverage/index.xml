<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>coverage on MagMax&#39;s blog</title>
    <link>https://magmax.org/en/tags/coverage/</link>
    <description>Recent content in coverage on MagMax&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Nov 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://magmax.org/en/tags/coverage/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Is Code Coverage Irrelevant?</title>
      <link>https://magmax.org/en/blog/is-code-coverage-irrelevant/</link>
      <pubDate>Tue, 17 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/en/blog/is-code-coverage-irrelevant/</guid>
      <description>
        
          &lt;p&gt;After reading the article &lt;a href=&#34;https://ronjeffries.com/articles/015-11/coverage/&#34;&gt;&amp;ldquo;Is Code Coverage Irrelevant?&amp;rdquo; by Ron Jeffries&lt;/a&gt; I feel the necessity to accept the challenge and tell what I really think about code coverage.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve being thinking for some time about writting this article&amp;hellip; So this is the best moment, I think.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/programming.jpg&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;what-does-the-coverage-means&#34;&gt;What does the coverage means?&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s start with this twit:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Two projects, one has 95% code coverage with tests, one has 45%. Youâ€™re going to be paid per bug found. Which one do you want to work on?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Well&amp;hellip; I agree most people saying it depends. I have not enough information to decide.&lt;/p&gt;
&lt;p&gt;But my first question different from other people: &lt;strong&gt;&amp;ldquo;What kind of coverage?&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Usually companies measure the coverage without thinking about it, but coverage given by different tests means different things.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unit tests coverage&lt;/strong&gt; may mean our &lt;em&gt;intention&lt;/em&gt; to test. A high coverage produced by unit tests means we have tried to test it carefully, despite it doesn&amp;rsquo;t mind we have done it really.&lt;/p&gt;
&lt;p&gt;It is very difficult to increment the coverage with unit tests. Indeed, it is very difficult to have really good unit tests.&lt;/p&gt;
&lt;p&gt;In the other hand, &lt;strong&gt;Integration tests coverage&lt;/strong&gt; show us the amount of code that &lt;strong&gt;is not tested&lt;/strong&gt; in any way. I mean: It is not a measure of goodness but a measure of doubt. You can be sure the tested code works at least in a use case, but not tested code&amp;hellip; Is a mystery. I&amp;rsquo;ve had python code failing in simple methods because of a typo, just because there were no tests.&lt;/p&gt;
&lt;p&gt;And finally, &lt;strong&gt;Acceptance tests coverage&lt;/strong&gt; show what methods are &lt;em&gt;probably&lt;/em&gt; not used or not useful. No body took care to test them, so probably there is no flow to get them and they are deprecated or they are giving unnecessary functionality.&lt;/p&gt;
&lt;p&gt;Sadly, companies trend to join all these percentages.&lt;/p&gt;
&lt;p&gt;In general, the number that tells more is the &lt;strong&gt;not covered code&lt;/strong&gt;, despite people just look to covered code.&lt;/p&gt;
&lt;h2 id=&#34;what-really-gives-a-high-coverage&#34;&gt;What really gives a high coverage?&lt;/h2&gt;
&lt;p&gt;Well&amp;hellip; it gives you probabilities.&lt;/p&gt;
&lt;p&gt;As an example, &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/ms679351%28VS.85%29.aspx&#34;&gt;FormatMessage&lt;/a&gt;, a method in Windows API, is difficult to have high coverage: too many arguments, too many flows. It would require a lot of tests. But not covered lines tell us where the code is prone to fail.&lt;/p&gt;
&lt;p&gt;The tipical &lt;code&gt;math.sqrt&lt;/code&gt; function, which returns the square root of a given number, is easy to get a 100% coverage without testing it at all: may fail with zero or negative values, or even just work just for a couple of numbers. Then, coverage tell us&amp;hellip; nothing, maybe.&lt;/p&gt;
&lt;p&gt;You can speak just about not covered code, because it is unknown.&lt;/p&gt;
&lt;p&gt;In addition, a high coverage in unit tests may mean that we have very small methods, we wasted a lot of time testing or we have very bad unit tests (being integration tests instead). Probably.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I really, really love the article &lt;a href=&#34;https://googletesting.blogspot.com.es/2010/07/code-coverage-goal-80-and-no-less.html&#34;&gt;Code coverage goal: 80% and no less!&lt;/a&gt;, by Alberto Savoia. Coverage is something to help us to be sure about what our code does and its flaws. It cannot be used as performance measurement or developer goodness.&lt;/p&gt;
&lt;p&gt;I always say: &lt;strong&gt;To have a 100% coverage is easy. The difficult part is to test it all.&lt;/strong&gt;&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
