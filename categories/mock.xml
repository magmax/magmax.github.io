<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>MagMax Blog (mock)</title><link>http://magmax.org/</link><description></description><atom:link href="http://magmax.org/categories/mock.xml" rel="self" type="application/rss+xml"></atom:link><language>es</language><lastBuildDate>Tue, 08 Dec 2020 17:56:15 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Pruebas unitarias: Mocks y Stubs</title><link>http://magmax.org/blog/mocks-y-stubs/</link><dc:creator>Miguel Ángel García</dc:creator><description>&lt;div&gt;&lt;p&gt;Cuando estamos desarrollando, es necesario probar lo que estamos haciendo. En ocasiones esto puede resultar muy difícil (y más aún cuando no se ha hecho TDD), o muy lento.&lt;/p&gt;
&lt;p&gt;En este artículo trataré de dar una introducción a la utilización de MOCKs y STUBs en estos casos.&lt;/p&gt;
&lt;p&gt;En los ejemplos usaré Java y la librería &lt;a class="reference external" href="http://code.google.com/p/mockito/"&gt;mockito&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Voy a comenzar por plantear unas premisas: Las pruebas deben ser unitarias, rápidas e inocuas (no alteran el estado inicial).&lt;/p&gt;
&lt;p&gt;&lt;a href="http://magmax.org/blog/mocks-y-stubs/" class="btn btn-default"&gt;Leer más…&lt;/a&gt; (quedan 3 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>java testing</category><category>mock</category><guid>http://magmax.org/blog/mocks-y-stubs/</guid><pubDate>Wed, 17 Nov 2010 00:00:00 GMT</pubDate></item></channel></rss>