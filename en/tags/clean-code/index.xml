<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>clean code on MagMax&#39;s blog</title>
    <link>http://example.org/en/tags/clean-code/</link>
    <description>Recent content in clean code on MagMax&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Nov 2014 00:00:00 +0000</lastBuildDate><atom:link href="http://example.org/en/tags/clean-code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Gashlycode Tinies</title>
      <link>http://example.org/en/blog/gashlycode-tinies/</link>
      <pubDate>Sat, 01 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/en/blog/gashlycode-tinies/</guid>
      <description>
        
          &lt;p&gt;I&amp;rsquo;m following the &lt;a href=&#34;https://www.coursera.org/course/softwaresec&#34;&gt;Software Security&lt;/a&gt; course at &lt;a href=&#34;https://www.coursera.org&#34;&gt;Coursera&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this course, they explain how an adversary can take advantage of code defects and how to defend from them. I&amp;rsquo;ve looking for some like this for long time.&lt;/p&gt;
&lt;p&gt;At the end of one of the videos there is a kind of poetry I liked. But I didn&amp;rsquo;t found it in Internet. So I&amp;rsquo;ve copied it here. It gathers all kind of code defects we should avoid because an adversary can try to use them.&lt;/p&gt;
&lt;p&gt;So here you are: &amp;ldquo;Gashlycode Tinies&amp;rdquo; by &lt;a href=&#34;http://www.cs.cornell.edu/andru/&#34;&gt;Andrew Myers&lt;/a&gt;, inspired by the &amp;ldquo;&lt;a href=&#34;http://en.wikipedia.org/wiki/The_Gashlycrumb_Tinies&#34;&gt;Gashlycrumb Tinies&lt;/a&gt;&amp;rdquo; (1963) by &lt;a href=&#34;http://en.wikipedia.org/wiki/Edward_Gorey&#34;&gt;Edward Gorey&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;http://example.org/images/poetry.jpg&#34;
         alt=&#34;GashlyCode tinies&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;gashlycode-tinies&#34;&gt;Gashlycode Tinies&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt; is for Amy whose &lt;strong&gt;malloc was one byte short&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;B&lt;/strong&gt; is for Basil who &lt;strong&gt;used a quadratic sort&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C&lt;/strong&gt; is for Chick who &lt;strong&gt;checked floats for equality&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;D&lt;/strong&gt; is for Desmond who &lt;strong&gt;double-freed memory&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;E&lt;/strong&gt; is for Ed whose &lt;strong&gt;exceptions weren&amp;rsquo;t handled&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;F&lt;/strong&gt; is for Franny whose &lt;strong&gt;stack pointers dangled&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;G&lt;/strong&gt; is for Glenda whose &lt;strong&gt;reads and writes raced&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;H&lt;/strong&gt; is for Hans who &lt;strong&gt;forgot the base case&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I&lt;/strong&gt; is for Ivan who &lt;strong&gt;did not initialize&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;J&lt;/strong&gt; is for Jenny who &lt;strong&gt;did not know Least Surprise&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;K&lt;/strong&gt; is for Kate whose &lt;strong&gt;inheritance depth&lt;/strong&gt; might shock&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;L&lt;/strong&gt; is for Larry who &lt;strong&gt;never released a lock&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;M&lt;/strong&gt; is for Meg who used &lt;strong&gt;negatives as unsigned&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;N&lt;/strong&gt; is for Ned with &lt;strong&gt;behavior left undefined&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;O&lt;/strong&gt; is for Olive whose index was &lt;strong&gt;off by one&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;P&lt;/strong&gt; is for Pat who ignored &lt;strong&gt;buffer overrun&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Q&lt;/strong&gt; is for Quentin whose &lt;strong&gt;numbers had overflows&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;R&lt;/strong&gt; is for Rhoda whose code left the &lt;strong&gt;rep exposed&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt; is for Sam who &lt;strong&gt;skipped retesting after wait()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;T&lt;/strong&gt; is for Tom who &lt;strong&gt;lacked TCP_NODELAY&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;U&lt;/strong&gt; is for Una whose &lt;strong&gt;functions were most verbose&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;V&lt;/strong&gt; is for Vic who &lt;strong&gt;substracted when floats were close&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;W&lt;/strong&gt; is for Winnie who &lt;strong&gt;aliased arguments&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;X&lt;/strong&gt; is for Xerxes who &lt;strong&gt;thought type casts made good sense&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Y&lt;/strong&gt; is for Yorick whose &lt;strong&gt;interface was too wide&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Z&lt;/strong&gt; is for Zack whose &lt;strong&gt;code nulls where often spied&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;some-words&#34;&gt;Some words&lt;/h2&gt;
&lt;p&gt;There are a couple of them I do not catch :D So do not surprise if you ask me and I cannot answer you.&lt;/p&gt;
&lt;p&gt;Finally, just say that I really recommend that course.&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
