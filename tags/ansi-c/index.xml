<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ansi c on El blog de MagMax</title>
    <link>https://magmax.org/tags/ansi-c/</link>
    <description>Recent content in ansi c on El blog de MagMax</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Aug 2012 00:00:00 +0000</lastBuildDate><atom:link href="https://magmax.org/tags/ansi-c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Por qué C mola</title>
      <link>https://magmax.org/blog/porque_c_mola/</link>
      <pubDate>Mon, 20 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/porque_c_mola/</guid>
      <description>
        
          &lt;p&gt;No he podido evitar darme cuenta de que se me había pasado escribir el artículo del lenguaje que quizá más domino. Así que tenía que arreglarlo :D&lt;/p&gt;
&lt;p&gt;C es un lenguaje antiguo. Se escribió con un objetivo muy concreto: la creación de sistemas operativos; y aún más concretamente, para la creación de Unix. No solo se ideó antes de que existieran los patrones de programación, sino que ha sido gracias a C que muchos de éstos han sido inventados.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/ansic.jpg&#34;
         alt=&#34;Ansi C&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;por-qué-c-mola&#34;&gt;Por qué C mola&lt;/h2&gt;
&lt;h3 id=&#34;velocidad&#34;&gt;Velocidad&lt;/h3&gt;
&lt;p&gt;Por mucho que lo intentéis, no conseguiréis mejorar la velocidad de un programa C compilado y optimizado con ningún lenguaje interpretado. Un programa C siempre será entre 10 y 100 veces más rápido.&lt;/p&gt;
&lt;p&gt;Eso es algo que saben perfectamente los creadores de lenguajes interpretados. En Python, las librerías más usadas se han reprogramado en C para mejorar su eficiencia. El propio intérprete Python está escrito en C.&lt;/p&gt;
&lt;h3 id=&#34;compilado&#34;&gt;Compilado&lt;/h3&gt;
&lt;p&gt;Los compiladores suelen utilizar técnicas de optimización que aumentan la velocidad de ejecución del programa, aunque en ocasiones pueden incrementar su tamaño. Estas técnicas pueden ser locales o globales, y permiten que el programador se centre en escribir código legible, ya que será el compilador quien realice estas mejoras a posteriori.&lt;/p&gt;
&lt;h3 id=&#34;fuertemente-tipado&#34;&gt;Fuertemente tipado&lt;/h3&gt;
&lt;p&gt;C es fuertemente tipado, por lo que podemos ahorrarnos muchas comprobaciones a lo largo de nuestro programa.&lt;/p&gt;
&lt;h3 id=&#34;acceso-directo-a-memoria&#34;&gt;Acceso directo a memoria&lt;/h3&gt;
&lt;p&gt;El acceso a memoria es directo, por lo que podemos hacer cosas realmente interesantes, como copiar grandes bloques de memoria a otra posición; cambiar un puntero, lo que producirá un cambio en todos los siguientes accesos; recorrerlos, &amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;si-se-puede-hacer-se-puede-hacer-en-c&#34;&gt;Si se puede hacer, se puede hacer en C&lt;/h3&gt;
&lt;p&gt;Cualquier cosa que se pueda programar, se puede hacer en C de forma eficiente. El problema puede ser el tiempo que lleve programarlo, pero se puede hacer.&lt;/p&gt;
&lt;h3 id=&#34;tads&#34;&gt;TADs&lt;/h3&gt;
&lt;p&gt;La diferencia entre un programador bueno y uno malo en C suelen ser los TADs (Tipos Abstractos de Datos). Es el equivalente a los objetos de otros lenguajes. Permiten embeber funcionalidad en una sola variable y, cuando es necesario, se puede ocultar el contenido de ésta mediante variables opacas.&lt;/p&gt;
&lt;h2 id=&#34;por-qué-c-no-mola&#34;&gt;Por qué C no mola&lt;/h2&gt;
&lt;h3 id=&#34;espacio-de-nombres-único&#34;&gt;Espacio de nombres único&lt;/h3&gt;
&lt;p&gt;Sin duda, la peor característica de C es que no dispone de espacios de nombres. Si le añadimos que no tiene objetos, el resultado es nombres de funciones terriblemente largos.&lt;/p&gt;
&lt;h3 id=&#34;páginas-de-códigos&#34;&gt;Páginas de códigos&lt;/h3&gt;
&lt;p&gt;C se inventó en una época en la que la memoria era cara, carísima. Por lo tanto no estaban para derrochar espacio pensando en las letras raras de cada idioma ni de hacerlo ampliable: la Ñ española, el símbolo del euro, caracteres rusos, chinos, árabes,&amp;hellip; Por eso se centraron en la lengua inglesa y describieron 256 caracteres, que podían direccionarse con un único byte. Esto es lo que se conoce como &lt;strong&gt;código ASCII&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Como las multinacionales, en concreto IBM, creían que siendo incompatibles se aseguraban la lealtad de sus clientes, decidieron crear otra distinta, que consistía en repartir de forma diferente los mismos 256 caracteres. Esto es lo que se conoce como &lt;strong&gt;código EBCDIC&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Después se dieron cuenta que cada idioma tiene sus peculiaridades, así que decidieron que ninguna persona iba a necesitar un ordenador en un idioma para escribir en otro idioma, y reutilizaron algunos símbolos, creando distintas páginas de códigos ASCII y sus homólogos EBCDIC.&lt;/p&gt;
&lt;p&gt;Para complicarlo más, los ficheros no tienen ninguna característica que indiquen en qué página de códigos se encuentran escritos (salvo en AS400, que sí dispone de esta propiedad), así que&amp;hellip; Bueno, suerte con ellos.&lt;/p&gt;
&lt;p&gt;C no tiene soporte para páginas de códigos multibyte. Es necesario utilizar librerías externas para este tipo de operaciones.&lt;/p&gt;
&lt;h3 id=&#34;gestión-de-memoria&#34;&gt;Gestión de memoria&lt;/h3&gt;
&lt;p&gt;La gestión de memoria es algo que recae en el programador. Aunque en ocasiones es algo bueno, en la mayoría de las veces puede producir &lt;em&gt;leaks&lt;/em&gt; de memoria, &lt;em&gt;buffer overflows&lt;/em&gt;, y otro tipo de accesos a memoria fuera de tiesto.&lt;/p&gt;
&lt;h3 id=&#34;goto&#34;&gt;Goto&lt;/h3&gt;
&lt;p&gt;Dado que no hay excepciones, algunos programadores utilizan el &lt;em&gt;goto&lt;/em&gt; de la muerte para saltar al final de las funciones y asegurar la liberación de la memoria. Éste es un &amp;ldquo;buen uso&amp;rdquo; del &lt;em&gt;goto&lt;/em&gt;, si no sabes hacerlo mejor.&lt;/p&gt;
&lt;p&gt;Yo siempre digo que el &lt;em&gt;goto&lt;/em&gt; es una herramienta más y que es muy útil cuando tienes una función de 500 líneas de código. En estos casos, el &lt;em&gt;goto&lt;/em&gt; no es tu mayor problema.&lt;/p&gt;
&lt;h3 id=&#34;strtok&#34;&gt;Strtok&lt;/h3&gt;
&lt;p&gt;La instrucción &lt;strong&gt;strtok&lt;/strong&gt; es la mancha negra en un lenguaje muy bien diseñado. La idea de esta función es permitir un párser de lenguajes de forma sencilla.&lt;/p&gt;
&lt;p&gt;El problema es que la instrucción tiene estado, y resulta terriblemente sencillo anidar llamadas a la función, que provocarán lecturas incorrectas.&lt;/p&gt;
&lt;p&gt;Se ganó la fama el &lt;em&gt;goto&lt;/em&gt;, pero puedo aseguraros que el mayor enemigo del programador es el &lt;em&gt;strtok&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;casting&#34;&gt;Casting&lt;/h3&gt;
&lt;p&gt;Cuando se cambia el tipo de una variable, se conoce como &amp;ldquo;&lt;strong&gt;cast&lt;/strong&gt;&amp;rdquo;. Esta técnica resulta muy útil para implementar patrones como el de variables opacas, pero es una espada de Damocles: se salta las comprobaciones de tipo del sistema, pudiendo producir errores (chungos) en tiempo de ejecución.&lt;/p&gt;
&lt;h3 id=&#34;portabilidad&#34;&gt;Portabilidad&lt;/h3&gt;
&lt;p&gt;Uno de los objetivos de C era la portabilidad del código. Se ideó precisamente en una época en la que cada máquina tenía un sistema operativo en ensamblador a medida, y su propósito era unificar la creación del sistema operativo, de manera que un compilador generara el código máquina necesario para cada familia de computadoras.&lt;/p&gt;
&lt;p&gt;La idea era buena, pero C tenía sus deficiencias y cada empresa decidió subsanarlas como le vino en gana. Como la cosa se iba de madre, decidieron sacar el estándar POSIX, de manera que se unificaran las cosas que hace el sistema operativo para utilizarse de la misma manera desde C.&lt;/p&gt;
&lt;p&gt;Sin embargo, las empresas hicieron lo que les vino en gana: IBM lo soporta perfectamente en algunas máquinas, parcialmente en otras y&amp;hellip; bueno, nada en otras. Y Microsoft, que sacó su propio &amp;ldquo;des-estándar&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;¿Queréis ejemplos? La llamada al sistema &amp;ldquo;fork&amp;rdquo;, en solaris es &amp;ldquo;fork1&amp;rdquo;, ya que &amp;ldquo;fork&amp;rdquo; hace algo ligeramente diferente apesar de tener exactamente los mismos parámetros. Resultado: &lt;em&gt;leaks&lt;/em&gt;, procesos &lt;em&gt;zombies&lt;/em&gt;, &amp;hellip;&lt;/p&gt;
&lt;p&gt;El resultado es un código que no puede usarse sin más en los distintos sistemas operativos, sino que requiere mucho tiempo de adaptación.&lt;/p&gt;
&lt;h3 id=&#34;poco-eficiente-de-programar&#34;&gt;Poco eficiente de programar&lt;/h3&gt;
&lt;p&gt;A menudo requiere mucho tiempo hacer cualquier cosa. Resulta indispensable el uso de librerías externas, tales como la libglib para poder realizar programas en tiempos aceptables.&lt;/p&gt;
&lt;p&gt;La funcionalidad que otorga la API estándar es bastante reducida.&lt;/p&gt;
&lt;h3 id=&#34;malos-sistemas-de-pruebas&#34;&gt;Malos sistemas de pruebas&lt;/h3&gt;
&lt;p&gt;Las propias características del lenguaje hacen que sea dificil realizar sistemas de pruebas unitarias eficientes. No es fácil crear &lt;strong&gt;mocks&lt;/strong&gt; ni hacer &lt;em&gt;tests&lt;/em&gt; que se encuentren automáticamente. Además, hay que compilar el código, y una vez compilado se suelen ocultar las características. Una vez compilado, no es posible acceder a las funciones de forma individual (si las opciones de compilación son correctas).&lt;/p&gt;
&lt;p&gt;Existen buenos depuradores, pero la depuración es un proceso manual que requiere mucho tiempo. Es más agradable trabajar con sistemas de pruebas que ya realizan esa depuración por nosotros.&lt;/p&gt;
&lt;h3 id=&#34;pequeño-es-mejor&#34;&gt;Pequeño es mejor&lt;/h3&gt;
&lt;p&gt;Bueno, esto no es una desventaja, sino una característica: escribir funciones pequeñas permite tener más controlada la gestión de memoria y resulta más sencillo entender el código. Esto es algo que los programadores C de verdad saben y usan.&lt;/p&gt;
&lt;p&gt;A menudo, las funciones C tienden a crecer debido a la necesidad de varias líneas de código para realizar cualquier tipo de operación compleja: acceso a variables opacas, comprobación de errores, gestión de memoria,&amp;hellip; Por lo que resulta complejo conseguir funciones de 2-3 líneas. Sin embargo, marcarse un límite de 20 líneas por función puede ser un buen ejercicio de autocontrol.&lt;/p&gt;
&lt;h2 id=&#34;conclusión&#34;&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;El lenguaje de programación C provocó un antes y un después. Hay gente que lo odia y gente que lo ama, aunque abundan más los primeros que los segundos.&lt;/p&gt;
&lt;p&gt;En mi opinión, C es un lenguaje para conocer y respetar, de la misma manera que se respeta a un anciano: por muy rápido y listo que te creas, él cuenta con la experiencia.&lt;/p&gt;
&lt;p&gt;Saber C siempre es útil, aunque no tenga objetos y parezca completamente distinto de tu lenguaje favorito.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Cutre-framework de pruebas en Ansi C</title>
      <link>https://magmax.org/blog/framework-pruebas-c/</link>
      <pubDate>Thu, 01 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/framework-pruebas-c/</guid>
      <description>
        
          &lt;p&gt;En este caso vamos a demostrar que no hay excusa para no hacer pruebas, ya que podemos montarnos un &lt;em&gt;framework&lt;/em&gt; en un momento en cualquier lenguaje.&lt;/p&gt;
&lt;p&gt;El &lt;em&gt;framework&lt;/em&gt; no va a ser una maravilla, pero lo vamos a hacer muy rápido.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/ansic.jpg&#34;
         alt=&#34;Ansi C&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;qué-es-lo-que-queremos&#34;&gt;¿Qué es lo que queremos?&lt;/h2&gt;
&lt;p&gt;Realmente sólo necesitamos que nos facilite comprobaciones y que nos muestre un resultado al final. Como es algo sencillito, asumiremos que no vamos aprobar nada concurrente.&lt;/p&gt;
&lt;h2 id=&#34;contando&#34;&gt;Contando&lt;/h2&gt;
&lt;p&gt;Por eso comenzaremos con un par de variables globales. Estoy en contra de las variables globales, pero esto no va a llegar a producción, ni se va a generalizar. Tan solo es un ejemplo. Veamos&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; errors &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; tests &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y ya tenemos una variable para contar errores y otra para contar pruebas.&lt;/p&gt;
&lt;p&gt;Hagamos una función que incremente el número de tests:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;increase_tests&lt;/span&gt; ()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;{
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;     tests &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (tests &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;           printf (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;           printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (tests &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;           printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, tests);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hemos dicho que va a ser sencillito, no que vaya a ser feo. Cada prueba pintaremos un punto; cada 10 pruebas, un símbolo &amp;ldquo;+&amp;rdquo; y cada 100 pruebas lo indicaremos y saltaremos a otra línea.&lt;/p&gt;
&lt;h2 id=&#34;imprimiendo-el-resultado&#34;&gt;Imprimiendo el resultado&lt;/h2&gt;
&lt;p&gt;Ahora vamos a imprimir el resultado:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;print_report&lt;/span&gt; () {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;     printf (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;     printf (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Total Tests: %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, tests );
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;     printf (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tests Passed: %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, tests &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; errors);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;     printf (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Errors Found: %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, errors );
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (errors &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; )
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;           printf (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Congratulations, no error was found !!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Nada de otro mundo: el número total de pruebas, los que han pasado y los que no.&lt;/p&gt;
&lt;h2 id=&#34;comprobaciones&#34;&gt;Comprobaciones&lt;/h2&gt;
&lt;p&gt;Ahora es el turno de comprobar que las cosas funcionan como deben. Vamos a crearnos nuestros &lt;em&gt;assert&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;assert_equals&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; message ) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;    increase_tests ();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; b)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;    errors &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;    printf (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;*** ASSERTION ERROR *** %d != %d : %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, a, b, message);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;assert_not_equals&lt;/span&gt; ( &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; message ) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;    increase_tests ();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; b)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;    errors &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;    printf (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;*** ASSERTION ERROR *** %d == %d : %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, a, b, message);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;programa-principal&#34;&gt;Programa principal&lt;/h2&gt;
&lt;p&gt;Ahora vamos con el programa principal, que lo único que hará será ejecutar una cosa debajo de otra:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;argv[])
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;{
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;    execute_tests();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;    print_report();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; errors;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y sólo nos queda implementar los tests propiamente dichos. La función &lt;code&gt;execute_tests&lt;/code&gt; será una lista de llamadas a tests y éstos se parecerán a lo que sigue:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test1&lt;/span&gt;() {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;    assert_equals(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Deberían ser iguales, pero no lo son&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;    assert_not_equals(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Deberían ser distintos, pero no lo son&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y ya tenemos nuestro propio &lt;em&gt;framework&lt;/em&gt; de pruebas:D&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Buenas prácticas en Ansi C (1)</title>
      <link>https://magmax.org/blog/buenas-practicas-c-1/</link>
      <pubDate>Sat, 18 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/buenas-practicas-c-1/</guid>
      <description>
        
          &lt;p&gt;Hay muchas cosas a tener en cuenta cuando se desarrolla un programa. El problema es que en C estas primeras decisiones son cruciales para conseguir un poco de orden y concierto.&lt;/p&gt;
&lt;p&gt;La falta de espacios de nombres y de jerarquía hace que todo sea un cajón de sastre. La falta de clases y objetos provoca interfaces poco definidas y accesos incorrectos.&lt;/p&gt;
&lt;p&gt;Llevo unos 6 años programando en Ansi C y voy a exponer algunas de las buenas prácticas que he detectado en este tiempo.&lt;/p&gt;
&lt;p&gt;No entraré en temas de estilo, sino en cuestiones prácticas.&lt;/p&gt;
&lt;p&gt;No están todas las que son, pero son todas las que están.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/ansic.jpg&#34;
         alt=&#34;Ansi C&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;nombrado-de-variables&#34;&gt;Nombrado de variables&lt;/h2&gt;
&lt;p&gt;Las variables deben tener nombres cortos, concisos y descriptivos de su funcionalidad.&lt;/p&gt;
&lt;p&gt;Como regla general, no deben indicar su tipo, ya que si cambiamos el tipo tendríamos que cambiar el nombre a la variable y esto no es lógico.&lt;/p&gt;
&lt;p&gt;Como he dicho, &amp;ldquo;por regla general&amp;rdquo;. Hay algunos casos en los que sí me gusta
establecer un carácter o dos indicando el tipado. Por ejemplo, cuando programo
usando &lt;a href=&#34;http://es.wikipedia.org/wiki/Java_Native_Interface&#34;&gt;JNI&lt;/a&gt; , me gusta utilizar una simple &lt;code&gt;j&lt;/code&gt; para mostrar qué son &amp;ldquo;tipos java&amp;rdquo; y qué no, a fin de no mezclarlos a la ligera.&lt;/p&gt;
&lt;h2 id=&#34;ámbito-de-las-variables&#34;&gt;Ámbito de las variables&lt;/h2&gt;
&lt;p&gt;Las variables deben ser &lt;em&gt;locales&lt;/em&gt;, y no es mala idea definirlas siempre al principio de las funciones.&lt;/p&gt;
&lt;p&gt;Las variables globales son un error. No deben usarse en ninguna circunstancia. Una variable global impide poder transformar un módulo en una librería, ya que no se puede reusar correctamente.&lt;/p&gt;
&lt;h2 id=&#34;nombrado-de-funciones&#34;&gt;Nombrado de funciones&lt;/h2&gt;
&lt;p&gt;Las funciones suelen ser un problema, ya que no deben coincidir en tooooooodo nuestro entorno.&lt;/p&gt;
&lt;p&gt;Por lo tanto, yo suelo utilizar un sistema de nombrado jerárquico, tratando de evitar nombres excesivamente largos. Es un tira y afloja un poco difícil, y a veces no funciona, pero es lo mejor que he encontrado.&lt;/p&gt;
&lt;p&gt;En este sistema jerárquico comienzo por una abreviatura de la librería que estoy usando, separada del resto por un guión bajo. Si la librería tuviera distintas funcionalidades, entonces diferenciaría cada una de ellas con otra palabra indicando a cuál de éstas hace referencia, terminando con el nombre de la función propiamente dicho en camelcase, comenzando en minúsculas. Después de toda esta verborrea, uno ejemplitos:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Librería libtypeutilities.a
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;types_bigint_new&lt;/span&gt; ();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;types_bigint_calculateChecksum&lt;/span&gt; ();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;types_string_concat&lt;/span&gt;();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Librería libencryption.a
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;crypt_aes_new&lt;/span&gt; ();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;crypt_md5_get&lt;/span&gt; ();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ámbito-de-las-funciones&#34;&gt;Ámbito de las funciones&lt;/h2&gt;
&lt;p&gt;Cuando una función sólo se utiliza en el archivo en el que se implementa,
debería indicarse con la palabra &lt;code&gt;static&lt;/code&gt;, que para eso está.&lt;/p&gt;
&lt;p&gt;Cuando quereremos utilizar una función que está en otro archivo, nunca la
declararemos en el archivo.c, sino que crearemos un archivo.h para tal efecto.
La razón es muy sencilla: si cambia la función, nuestro programa no lo detectará
hasta devolver un &lt;code&gt;segmentation fault&lt;/code&gt;, como poco.&lt;/p&gt;
&lt;p&gt;La mejor manera de defendernos de estos problemas es definir las funciones que
se comparten en archivos de cabecera e incluir éstos tanto en el archivo que las
utiliza como en el que las define. De esta manera el compilador detectará
cualquier incongruencia y no dejará seguir, en lugar de encontrarnos el problema
durante la ejecución.&lt;/p&gt;
&lt;h2 id=&#34;tamaño-de-las-funciones&#34;&gt;Tamaño de las funciones&lt;/h2&gt;
&lt;p&gt;Las funciones deben ser pequeñas. Más pequeñas. Aún más pequeñas.&lt;/p&gt;
&lt;p&gt;Es una lástima que en C no sea posible tener funciones de 5-6 líneas en casi ningún caso, ya que la comprobación de nulos y alguna cosa más ya nos hace superar este límite. Si hay que reservar y liberar memoria, nos pasaremos con toda seguridad.&lt;/p&gt;
&lt;p&gt;Pero un límite de 40-50 líneas es más que asumible en la mayoría de los casos.&lt;/p&gt;
&lt;h2 id=&#34;el-goto&#34;&gt;El &amp;ldquo;goto&amp;rdquo;&lt;/h2&gt;
&lt;p&gt;Siempre se ha dicho que usar &lt;code&gt;goto&lt;/code&gt; es de malos programadores. Realmente sólo se trata de una herramienta más, que debe utilizarse con cuidado.&lt;/p&gt;
&lt;p&gt;Se puede utilizar siempre y cuando no se salte a ningún sitio extraño. Puede venir bien para saltar al final de una función, a la zona donde se libera memoria.&lt;/p&gt;
&lt;p&gt;Y una vez he dicho todo esto&amp;hellip; ¿Para qué #### quieres usar un #### &amp;ldquo;goto&amp;rdquo; en una función de 40 líneas? Estoy seguro de que no te hace falta.&lt;/p&gt;
&lt;h2 id=&#34;programación-por-contrato&#34;&gt;Programación por contrato&lt;/h2&gt;
&lt;p&gt;Es una buena práctica realizar comprobaciones al comienzo de la función y
terminar la ejecución de ésta. No importa si hay varios &lt;code&gt;return&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Eso sí: Una vez se ha reservado memoria, será mejor evitar todo tipo de &lt;code&gt;return&lt;/code&gt; hasta el final.&lt;/p&gt;
&lt;p&gt;Una sola función sólo debería reservar memoria en un punto, ya sea a una o varias variables.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;funcion&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; param)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;{
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// definición de variables
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// comprobaciones al comienzo
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( param &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; )
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// cuerpo de la función
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;gestión-de-memoria&#34;&gt;Gestión de memoria&lt;/h2&gt;
&lt;p&gt;Libera siempre memoria al mismo nivel que la reserves. Si tienes una función que reserva memoria, crea una que la libere en el mismo archivo. Aunque sólo haga un &lt;em&gt;free&lt;/em&gt;. Quedará todo más homogéneo.&lt;/p&gt;
&lt;h2 id=&#34;protección-de-archivos-de-cabecera&#34;&gt;Protección de archivos de cabecera&lt;/h2&gt;
&lt;p&gt;La maraña de archivos de cabecera puede ser peligrosa, ya que es sencillo llegar a incluir varias veces el mismo archivo.&lt;/p&gt;
&lt;p&gt;Por eso se debe proteger siempre el archivo de cabecera:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Archivo &amp;#34;a.h&amp;#34;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifndef _A_H_
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define _A_H_
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// rellene aquí sus contenido
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* _A_H_ */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;He visto casos en los que se protege la inclusión en lugar de proteger el archivo de cabecera. La comparación que he puesto es como proteger los tarjeteros y no los cajeros automáticos. Lo primero es que hay muchos más, y lo segundo, que es sencillísimo violar la seguridad.&lt;/p&gt;
&lt;h2 id=&#34;número-de-funciones-por-archivo&#34;&gt;Número de funciones por archivo&lt;/h2&gt;
&lt;p&gt;Nuevamente tenemos un problema, ya que en C tienden a salir muuuuchas funciones en seguida.&lt;/p&gt;
&lt;p&gt;No daré una cifra, sino una regla: Todas las funciones de un mismo archivo deben estar relacionadas en cuanto a la funcionalidad.&lt;/p&gt;
&lt;h2 id=&#34;portabilidad-los-defines&#34;&gt;Portabilidad: los defines&lt;/h2&gt;
&lt;p&gt;Es muy común encontrarse funciones que sólo están disponibles en un sistema operativo determinado y usamos &amp;ldquo;&lt;em&gt;#define&lt;/em&gt;&amp;rdquo; para realizar la operación de una manera o de otra.&lt;/p&gt;
&lt;p&gt;Pues bien&amp;hellip; debemos acostumbrarnos a evitar los &lt;code&gt;define&lt;/code&gt; dentro de nuestro código.&lt;/p&gt;
&lt;p&gt;Irán al comienzo del archivo, definiendo macros o constantes, y después sólo utilizaremos estas macros o constantes.&lt;/p&gt;
&lt;h2 id=&#34;macros-y-constantes&#34;&gt;Macros y constantes&lt;/h2&gt;
&lt;p&gt;Deben ser cortas y claras.&lt;/p&gt;
&lt;p&gt;Su tamaño máximo es una línea.&lt;/p&gt;
&lt;p&gt;Si tienen demasiada funcionalidad, deben transformarse en funciones.&lt;/p&gt;
&lt;p&gt;A ser posible, una macro no debe relacionarse con otras macros (aunque sí pueden hacerlo con constantes).&lt;/p&gt;
&lt;p&gt;En las macros, siempre protegeremos los argumentos entre paréntesis:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define max(a,b)  (a)&amp;gt;(b) ? (a) : (b)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y nunca llamaremos a una macro con parámetros que contengan operadores unarios. Si queréis saber por qué, compilad esto:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define MIN(a,b) a&amp;lt;b?a:b
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;{
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;   printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;min %d, %d = %d&amp;#34;&lt;/span&gt;, a, b, MIN (a&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;, b&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;));
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;   printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;min %d, %d = %d&amp;#34;&lt;/span&gt;, a, b, MIN (a&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;, b&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;));
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;   printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;min %d, %d = %d&amp;#34;&lt;/span&gt;, a, b, MIN (a&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;, b&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;));
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;El resultado será:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;min &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;min &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;min &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;¿Sabríais decir por qué? Probablemente no sea el resultado esperado o, al menos, no es el más intuitivo.&lt;/p&gt;
&lt;h2 id=&#34;continuará&#34;&gt;Continuará&lt;/h2&gt;
&lt;p&gt;Esto ha sido el primer plato. En el siguiente se explicarán las &lt;a href=&#34;https://magmax.org/blog/buenas-practicas-c-2/&#34;&gt;buenas
prácticas al hacer librerías en ansi C&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Admito sugerencias.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Buenas prácticas en Ansi C (2)</title>
      <link>https://magmax.org/blog/buenas-practicas-c-2/</link>
      <pubDate>Sat, 18 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/buenas-practicas-c-2/</guid>
      <description>
        
          &lt;p&gt;Tras comentar las &lt;a href=&#34;https://magmax.org/blog/buenas-practicas-c-1/&#34;&gt;buenas prácticas más básicas en Ansi C&lt;/a&gt;, veamos ahora las buenas prácticas cuando estamos haciendo una librería, ya sea estática o dinámica.&lt;/p&gt;
&lt;p&gt;En concreto, me centraré en la librería estática y luego pasaré a dar algunas pautas para las dinámicas.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/ansic.jpg&#34;
         alt=&#34;Ansi C&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;encapsulación&#34;&gt;Encapsulación&lt;/h2&gt;
&lt;p&gt;El objetivo de lo que voy a exponer consiste en aislar en la medida de lo posible nuestra librería con el fin de que sea lo más reutilizable posible.&lt;/p&gt;
&lt;p&gt;Veremos cómo proteger a nuestra librería del mal programador, así como al mal programador de nuestra librería :D&lt;/p&gt;
&lt;p&gt;Hay que diferenciar aquí dos tipos de archivos de cabecera: los internos, utilizados por nuestros archivos &lt;code&gt;.c&lt;/code&gt;, y los externos, que será la forma que tengan otros programas de utilizar nuestra librería.&lt;/p&gt;
&lt;h2 id=&#34;macros&#34;&gt;Macros&lt;/h2&gt;
&lt;p&gt;Quedan completamente prohibidas las macros en los archivos de cabecera externos.&lt;/p&gt;
&lt;p&gt;Hay distintas razones para esto: no forman parte como tales de nuestra librería, no son fácilmente mantenibles, y son más difíciles de depurar.&lt;/p&gt;
&lt;h2 id=&#34;enumerados&#34;&gt;Enumerados&lt;/h2&gt;
&lt;p&gt;No es buena idea utilizar enumerados en los archivos de cabecera externos. Sinceramente, me gustaría decir lo contrario, pero dependiendo de las opciones de compilación podemos conseguir verdaderos poltergeist por culpa de los enumerados.&lt;/p&gt;
&lt;p&gt;Por lo tanto, para las constantes es mejor utilizar &lt;code&gt;#define&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;En los internos dará igual, porque para cuando lleguen al usuario de nuestra librería ya están compilados.&lt;/p&gt;
&lt;h2 id=&#34;sólo-lo-indispensable&#34;&gt;Sólo lo indispensable&lt;/h2&gt;
&lt;p&gt;En los archivos de cabecera externos se pondrá exclusivamente lo indispensable:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cuanta más funcionalidad exportemos, más tendremos que mantener.&lt;/li&gt;
&lt;li&gt;Cuanto más complejo sea, más preguntas recibiremos.&lt;/li&gt;
&lt;li&gt;Cuanto más sencillo sea, más feliz el usuario de la libreria.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;estructuras&#34;&gt;Estructuras&lt;/h2&gt;
&lt;p&gt;Nunca deis la oportunidad al programador de poder acceder a una estructura de vuestra librería.&lt;/p&gt;
&lt;p&gt;Para ello yo suelo utilizar la siguiente técnica: en las cabeceras externas no hay ninguna estructura, pero sí punteros a void; en las funciones que exporto, lo primero que hago es transformar los punteros a void a estructuras internas (que pueden estar en archivos de cabecera internos).&lt;/p&gt;
&lt;p&gt;Veamos un ejemplo.&lt;/p&gt;
&lt;p&gt;Archivo &lt;code&gt;ejemplo.h&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// archivo de cabecera externo &amp;#34;ejemplo.h&amp;#34;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; ejemplo_t &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;ejemplo_t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ejemplo_new&lt;/span&gt; ();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;       &lt;span style=&#34;color:#a6e22e&#34;&gt;ejemplo_destroy&lt;/span&gt;(ejemplo_t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; t);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Archivo &lt;code&gt;ejemplo.c&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;ejemplo.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; b;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;} ejemplo_tp;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;ejemplo_t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ejemplo_new&lt;/span&gt; () {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;  ejemplo_tp&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; result;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;  result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calloc (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(ejemplo_tp));
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// inicializar result
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ejemplo_destroy&lt;/span&gt;(ejemplo_t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; vejemplo) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;  ejemplo_tp&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ejemplo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ejemplo_tp&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) vejemplo;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// liberar variables internas de &amp;#34;ejemplo&amp;#34;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  free (ejemplo);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Aquí hay algunas convenciones de nombrado que yo suelo utilizar, aunque seguro que podéis encontrar otras mejores.&lt;/p&gt;
&lt;p&gt;Lo primero, es decir que el &lt;code&gt;_t&lt;/code&gt; de la estructura me hace referencia a &amp;ldquo;tipo&amp;rdquo;, con el fin de diferenciar lo que es un tipo de lo que es una variable. Se me hace muy raro ver cosas como:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;ejemplo data; &lt;span style=&#34;color:#75715e&#34;&gt;// raro. Además, ¿cómo llamas a la variable?
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;ejemplo_t ejemplo; &lt;span style=&#34;color:#75715e&#34;&gt;// se diferencia claramente el tipo de la variable.
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ejemplo)(data); &lt;span style=&#34;color:#75715e&#34;&gt;// ¿Estamos multiplicando variables o haciendo un cast?
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Después vemos un &lt;code&gt;_tp&lt;/code&gt; que yo utilizo para nombrar mis &lt;em&gt;tipos privados&lt;/em&gt;, para diferenciarlos de los que estarán en las cabeceras externas.&lt;/p&gt;
&lt;p&gt;Para terminar, en mis métodos suelo llamar a las variables de los tipos públicos con una uve (&lt;code&gt;v&lt;/code&gt;) delante, con el fin de avisarme que ése es el &lt;code&gt;void&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;getters-y-setters&#34;&gt;Getters y setters&lt;/h2&gt;
&lt;p&gt;Como no dejamos al usuario acceder a nuestra estructura a mano, no podrá realizar modificaciones sobre las variables. Por lo tanto, será necesario utilizar getters y setters para este fin.&lt;/p&gt;
&lt;p&gt;Y una vez dicho eso&amp;hellip; No debería ser lo habitual utilizar estos getters y setters, ya que la librería no debe ser un almacén de datos, sino una unidad de proceso. Es decir: lo normal no debe ser modificar valores desde fuera, sino desde dentro, como resultado de operaciones. Es evidente que, aun así, siempre necesitaremos algún getter y setter, aunque trataremos de evitarlos.&lt;/p&gt;
&lt;p&gt;Es bastante común tener que enviar mucha información de configuración. Ésta puede encapsularse en una estructura pública y recibirla en el constructor.&lt;/p&gt;
&lt;h2 id=&#34;orientación-a-objetostads&#34;&gt;Orientación a objetos/TADs&lt;/h2&gt;
&lt;p&gt;En C no tenemos Orientación a objetos, pero sí tenemos TADs (Tipos Abstractos de Datos). Toda librería debería ser un TAD.&lt;/p&gt;
&lt;p&gt;Por esta razón, será normal encontrar en nuestras librerías un &lt;em&gt;constructor&lt;/em&gt; y un &lt;em&gt;destructor&lt;/em&gt;. Antes ya puse un ejemplo de esto.&lt;/p&gt;
&lt;p&gt;Si dejamos al usuario acceder a nuestras variables, tarde o temprano tendremos un alto acoplamiento.&lt;/p&gt;
&lt;h2 id=&#34;creciendo&#34;&gt;Creciendo&lt;/h2&gt;
&lt;p&gt;Si necesitamos ampliar nuestras estructuras públicas, siempre deberían hacerlo por debajo. De esta manera se seguirá manteniendo compatibilidad hacia atrás.&lt;/p&gt;
&lt;p&gt;A menudo suele ser buena idea utilizar un número de versión o el tamaño de la estructura en uno de sus propios campos, con el fin de determinar que estamos utilizando ésa versión. El problema de estas aproximaciones es que dependemos del buen uso que le dé el programador.&lt;/p&gt;
&lt;p&gt;Una solución mejor es transformar esa estructura pública en un nuevo TAD que ya manejaremos nosotros, evitando cualquier tipo de imprudencia o descuido.&lt;/p&gt;
&lt;p&gt;De todas maneras&amp;hellip; ¡¡ya dije que no usárais estructuras públicas!! :P&lt;/p&gt;
&lt;h2 id=&#34;librerías-dinámicas&#34;&gt;Librerías dinámicas&lt;/h2&gt;
&lt;p&gt;Es importante que nuestra librería dinámica mantenga en su archivo de cabecera público tipos de datos con forma de puntero a función para facilitar la vida a quien vaya a usarla, ya que no se puede acceder directamente a las funciones, pero siempre habrá que cargarlas.&lt;/p&gt;
&lt;p&gt;En el ejemplo anterior:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// archivo de cabecera externo &amp;#34;ejemplodll.h&amp;#34;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; ejemplo_t &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; ejemplo_t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; PF_ejemplo_new) ();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;void&lt;/span&gt;       (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; PF_ejemplo_destroy) ();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;fachadas&#34;&gt;Fachadas&lt;/h2&gt;
&lt;p&gt;La creación de una librería dinámica es una invitación a la duplicación de código. Todos los programas que quieran utilizarla tendrán que cargar la librería, cargar sus funciones en variables/estructuras internas, realizar casts complejos, gestionar errores, etc.&lt;/p&gt;
&lt;p&gt;Por lo tanto, es buena idea proporcionar una librería estática cuya función
consista en acceder a la librería dinámica. Es el resultado de aplicar el
&lt;a href=&#34;http://en.wikipedia.org/wiki/Facade_pattern&#34;&gt;patrón fachada&lt;/a&gt; o &lt;em&gt;facade&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Esto facilitará mucho la vida al usuario. Veamos un ejemplo (continuando con el ejemplo de más arriba, que amplío un poco):&lt;/p&gt;
&lt;h3 id=&#34;dll&#34;&gt;DLL&lt;/h3&gt;
&lt;p&gt;Archivo &lt;code&gt;ejemplo.h&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// archivo de cabecera externo &amp;#34;ejemplo.h&amp;#34;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; ejemplo_t &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; ejemplo_t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; PF_ejemplo_new) ();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;void&lt;/span&gt;       (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; PF_ejemplo_destroy) ();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;void&lt;/span&gt;       (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; PF_ejemplo_operacion1) (ejemplo_t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; t);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;void&lt;/span&gt;       (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; PF_ejemplo_operacion2) (ejemplo_t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; t, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Archivo &lt;code&gt;ejemplo.c&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;ejemplo.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; b;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;} ejemplo_tp;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;ejemplo_t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ejemplo_new&lt;/span&gt; () {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;  ejemplo_tp&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; result;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;  result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calloc (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(ejemplo_tp));
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// inicializar result
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ejemplo_destroy&lt;/span&gt;(ejemplo_t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; vejemplo) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;  ejemplo_tp&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ejemplo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ejemplo_tp&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) vejemplo;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// liberar variables internas de &amp;#34;ejemplo&amp;#34;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  free (ejemplo);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ejemplo_operacion1&lt;/span&gt;(ejemplo_t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; vejemplo) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24&lt;/span&gt;  ejemplo_tp&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ejemplo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ejemplo_tp&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) vejemplo;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// operar
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ejemplo_operacion2&lt;/span&gt;(ejemplo_t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; vejemplo, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30&lt;/span&gt;  ejemplo_tp&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ejemplo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ejemplo_tp&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) vejemplo;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// operar
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;lib&#34;&gt;Lib&lt;/h3&gt;
&lt;p&gt;Archivo &lt;code&gt;lejemplo.h&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// archivo de cabecera &amp;#34;lejemplo.h&amp;#34;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt;    lejemplo_t &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;ejemplo_t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lejemplo_new&lt;/span&gt; ();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;       &lt;span style=&#34;color:#a6e22e&#34;&gt;ljemplo_destroy&lt;/span&gt;(lejemplo_t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; t);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;       &lt;span style=&#34;color:#a6e22e&#34;&gt;lejemplo_operacion1&lt;/span&gt; (lejemplo_t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; t);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;       &lt;span style=&#34;color:#a6e22e&#34;&gt;lejemplo_operacion2&lt;/span&gt; (lejemplo_t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; t, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Archivo &lt;code&gt;lejemplo.c&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// archivo de implementación, &amp;#34;lejemplo.c&amp;#34;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#import &amp;#34;ejemplo.h&amp;#34;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#import &amp;#34;lejemplo.h&amp;#34;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;  PF_ejemplo_new new;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;  PF_ejemplo_destroy destroy;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;  PF_ejemplo_operacion1 operacion1;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;  PF_ejemplo_operacion2 operacion2;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;} functions_tp;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; dllhandle;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;  ejemplo_t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; internal;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;  functions_tp functions;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;} lejemplo_tp;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;ejemplo_t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lejemplo_new&lt;/span&gt; () {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19&lt;/span&gt;  ejemplo_tp&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calloc (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(lejemplo_tp));
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22&lt;/span&gt;  result&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dllhandle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dlopen (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ejemplo.so&amp;#34;&lt;/span&gt;, RT_LAZY);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23&lt;/span&gt;  result&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;functions.new &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (PF_ejemplo_new) dlsym (result&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dllhandle, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ejemplo_new&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24&lt;/span&gt;  result&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;functions.destroy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (PF_ejemplo_destroy) dlsym (result&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dllhandle, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ejemplo_destroy&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25&lt;/span&gt;  result&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;functions.operacion1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (PF_ejemplo_operacion1) dlsym (result&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dllhandle, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ejemplo_operacion1&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26&lt;/span&gt;  result&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;functions.operacion2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (PF_ejemplo_operacion2) dlsym (result&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dllhandle, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ejemplo_operacion2&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28&lt;/span&gt;  result&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;internal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;funcitons.new ();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// añadir control de errores allá donde haga falta
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lejemplo_destroy&lt;/span&gt;(lejemplo_t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; vejemplo) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36&lt;/span&gt;  lejemplo_tp&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ejemplo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (lejemplo_tp&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) vejemplo;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38&lt;/span&gt;  ejemplo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;functions.destroy(ejemplo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;internal);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39&lt;/span&gt;  dlclose (ejemplo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;dllhandle);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40&lt;/span&gt;  free (ejemplo);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Añadir comprobaciones de nulos y demás.
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lejemplo_operacion1&lt;/span&gt; (lejemplo_t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; t) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45&lt;/span&gt;  lejemplo_tp&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ejemplo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (lejemplo_tp&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) vejemplo;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47&lt;/span&gt;  ejemplo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;functions.operacion1 (ejemplo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;internal);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lejemplo_operacion2&lt;/span&gt; (lejemplo_t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; t, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51&lt;/span&gt;  lejemplo_tp&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ejemplo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (lejemplo_tp&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) vejemplo;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53&lt;/span&gt;  ejemplo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;functions.operacion2 (ejemplo&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;internal, a);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Se podría hacer hasta una carga &amp;ldquo;&lt;em&gt;lazy&lt;/em&gt;&amp;rdquo;, esperando a cargar las funciones en el momento de su utilización, pero eso puede implicar una gestión de errores más compleja (con lo indicado, la gestión de errores está centralizada al inicializar).&lt;/p&gt;
&lt;p&gt;Utilizando esta librería, al usuario se le quitan muchos dolores de cabeza, ya que tendría que realizar eso mismo de todas maneras.&lt;/p&gt;
&lt;h2 id=&#34;olvidos-descuidos-etc&#34;&gt;Olvidos, descuidos, etc.&lt;/h2&gt;
&lt;p&gt;Seguramente he olvidado comentar muchísimas cosas, pero creo que ya me he extendido lo suficiente.&lt;/p&gt;
&lt;p&gt;Se aceptan sugerencias para completar todos estos consejos.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Atheist: Probando módulos C</title>
      <link>https://magmax.org/blog/atheist-c/</link>
      <pubDate>Mon, 09 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/atheist-c/</guid>
      <description>
        
          &lt;p&gt;Vamos a usar &lt;a href=&#34;https://savannah.nongnu.org/projects/atheist/&#34;&gt;Atheist&lt;/a&gt;  con el módulo &lt;a href=&#34;http://cxxtest.tigris.org/&#34;&gt;CxxTest&lt;/a&gt; , de manera que podamos probar un programa C.&lt;/p&gt;
&lt;p&gt;Recordemos algo que yo olvidé: &lt;a href=&#34;https://savannah.nongnu.org/projects/atheist/&#34;&gt;Atheist&lt;/a&gt;  es una herramienta para pruebas de integración (que tiene como algo adicional la posibilidad de integrarse con python-testunit). Eso quiere decir que nuestras pruebas estarán en C, pero las llamaremos desde Atheist.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/test.jpg&#34;
         alt=&#34;Testing&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Para comenzar, escribimos nuestras pruebas C. Primero sólo vamos a comprobar la interacción entre Atheist y CxxTest (lo saco de los ejemplos de Atheist):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// archivo single_ok.cc
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cxxtest/TestSuite.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyTestSuite&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; CxxTest&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;TestSuite
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;{
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; testAddition( &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; )
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;   {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;      TS_ASSERT( &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; );
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;      TS_ASSERT_EQUALS( &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; );
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;   }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ahora creamos el archivo de pruebas atheist:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#archivo cxxtest.test
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;CxxTest(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$testdir/single_ok.cc&amp;#34;&lt;/span&gt;, )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y ejecutamos:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ atheist .
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; OK &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; TaskCase: ./cxxtest.test
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;  ALL OK!  &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; - 1.28s - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; test - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; task
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;un-ejemplo-más-real&#34;&gt;Un ejemplo más real&lt;/h2&gt;
&lt;p&gt;Ahora voy a probar un ejemplo algo más real. Voy a hacer una pequeña función que calcula el factorial de un número. Para ello, necesitaré un archivo con mi función, un archivo de cabecera con la declaración de mi función, y el archivo de pruebas. Vamos al lío:&lt;/p&gt;
&lt;p&gt;Archivo &lt;code&gt;factorial.h&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// archivo factorial.h
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifndef FACTORIAL_H
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define FACTORIAL_H
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifdef  __cplusplus
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt; {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;factorial&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifdef __cplusplus
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Archivo &lt;code&gt;factorial.c&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//factorial.c
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;factorial.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;factorial&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; factorial (n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Archivo &lt;code&gt;factorial.cc&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// archivo test_factorial.cc
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cxxtest/TestSuite.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;factorial.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyTestSuite&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; CxxTest&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;TestSuite
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;{
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; test_factorial_1(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;  {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;    TS_ASSERT_EQUALS ( factorial(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; );
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;  }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_factorial_2&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;  {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;    TS_ASSERT_EQUALS ( factorial(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; );
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;  }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_factorial_3&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;  {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19&lt;/span&gt;    TS_ASSERT_EQUALS ( factorial(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; );
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20&lt;/span&gt;  }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_factorial_4&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23&lt;/span&gt;  {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24&lt;/span&gt;    TS_ASSERT_EQUALS ( factorial(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; );
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25&lt;/span&gt;  }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27&lt;/span&gt;};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Archivo &lt;code&gt;cxxtest.test&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#archivo cxxtest.test
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;CxxTest(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&amp;#39;$&lt;/span&gt;testdir&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;single_ok.cc&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, )
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;CxxTest(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&amp;#39;$&lt;/span&gt;testdir&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;test_factorial.cc&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;        compiling_flags&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;I&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;testdir&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;        objs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&amp;#39;$&lt;/span&gt;testdir&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;factorial.o&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;]})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Tened en cuenta que, para ejecutarlo, necesitaremos compilar &lt;code&gt;factorial.o&lt;/code&gt;, por lo que tendremos:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ gcc -c factorial.c -o factorial.o
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;$ atheist cxxtest.test -e
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; OK &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; TaskCase: ./cxxtest.test
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;  ALL OK!  &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; - 2.47s - &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; tests - &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; tasks
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;unas-explicaciones&#34;&gt;Unas explicaciones&lt;/h3&gt;
&lt;p&gt;Cuento un poco algunas cosas &amp;ldquo;raras&amp;rdquo; que se ven en el código.&lt;/p&gt;
&lt;p&gt;Por un lado, vemos que en el archivo &lt;code&gt;factorial.h&lt;/code&gt; Hemos incluido unas marcas extrañas:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifdef  __cplusplus
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt; {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;...
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifdef __cplusplus
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Esto se hace así para que C++ &amp;ldquo;entienda&amp;rdquo; que lo que se va a definir ahí es C. Cuando compilamos código C++, las funciones se renombran añadiéndoles un prefijo y un sufijo, por lo que hay que indicarle que eso es código C para que el compilador pueda encontrar las funciones.&lt;/p&gt;
&lt;p&gt;Por otra parte, hemos necesitado indicarle a Atheist algunos parámetros extra, como son los flags de compilación (sólo hemos necesitado la ruta de los .h), y qué objetos se han utilizado.&lt;/p&gt;
&lt;h3 id=&#34;transformando-atheist-en-una-herramienta-de-generación&#34;&gt;Transformando Atheist en una herramienta de generación&lt;/h3&gt;
&lt;p&gt;No es lo más recomendable, pero podríamos usar Atheist para compilar:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#archivo cxxtest.test
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;CxxTest(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&amp;#39;$&lt;/span&gt;testdir&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;single_ok.cc&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, )
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;Command( &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;CC&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;g&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; make  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;testdir&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;factorial.o&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, shell&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CxxTest(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&amp;#39;$&lt;/span&gt;testdir&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;test_factorial.cc&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt;        compiling_flags&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;I&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;testdir&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9&lt;/span&gt;        objs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&amp;#39;$&lt;/span&gt;testdir&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;factorial.o&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;]})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;detección-de-errores&#34;&gt;Detección de errores&lt;/h2&gt;
&lt;p&gt;Es normal que ocurra algún problema en la ejecución de CxxTest, ya que realiza pasos muy complejos. Por ello recomiendo utilizar siempre Atheist con las opciones &amp;ldquo;-e&amp;rdquo; (mostrar salida de error) y &amp;ldquo;-o&amp;rdquo; (mostrar salida estándar).&lt;/p&gt;
&lt;p&gt;De esta manera será más sencillo descubrir errores de compilación de CxxTest.&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
