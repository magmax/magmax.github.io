<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>MagMax Blog (testing)</title><link>http://magmax.org/</link><description></description><atom:link href="http://magmax.org/categories/testing.xml" rel="self" type="application/rss+xml"></atom:link><language>es</language><lastBuildDate>Tue, 08 Dec 2020 17:56:20 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Testing en django: mejoras</title><link>http://magmax.org/blog/testing-en-django-mejoras/</link><dc:creator>Miguel Ángel García</dc:creator><description>&lt;div&gt;&lt;p&gt;A menudo, cuando me pongo a hacer algo en &lt;a href="https://www.djangoproject.com/" title="High-level Python Web framework"&gt;Django&lt;/a&gt; y escribo mis primeros tests, los noto pesados y desordenados. Me resulta difícil diferenciar entre tests unitarios, de integracción y de aceptación.&lt;/p&gt;
&lt;p&gt;De la misma manera, suele ser una aventura añadir &lt;em&gt;coverage&lt;/em&gt;, ya que nunca me acuerdo de cómo se hace.&lt;/p&gt;
&lt;p&gt;En este artículo describiré cómo hacer ambas cosas.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://magmax.org/blog/testing-en-django-mejoras/" class="btn btn-default"&gt;Leer más…&lt;/a&gt; (quedan 5 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>django</category><category>python</category><category>testing</category><guid>http://magmax.org/blog/testing-en-django-mejoras/</guid><pubDate>Mon, 24 Mar 2014 00:00:00 GMT</pubDate></item><item><title>Python Tornado: Web Testing</title><link>http://magmax.org/blog/python-tornado-2/</link><dc:creator>Miguel Ángel García</dc:creator><description>&lt;div&gt;&lt;p&gt;Una vez tenemos los &lt;a href="http://magmax.org/blog/python-tornado" title="Introducción básica a Python Tornado"&gt;conocimientos básicos de Tornado&lt;/a&gt;, lo lógico es seguir añadiendo características del &lt;em&gt;framework&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;En este caso voy a añadir una de las características más importantes: el entorno de pruebas. En mi opinión, es siempre lo primero que se debería enseñar, mucho antes de otras cosas como el sistema de &lt;em&gt;location&lt;/em&gt; (idiomas, etc.), acceso a servicios de terceros (google, facebook, twitter, oauth, ...) y otras cosas molonas.&lt;/p&gt;
&lt;p&gt;Partiremos de los conocimientos anteriores y pondremos un ejemplo sencillo de uso de esta herramienta.&lt;/p&gt;
&lt;p&gt;Se tratará de pruebas de integración. &lt;strong&gt;No&lt;/strong&gt; se utilizará un &lt;em&gt;Browser&lt;/em&gt;, y &lt;strong&gt;podremos &lt;em&gt;mockear&lt;/em&gt;&lt;/strong&gt; lo que nos haga falta (aunque en este artículo no se utilizarán &lt;em&gt;mocks&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;&lt;a href="http://magmax.org/blog/python-tornado-2/" class="btn btn-default"&gt;Leer más…&lt;/a&gt; (quedan 4 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>python</category><category>testing</category><category>tornado</category><guid>http://magmax.org/blog/python-tornado-2/</guid><pubDate>Fri, 03 May 2013 00:00:00 GMT</pubDate></item><item><title>Selenium y QA Automation: tests</title><link>http://magmax.org/blog/selenium-y-qa-automation-2/</link><dc:creator>Miguel Ángel García</dc:creator><description>&lt;div&gt;&lt;p&gt;En mi anterior post sobre &lt;a class="reference external" href="http://magmax.org/blog/selenium-y-qa-automation"&gt;Selenium y QA Automation&lt;/a&gt; comenzamos a ver cómo utilizar &lt;a class="reference external" href="http://docs.seleniumhq.org/"&gt;Selenium/Webdriver&lt;/a&gt; para la automatización de tareas web. En esta ocasión lo adaptaremos para su uso más habitual: la creación de pruebas de aceptación.&lt;/p&gt;
&lt;p&gt;Mediante ejemplos en Python adaptaremos nuestro ejercicio anterior para ejecutarlo como tests. Así mismo, refactorizaremos para obtener un entorno de pruebas sencillo, extensible y fácil de utilizar.&lt;/p&gt;
&lt;p&gt;Tras este artículo, no debería ser difícil utilizar un sistema de integración contínua para la automatización de pruebas de aceptación.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://magmax.org/blog/selenium-y-qa-automation-2/" class="btn btn-default"&gt;Leer más…&lt;/a&gt; (quedan 4 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>selenium</category><category>testing</category><guid>http://magmax.org/blog/selenium-y-qa-automation-2/</guid><pubDate>Wed, 13 Mar 2013 00:00:00 GMT</pubDate></item><item><title>Integración contínua: BuildBot</title><link>http://magmax.org/blog/buildbot/</link><dc:creator>Miguel Ángel García</dc:creator><description>&lt;div&gt;&lt;p&gt;Como prometí en el &lt;a href="http://magmax.org/blog/jenkins"&gt;artículo anterior&lt;/a&gt;, es hora de presentar otra alternativa para la Integración Contínua (&lt;em&gt;CI&lt;/em&gt;, o &lt;em&gt;Continuous Integration&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;No es la única alternativa, pero yo sólo he trasteado con &lt;a href="http://jenkins-ci.org/"&gt;Jenkins&lt;/a&gt; y con &lt;a href="http://buildbot.net/"&gt;BuildBot&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://magmax.org/blog/buildbot/" class="btn btn-default"&gt;Leer más…&lt;/a&gt; (quedan 10 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>agile</category><category>buildbot</category><category>continuous integration</category><category>testing</category><guid>http://magmax.org/blog/buildbot/</guid><pubDate>Thu, 02 Aug 2012 00:00:00 GMT</pubDate></item><item><title>Integración continua: Jenkins</title><link>http://magmax.org/blog/jenkins/</link><dc:creator>Miguel Ángel García</dc:creator><description>&lt;div&gt;&lt;p&gt;Ahora está de moda eso de la integración continua (en adelante, &lt;em&gt;CI&lt;/em&gt;. de &lt;em&gt;Continuous Integration&lt;/em&gt;). Pero... ¿Qué es eso de la &lt;em&gt;CI&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;Contaré a grandes rasgos algunos aspectos y después me centraré en la configuración de un trabajo con jenkins.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://magmax.org/blog/jenkins/" class="btn btn-default"&gt;Leer más…&lt;/a&gt; (quedan 5 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>agile</category><category>continuous integration</category><category>jenkins</category><category>testing</category><guid>http://magmax.org/blog/jenkins/</guid><pubDate>Sat, 21 Jul 2012 00:00:00 GMT</pubDate></item><item><title>Unit tests en Java (II)</title><link>http://magmax.org/blog/java-unit-test-2/</link><dc:creator>Miguel Ángel García</dc:creator><description>&lt;div&gt;&lt;p&gt;En el último artículo comencé a explicar algunas cosas sobre los &lt;a class="reference external" href="http://magmax.org/blog/java-unit-test"&gt;unit tests en Java&lt;/a&gt;. Este artículo comienza donde lo dejamos en el anterior.&lt;/p&gt;
&lt;p&gt;En este caso veremos cómo emplear las TestSuites para poder evolucionar el modelo anterior.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://magmax.org/blog/java-unit-test-2/" class="btn btn-default"&gt;Leer más…&lt;/a&gt; (quedan 3 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>java testing</category><category>testing</category><guid>http://magmax.org/blog/java-unit-test-2/</guid><pubDate>Mon, 16 Jul 2012 00:00:00 GMT</pubDate></item><item><title>Unit tests en Java</title><link>http://magmax.org/blog/java-unit-test/</link><dc:creator>Miguel Ángel García</dc:creator><description>&lt;div&gt;&lt;p&gt;El otro día me di cuenta de que no había escrito ningún artículo sobre tests unitarios en Java. ¡Eso hay que arreglarlo!&lt;/p&gt;
&lt;p&gt;Tengo artículos más complejos pero, a veces, volver a la base ayuda a tener una mejor visión de conjunto. Además, nunca se sabe lo que se puede aprender de lo básico.&lt;/p&gt;
&lt;p&gt;Aprovecharé para hacer incapié en las características de los buenos tests.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Actualización 2012-07-11&lt;/em&gt;: Añado árbol de directorios y cabeceras indicando a qué archivo pertenecen.
&lt;em&gt;Actualización 2012-07-13&lt;/em&gt;: Gracias a un comentario de David Marín, descubro que la parte de los proveedores de datos es completamente errónea y la arreglo.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://magmax.org/blog/java-unit-test/" class="btn btn-default"&gt;Leer más…&lt;/a&gt; (quedan 6 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>java testing</category><category>testing</category><guid>http://magmax.org/blog/java-unit-test/</guid><pubDate>Mon, 09 Jul 2012 00:00:00 GMT</pubDate></item><item><title>Code Coverage o cómo engañarte a ti mismo</title><link>http://magmax.org/blog/codecoverage/</link><dc:creator>Miguel Ángel García</dc:creator><description>&lt;div&gt;&lt;p&gt;Viene siendo muy habitual pensar que las pruebas son sinónimo de corrección y que es importante tener una gran cobertura de código. Voy a tratar de demostrar que esto no es así.&lt;/p&gt;
&lt;p&gt;Ojo... con ello no digo que estén mal, sino que es necesario saber de qué estamos hablando. Yo soy partidario de un número de pruebas adecuado y de un porcentaje de cobertura... suficiente.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://magmax.org/blog/codecoverage/" class="btn btn-default"&gt;Leer más…&lt;/a&gt; (quedan 1 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>code coverage</category><category>testing</category><guid>http://magmax.org/blog/codecoverage/</guid><pubDate>Mon, 05 Dec 2011 00:00:00 GMT</pubDate></item><item><title>No comentes: ¡Asegura!</title><link>http://magmax.org/blog/asegura/</link><dc:creator>Miguel Ángel García</dc:creator><description>&lt;div&gt;&lt;p&gt;Hoy he descubierto mucho de ese gran desconocido que es &lt;em&gt;assert&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Resulta que tenía a mi alcance una herramienta de depuración bastante fuerte y aún no he hecho uso de ella.&lt;/p&gt;
&lt;p&gt;Con el fin de solucionar este problema, escribo este artículo, aunque no escribiré nada que no se encuentre en la &lt;a class="reference external" href="http://download.oracle.com/javase/6/docs/technotes/guides/language/assert.html"&gt;Documentación de Java sobre Assert&lt;/a&gt;  o la &lt;a class="reference external" href="http://docs.python.org/release/2.5.2/ref/assert.html"&gt;documentación Python&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;&lt;a href="http://magmax.org/blog/asegura/" class="btn btn-default"&gt;Leer más…&lt;/a&gt; (quedan 3 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>java testing</category><category>python testing</category><category>test</category><category>testing</category><guid>http://magmax.org/blog/asegura/</guid><pubDate>Sun, 14 Aug 2011 00:00:00 GMT</pubDate></item><item><title>Atheist, No seas crédulo ¡¡Prueba!!</title><link>http://magmax.org/blog/atheist-no-seas-credulo/</link><dc:creator>Miguel Ángel García</dc:creator><description>&lt;div&gt;&lt;p&gt;Hay dos tipos de programadores: los creyentes y los ateos.&lt;/p&gt;
&lt;p&gt;Los creyentes se _creen_ tan buenos que no necesitan pruebas. Tienen fe en su forma de escribir código.&lt;/p&gt;
&lt;p&gt;Los ateos, necesitan _pruebas_ para poder creer.&lt;/p&gt;
&lt;p&gt;Precisamente por esta razón nace &lt;a class="reference external" href="https://savannah.nongnu.org/projects/atheist/"&gt;Atheist&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;&lt;a href="http://magmax.org/blog/atheist-no-seas-credulo/" class="btn btn-default"&gt;Leer más…&lt;/a&gt; (quedan 5 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>atheist</category><category>test</category><category>testing</category><guid>http://magmax.org/blog/atheist-no-seas-credulo/</guid><pubDate>Sat, 13 Aug 2011 00:00:00 GMT</pubDate></item></channel></rss>