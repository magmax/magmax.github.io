<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on El blog de MagMax</title>
    <link>https://magmax.org/tags/python/</link>
    <description>Recent content in python on El blog de MagMax</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 20 Nov 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://magmax.org/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Plugins en Python</title>
      <link>https://magmax.org/blog/plugins-en-python/</link>
      <pubDate>Sun, 20 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/plugins-en-python/</guid>
      <description>Siempre me ha gustado escribir aplicaciones extensibles, pero picarme todo un sistema de plugins me ha parecido tedioso.
Por eso he intentado buscar librerías que me ayuden a crear plugins, aunque siempre he tenido problemas para la distribución de éstos, como me ha pasado con Yapsy.
La verdad es que me he sentido como un auténtico estúpido al descubrir que Python tiene un sistema para escribir plugins muy sencillo de usar.</description>
    </item>
    
    <item>
      <title>ipython autoreload</title>
      <link>https://magmax.org/blog/ipython-autoreload/</link>
      <pubDate>Fri, 10 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/ipython-autoreload/</guid>
      <description>Cuando alguien está chalao, escribe un intérprete de su lenguaje favorito.
Cuando alguien está loco del todo, escribe ipython.
Resulta difícil describir qué es ipython&amp;hellip; Ya que resulta difícil saber qué no es. Quedémonos con que es un intérprete de Python con esteroides.
Uno de esos esteroides es que nos permite recargar automáticamente los módulos en cuanto cambia algún fichero. Y aquí os explico cómo hacerlo.
  Método manual Arrancamos ipython y cargamos la extensión &amp;ldquo;autoreload&amp;rdquo;:</description>
    </item>
    
    <item>
      <title>Calculando la letra del DNI</title>
      <link>https://magmax.org/blog/calculando-la-letra-del-dni/</link>
      <pubDate>Thu, 06 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/calculando-la-letra-del-dni/</guid>
      <description>Hay pequeños algoritmos que pueden ser muy útiles, como calcular la letra del DNI.
Puede valer tanto para solicitar el NIF y calcularla como para algo mucho más útil y menos usado: para validar que el DNI es válido.
Vamos a ver cómo hacerlo en Python, Ruby y Javascript
  Algoritmo Acordaos de esta secuencia: TRWAGMYFPDXBNJZSQVHLCKE Ésta es la clave para calcular la letra de un NIF y obtener el DNI.</description>
    </item>
    
    <item>
      <title>Yapsy, un sistema de plugins pythónico</title>
      <link>https://magmax.org/blog/yapsy-un-sistema-de-plugins-pythonico/</link>
      <pubDate>Thu, 09 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/yapsy-un-sistema-de-plugins-pythonico/</guid>
      <description>Me gustan los programas que pueden evolucionar. Un reproductor de vídeo debe evolucionar a medida que lo hacen los formatos de vídeo, adaptándose a los nuevos.
Además, me gustan los programas que puedo extender. Añadir nueva funcionalidad que los desarrolladores originales no pensaron en su momento.
Éstas son dos de las aplicaciones de los plugins, y podemos tenerlas de una forma muy sencilla en Python mediante Yapsy
Yapsy nos ayuda a la gestión de los plugins mediante la búsqueda, carga y gestión automáticas.</description>
    </item>
    
    <item>
      <title>Peewee, un ORM para Python</title>
      <link>https://magmax.org/blog/peewee-un-orm-para-python/</link>
      <pubDate>Thu, 16 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/peewee-un-orm-para-python/</guid>
      <description>Estoy acostumbrándome a usar Django para casi todo, y su ORM para acceder a la base de datos. Es muy completo y permite evitar tener que escribir SQL a mano, añadiendo la posibilidad de cambiar de motor de base de datos sin que sea traumático.
Sin embargo, a veces necesito guardar cosas en disco desde programas de línea de órdenes, y no me parece bien depender de Django para algo así.</description>
    </item>
    
    <item>
      <title>Python distribuido: Celery</title>
      <link>https://magmax.org/blog/python-distribuido-celery/</link>
      <pubDate>Fri, 20 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/python-distribuido-celery/</guid>
      <description>Ahora están de modas las arquitecturas SOA . Estas arquitecturas consisten en pequeños servicios muy específicos, de manera que interactúan unos con otros.
En esta ocasión voy a contar cómo utilizar Celery para crear una arquitectura SOA.
  Qué es Celery No puede decirse que sea un sistema de comunicaciones, ya que el sistema de comunicaciones es RabbitMQ, Redis, etc. Como usa uno de ellos, no puede ser un sistema de colas de mensajes.</description>
    </item>
    
    <item>
      <title>Django lo hizo un mago: plantillas y contextos</title>
      <link>https://magmax.org/blog/django-lo-hizo-un-mago-plantillas-y-contextos/</link>
      <pubDate>Thu, 12 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/django-lo-hizo-un-mago-plantillas-y-contextos/</guid>
      <description>En el tutorial Django lo hizo un mago expliqué los conceptos básicos de Django]. En Django lo hizo un mago: paginación y detalle añadimos paginación y la ventana de detalle. En esta ocasión vamos a ponerlo bonito mediante plantillas, y crearemos cierto estilo añadiendo también contextos.
Para los que sepan algo de Django, no es necesario seguir los tutoriales anteriores, aunque sí es recomendable para los más novatos :D
  Cómo leer este artículo Nuevamente, hay tres maneras de leer este artículo.</description>
    </item>
    
    <item>
      <title>Django lo hizo un mago: paginación y detalle</title>
      <link>https://magmax.org/blog/django-lo-hizo-un-mago-paginacion-y-detalle/</link>
      <pubDate>Thu, 26 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/django-lo-hizo-un-mago-paginacion-y-detalle/</guid>
      <description>En el artículo anterior Django lo hizo un mago creamos un entorno básico con un listado de posts para un blog. En esta ocasión vamos a añadir más funcionalidad.
En concreto, veremos cómo visualizar cada post (lo que llamaremos detalle), y añadiremos paginación.
Pero antes un extra: Añadir elementos aleatorios de pruebas fácilmente con sampledatahelper.
  Cómo leer este artículo Hay tres maneras de leer este artículo.
 Continuando tras la lectura de Django lo hizo un mago.</description>
    </item>
    
    <item>
      <title>Django lo hizo un mago</title>
      <link>https://magmax.org/blog/django-lo-hizo-un-mago/</link>
      <pubDate>Mon, 23 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/django-lo-hizo-un-mago/</guid>
      <description>En las películas, a menudo, se encuentran errores imposibles de explicar: un tarro que se derrama y aparece lleno, gafas que aparecen y desaparecen, espadas que se transforman en martillos&amp;hellip; En esos casos decimos que &amp;ldquo;lo hizo un mago&amp;rdquo;.
En esta ocasión no es que un mago haya hecho Django, sino que hay un equipo impresionante detrás. Pero sí es cierto que Django hace mucha magia.
Me gustaría comenzar aquí un pequeño tutorial rápido para usar Django, utilizando toda la magia.</description>
    </item>
    
    <item>
      <title>Retrospectiva a la #PyConEs2014 (2)</title>
      <link>https://magmax.org/blog/pycones-2014-2/</link>
      <pubDate>Mon, 19 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/pycones-2014-2/</guid>
      <description>Con dos meses de retraso, ahí va la segunda parte de esta retrospectiva.
Siento que éste artículo no tenga la calidad habitual, pero añadir enlaces es lo que más tiempo me consume y&amp;hellip; sinceramente, tengo muchos proyectos en la cabeza y poco tiempo. Algunos de ellos tienen que ver con la web y con artículos :)
  Más charlas Ticketea Miquel e Iñaki nos contaron algunas cosas de esta empresa, que comenzó con 4 personas, y han crecido hasta 12.</description>
    </item>
    
    <item>
      <title>Retrospectiva a la #PyConEs2014 (1)</title>
      <link>https://magmax.org/blog/pycones-2014/</link>
      <pubDate>Sun, 09 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/pycones-2014/</guid>
      <description>Este año he tenido la suerte de asistir a la PyConEs.
En este momento estoy en el tren de vuelta a casa. Con todo reciente, os contaré cómo lo he vivido yo.
  ¿Qué es la PyConEs? La PyConEs, o Python Conference España, consiste en un ciclo de conferencias sobre Python que se convoca anualmente.
Este año ha tenido lugar en Zaragoza, contando con 3 tracks y 2 días de duración.</description>
    </item>
    
    <item>
      <title>Publicando artefactos Python</title>
      <link>https://magmax.org/blog/publicando-artefactos-python/</link>
      <pubDate>Wed, 14 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/publicando-artefactos-python/</guid>
      <description>Hace un par de semanas que comencé un proyectillo Python que se ha transformado en mi primer paquete pypi serio. Bueno, realmente se ha transformado en dos paquetes, lo que me ha hecho darme cuenta de lo repetitivo de algunas tareas&amp;hellip; Y cómo no, he decidido compartirlo aquí.
Así aprovecharé para contar algunas lecciones aprendidas, ahorrando así tiempo la próxima vez y ayudando a otros. De hecho, ya estoy preparando el siguiente XD</description>
    </item>
    
    <item>
      <title>Testing en django: mejoras</title>
      <link>https://magmax.org/blog/testing-en-django-mejoras/</link>
      <pubDate>Mon, 24 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/testing-en-django-mejoras/</guid>
      <description>A menudo, cuando me pongo a hacer algo en Django y escribo mis primeros tests, los noto pesados y desordenados. Me resulta difícil diferenciar entre tests unitarios, de integracción y de aceptación.
De la misma manera, suele ser una aventura añadir coverage, ya que nunca me acuerdo de cómo se hace.
En este artículo describiré cómo hacer ambas cosas.
  Entorno Lo primero es crear un entorno con lo que vamos a necesitar.</description>
    </item>
    
    <item>
      <title>Aprender es duro (retrospectiva 2014)</title>
      <link>https://magmax.org/blog/aprender-es-duro/</link>
      <pubDate>Sat, 11 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/aprender-es-duro/</guid>
      <description>Estoy muy cabreado.
Llevo estudiando sin parar para hacer páginas chulas en tiempos decentes durante años.
Pues bien. Cada vez tengo más la impresión de que he perdido el tiempo.
Además, siempre he odiado Javascript. Pues resulta que está de moda.
  Me puse a estudiar Tornado y YUI. De hecho, escribí un par de artículos sobre Tornado. Ambos frameworks son cojonudos, pero para prototipar estoy convencido de haberme equivocado.</description>
    </item>
    
    <item>
      <title>WebViews en el escritorio</title>
      <link>https://magmax.org/blog/webviews-en-el-escritorio/</link>
      <pubDate>Sat, 07 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/webviews-en-el-escritorio/</guid>
      <description>La programación en móviles ha conseguido poner de moda las WebViews. Esta técnica consiste en abrir un navegador y cargar la aplicación como si fuera una página web, embebida dentro del resto de la aplicación.
La primera vez que vi esta técnica, sin embargo, no fue en móvil, sino el cliente de Steam, que se ejecutaba bajo Windows (ahora ya también está disponible para GNU/Linux). Desde entonces me picó la curiosidad sobre cómo se haría&amp;hellip; y aquí lo tenemos.</description>
    </item>
    
    <item>
      <title>Micro-framework web en Python</title>
      <link>https://magmax.org/blog/micro-web-framework-en-python/</link>
      <pubDate>Sun, 01 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/micro-web-framework-en-python/</guid>
      <description>En esta ocasión necesito un pequeño servidor web. Nada de otro mundo. Poco más que el SimpleHTTPServer. Podría utilizar tornado, django, bottle o cualquiera de tantos&amp;hellip; Pero no necesito tanta parafernalia y no quiero añadir más dependencias.
Y como parece que hoy en día todo el mundo tiene que crearse su propio framework web, pues aquí está el mío, ea.
Debo admitir que he aprendido muchas cosas sobre por qué se hacen como se hacen los otros frameworks.</description>
    </item>
    
    <item>
      <title>Webdriver: crackeando la web de Renfe</title>
      <link>https://magmax.org/blog/webdriver-practico/</link>
      <pubDate>Sat, 16 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/webdriver-practico/</guid>
      <description>Todos los días tengo que coger el tren para ir a trabajar. Hablando con un amigo que también tiene que ir en tren, se me ocurrió comentarle que la seguridad de los abonos es muy mala, ya que hay que formalizar cada viaje y sacar un billete, donde se muestra el número de abono y se ocultan los 3 últimos dígitos del DNI y la letra. Insistí en que era capaz de sacarme viajes con su abono si me daba uno de sus billetes&amp;hellip;</description>
    </item>
    
    <item>
      <title>Python avanzado</title>
      <link>https://magmax.org/blog/python-avanzado/</link>
      <pubDate>Mon, 30 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/python-avanzado/</guid>
      <description>Tras el post de Python básico viene el de Python avanzado. Sin embargo, la diferencia entre uno y otro es bastante grande. Advierto a los novatos que esta parte es mucho más difícil. Me he planteado hacer un &amp;ldquo;Python intermedio&amp;rdquo;, pero creo que esa parte la dará la experiencia. Recomiendo practicar haciendo pequeños programas en Python antes de intentar abordar esta parte.
Si alguien tiene dudas, siempre puede volver a consultar el artículo de Python básico.</description>
    </item>
    
    <item>
      <title>Python básico</title>
      <link>https://magmax.org/blog/python-basico/</link>
      <pubDate>Mon, 16 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/python-basico/</guid>
      <description>Mis seguidores habituales ya saben por qué me gusta Python. Sin embargo, ya hay varias personas que me han comentado que no se leen algunos artículos míos porque están en Python, he decidido escribir un pequeño artículo introductorio.
No esperéis grandes explicaciones. Aquí va lo básico para aprenderlo en 15 minutos. Si queréis saber más, se tiene que dedicar mucho tiempo, y para ello hay mogollón de libros estupendos.
Veremos aquí las estructuras básicas y alguna plantilla para comenzar.</description>
    </item>
    
    <item>
      <title>Python Tornado: Web Testing</title>
      <link>https://magmax.org/blog/python-tornado-2/</link>
      <pubDate>Fri, 03 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/python-tornado-2/</guid>
      <description>Una vez tenemos los conocimientos básicos de Tornado, lo lógico es seguir añadiendo características del framework.
En este caso voy a añadir una de las características más importantes: el entorno de pruebas. En mi opinión, es siempre lo primero que se debería enseñar, mucho antes de otras cosas como el sistema de location (idiomas, etc.), acceso a servicios de terceros (google, facebook, twitter, oauth, &amp;hellip;) y otras cosas molonas.
Partiremos de los conocimientos anteriores y pondremos un ejemplo sencillo de uso de esta herramienta.</description>
    </item>
    
    <item>
      <title>Python Tornado</title>
      <link>https://magmax.org/blog/python-tornado/</link>
      <pubDate>Mon, 22 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/python-tornado/</guid>
      <description>En esta ocasión trataré de ver cómo utilizar un framework de red, como es el caso de python-tornado.
Crearemos un site pequeño y básico, lo justo como para tener una idea de sus posibilidades.
En cuanto al uso, yo últimamente lo utilizo para todo: desde pequeñas aplicaciones web hasta herramientas de soporte en el escritorio, donde necesito un servidor.
  Lo básico Cuando comenzamos con python-tornado, necesitamos crear una estructura básica:</description>
    </item>
    
    <item>
      <title>Selenium y QA Automation</title>
      <link>https://magmax.org/blog/selenium-y-qa-automation/</link>
      <pubDate>Fri, 08 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/selenium-y-qa-automation/</guid>
      <description>En el mundo de la automatización de pruebas, Selenium arrasa. Existen otras alternativas, pero lo cierto es que todo el mundo utiliza Selenium.
Hay distintas formas de utilizarlo, y aquí veremos algunas de ellas. He elegido Python porque es mi lenguaje favorito y Java porque es el lenguaje en el que está hecho Selenium.
  ¿Qué es? Selenium es un conjunto de herramientas que permiten la automatización de navegaciones Web.</description>
    </item>
    
    <item>
      <title>Programación funcional</title>
      <link>https://magmax.org/blog/functional-programming/</link>
      <pubDate>Wed, 16 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/functional-programming/</guid>
      <description>Últimamente se ha puesto de moda la &amp;ldquo;programación funcional&amp;rdquo;. En este artículo voy a intentar explicar lo que es, con ejemplos.
Parece mentira que siempre volvamos a los orígenes.
  Qué es Existen 3 paradigmas distintos de programación: estructurada, orientada a objetos y funcional.
En el jurásico de la informática la gente escribía el código como le venía en gana, usando el famoso GO TO cada vez que quería reutilizar código.</description>
    </item>
    
    <item>
      <title>Python 3 es lento (I)</title>
      <link>https://magmax.org/blog/python3-slow/</link>
      <pubDate>Fri, 19 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/python3-slow/</guid>
      <description>Cansado de leer que Python 3 es lento, he decidido ver cómo de lento es. El resultado me ha dejado de una piedra.
He tratado de utilizar ejemplos lo más pequeños posible, con la idea de evitar otras posibles mejores implementaciones. Además, he ejecutado el código varias veces, para evitar posibles efectos de carga del sistema, mostrando aquí alguna de las medidas más representativas.
Admito que la sección más importante sea, probablemente, las conclusiones.</description>
    </item>
    
    <item>
      <title>Por qué python mola</title>
      <link>https://magmax.org/blog/porque-python-mola/</link>
      <pubDate>Sun, 24 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/porque-python-mola/</guid>
      <description>Después de escribir el artículo Por qué Java mola, no tengo más remedio que escribir el de por qué Python mola.
Antes de comenzar, debo advertiros que Python es mi lenguaje favorito. Y es como buscarle defectos a tu mejor amigo.
Actualización 2012-06-28: dándole la razón a Alejandro, definí incorrectamente el polimorfismo. Cambiado. Actualización 2012-07-10: gracias a @javisantana por añadir problemas de python: GIL, packaging y librería de red. Aprovecho para revisar también la variable self, que admitía ambigüedad.</description>
    </item>
    
    <item>
      <title>Python: tu directorio en la web</title>
      <link>https://magmax.org/blog/python-web-2/</link>
      <pubDate>Sat, 09 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/python-web-2/</guid>
      <description>No hace demasiado que escribí el artículo Python en la web, pero me ha surgido una necesidad y ese mismo artículo me ha echado una mano XD
Resulta que quiero realizar pruebas sobre mi web, para ofrecer más calidad, y he encontrado linkchecker , pero no funciona bien con directorios, ya que no traduce rutas absolutas a rutas relativas y tendría que tener mi web colgando de /.
¿Cuál es la solución?</description>
    </item>
    
    <item>
      <title>El compilador de Python desde dentro</title>
      <link>https://magmax.org/blog/python-compiler-internals/</link>
      <pubDate>Sun, 20 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/python-compiler-internals/</guid>
      <description>Los viernes hay formación en la oficina. El viernes pasado le tocó dar una charla a Goran, y nos estuvo contando cómo funciona PHP por dentro.
No he podido quitarme la charla de la cabeza en todo el fin de semana, y he investigado cómo funciona Python por dentro. Goran se quejaba de que hay muy poca información sobre PHP, y tampoco hay tanta sobre Python. Pero encontré este artículo, me gustó y he tenido que traducirlo.</description>
    </item>
    
    <item>
      <title>Python curses</title>
      <link>https://magmax.org/blog/python-curses/</link>
      <pubDate>Sat, 12 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/python-curses/</guid>
      <description>Python no deja de sorprenderme cada día. Y es increíble la cantidad de cosas que trae &amp;ldquo;de serie&amp;rdquo;. A veces me da la sensación de que le saco muy poco provecho.
Hace relativamente poco que me puse a pensar: Si casi todo lo que hago lo hago en consola, ¿por qué no hacerlo más bonito con curses? Pero no me decidía. El otro día decidí ponerme a ello, y he terminado con un sabor agridulce.</description>
    </item>
    
    <item>
      <title>Crea tu propio lenguaje de programación con... python</title>
      <link>https://magmax.org/blog/python-tokenizer/</link>
      <pubDate>Mon, 14 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/python-tokenizer/</guid>
      <description>Ayer descubrí algo que me hizo flipar en colores: cómo crear tu propio DSL(Domain Specific Language) en Python. Y sólo necesitamos una clase del API estándar de Python.
En concreto la clase es &amp;ldquo;tokenize&amp;rdquo;, y es que resulta que python pone a nuestro alcance su propio párser del lenguaje&amp;hellip; Vamos, que nos da ya el analizador léxico y sintáctico terminados. El semántico ya es cosa nuestra (o no, porque podemos utilizarlo también XD).</description>
    </item>
    
    <item>
      <title>Python en la web</title>
      <link>https://magmax.org/blog/python-web/</link>
      <pubDate>Mon, 03 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/python-web/</guid>
      <description>Recientemente se me están ocurriendo muchos micro-proyectos en red, y cada vez estoy más convencido que es interesante plantearse siempre la opción ReST , frente a otro tipo de middleware.
  Podéis pensar: ¿Y me voy a crear todo un servidor web para esta tontería? Pues mi respuesta es que sí, ya que ReST ofrece muchas ventajas frente al resto:
 Multilenguaje. Al fin y al cabo, consiste en mensajes de texto plano.</description>
    </item>
    
    <item>
      <title>Python: Asignaciones con valores por defecto.</title>
      <link>https://magmax.org/blog/python-asignaciones/</link>
      <pubDate>Sat, 24 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/python-asignaciones/</guid>
      <description>Hace algún tiempo que Manolowar me presentó al operador Elvis de Groovy.
  Este operador, con la forma: ?: debe su nombre a que parece un emoticono con tupé, similar a Elvis Presley. Puede utilizarse como en C o Java (por separado) o todo junto. Cuando está todo junto quiere decir algo así como: &amp;ldquo;Si el valor no es falso, me lo asignas, y si no, me asignas esto otro&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Virtualenv: aislando nuestro entorno python</title>
      <link>https://magmax.org/blog/virtualenv/</link>
      <pubDate>Thu, 11 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/virtualenv/</guid>
      <description>Con el fin de facilitarnos el despliegue, siempre resulta interesante crear un entorno aislado para realizar pruebas. Lo ideal sería disponer de un entorno en local lo más parecido posible al entorno remoto.
Pues esto es posible gracias a VirtualEnv .
  Instalación Podemos disponer de VirtualEnv en Windows, GNU/Linux y Mac, ya que es python y, por tanto, portable.
Los detalles&amp;hellip; se los dejo a la instalación estándar, ya que éstos pueden variar con facilidad.</description>
    </item>
    
  </channel>
</rss>
