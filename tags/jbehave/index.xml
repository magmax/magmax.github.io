<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jbehave on El blog de MagMax</title>
    <link>https://magmax.org/tags/jbehave/</link>
    <description>Recent content in jbehave on El blog de MagMax</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Jun 2012 00:00:00 +0000</lastBuildDate><atom:link href="https://magmax.org/tags/jbehave/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JBehave y JUnit</title>
      <link>https://magmax.org/blog/jbehave-junit/</link>
      <pubDate>Wed, 20 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/jbehave-junit/</guid>
      <description>No hace tanto, escribí el artículo JBehave. El problema es que era necesario lanzar cada historia por separado.
Este artículo es un pequeño parche, con la intención de permitir que JUnit encuentre nuestros tests.
  Recordando Bien, recordemos un poco la estructura que teníamos:
1. 2├── pom.xml 3└── src 4 └── test 5 ├── java 6 │ └── org 7 │ └── magmax 8 │ └── jbehaveexample 9 │ ├── MyExample.</description>
    </item>
    
    <item>
      <title>JBehave</title>
      <link>https://magmax.org/blog/jbehave/</link>
      <pubDate>Thu, 12 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/jbehave/</guid>
      <description>Apesar de mi mal comienzo con JBehave , debo decir que le voy cogiendo el tranquillo.
JBehave consiste en un sistema para hacer BDD en Java. En otras palabras: permite definir en un lenguaje no formal el comportamiento de la aplicación, utilizando expresiones regulares para transformarlo en un lenguaje formal.
  Ejemplo JBehave tiene cosas que no me gustan nada, pero también tiene otras que me gustan mucho. Veamos primero un ejemplito lo más pequeño que he sido capaz de hacerlo:</description>
    </item>
    
  </channel>
</rss>
