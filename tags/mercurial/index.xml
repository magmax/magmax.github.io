<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mercurial on El blog de MagMax</title>
    <link>https://magmax.org/tags/mercurial/</link>
    <description>Recent content in mercurial on El blog de MagMax</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 May 2013 00:00:00 +0000</lastBuildDate><atom:link href="https://magmax.org/tags/mercurial/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hg vs Git</title>
      <link>https://magmax.org/blog/comparativa-mercurial-git/</link>
      <pubDate>Mon, 27 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/comparativa-mercurial-git/</guid>
      <description>
        
          &lt;p&gt;Vamos con tópicos: Mercurial vs Git.&lt;/p&gt;
&lt;p&gt;Voy a intentar desmitificar o corroborar rumores, de manera unívoca y que cualquiera pueda reproducir.&lt;/p&gt;
&lt;p&gt;Este artículo y los siguientes admiten colaboraciones :D&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/gitvshg.png&#34;
         alt=&#34;Git vs Mercurial&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;este-artículo-es-un-coñazo&#34;&gt;Este artículo es un coñazo&lt;/h2&gt;
&lt;p&gt;Pues sí. Este artículo es un coñazo total. Por eso voy a comenzar por el final: las conclusiones. Así, los crédulos, pueden evitarse la parte de demostración y leer sólo las conclusiones. Los incrédulos pueden llegar hasta el final y comprobar que he tratado de ser todo lo objetivo posible.&lt;/p&gt;
&lt;h2 id=&#34;conclusiones&#34;&gt;Conclusiones&lt;/h2&gt;
&lt;p&gt;Aquí tenemos las conclusiones finales:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Si en Mercurial renombras un archivo, el repositorio requiere de nuevo el espacio ocupado por el archivo. En git, la diferencia es inapreciable.&lt;/li&gt;
&lt;li&gt;En Mercurial, dos &amp;ldquo;push&amp;rdquo; simultáneos sin conflicto pueden provocar que el segundo se cancele. En git no ocurre.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Esto demuestra que Git da un mejor rendimiento que Mercurial.&lt;/p&gt;
&lt;h2 id=&#34;críticas&#34;&gt;Críticas&lt;/h2&gt;
&lt;p&gt;Por favor, estoy dispuesto a soportar cualquier tipo de crítica. Sin embargo, me gustaría indicar que este artículo me ha costado &lt;strong&gt;MUCHO&lt;/strong&gt;, ya que no es nada sencillo pensar en las demostraciones y menos realizarlas de manera que se puedan repetir. Y también ha sido compleja la maquetación. Por esa razón, espero que cualquier crítica venga acompañada de demostraciones.&lt;/p&gt;
&lt;p&gt;Sé de algunos otros problemas, pero no puedo demostrarlos, así que me los cayo. Estas pruebas son completamente &lt;strong&gt;OBJETIVAS&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;También acepto demostraciones a favor/en contra de ambos. Sed creativos.&lt;/p&gt;
&lt;h2 id=&#34;agradecimientos&#34;&gt;Agradecimientos&lt;/h2&gt;
&lt;p&gt;Agradezco a &lt;a href=&#34;https://arco.esi.uclm.es/~david.villa/&#34;&gt;David Villa&lt;/a&gt; su paciencia haciendo &lt;em&gt;code review&lt;/em&gt; de estos scripts.
Me equivoqué al pasarle el de Mercurial y se puede decir que lo rehizo él solo.&lt;/p&gt;
&lt;h2 id=&#34;scripts&#34;&gt;Scripts&lt;/h2&gt;
&lt;p&gt;Los &lt;em&gt;Scripts&lt;/em&gt; necesarios para reproducir lo que expongo aquí se pueden encontrar
en &lt;a href=&#34;https://github.com/magmax/git-vs-hg&#34;&gt;github&lt;/a&gt;. Allí será donde haga modificaciones a los mismos.&lt;/p&gt;
&lt;h2 id=&#34;demostraciones&#34;&gt;Demostraciones&lt;/h2&gt;
&lt;h3 id=&#34;si-mueves-un-archivo-en-mercurial-ocupará-espacio-de-nuevo&#34;&gt;Si mueves un archivo en mercurial, ocupará espacio de nuevo&lt;/h3&gt;
&lt;table&gt;

  &lt;tr&gt;

    &lt;th&gt;Mercurial&lt;/th&gt;

    &lt;th&gt;Git&lt;/th&gt;

  
&lt;/tr&gt;


  &lt;tr&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ seq &lt;span style=&#34;color:#ae81ff&#34;&gt;10000000&lt;/span&gt; &amp;gt; $WC1/file
$ ls -lh $WC1
total 6,6M
-rw-r--r-- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; miguel miguel 6,6M may &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; 19:39 file
$ hg -R $WC1 add $WC1/file
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ seq &lt;span style=&#34;color:#ae81ff&#34;&gt;10000000&lt;/span&gt; &amp;gt; $WC1/file
$ ls -lh $WC1
total 6,6M
-rw-r--r-- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; miguel miguel 6,6M may &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; 19:39 file
$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1 add $WC1/file
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

  
&lt;/tr&gt;


  &lt;tr&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ export WC1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/tmp/wc1-hg
$ hg init $WC1
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ export WC1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/tmp/wc1-git
$ git init $WC1
Initialized empty Git repository in /tmp/wc1-git/.git/
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

  
&lt;/tr&gt;


  &lt;tr&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ hg -R $WC1 commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;initial&amp;#34;&lt;/span&gt;
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1 commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;initial&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;master &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;root-commit&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 50f537c&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; initial
 &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; file changed, &lt;span style=&#34;color:#ae81ff&#34;&gt;1000000&lt;/span&gt; insertions&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
 create mode &lt;span style=&#34;color:#ae81ff&#34;&gt;100644&lt;/span&gt; file
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

  
&lt;/tr&gt;


  &lt;tr&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ du -hs
8,7M /tmp/wc1-hg
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ du -hs /tmp/wc1-git
8,9M /tmp/wc1-git
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

  
&lt;/tr&gt;


  &lt;tr&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ hg -R $WC1 mv $WC1/file $WC1/example
$ hg -R $WC1 commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;second&amp;#34;&lt;/span&gt;
$ du -hs $WC1
11M /tmp/wc1-hg
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1 mv file example
$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1 commit -am &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;second&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;master f206fe1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; second
 &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; file changed, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; insertions&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; deletions&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;-&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
 rename file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; example &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;100%&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
$ du -hs $WC1
8,9M /tmp/wc1-git
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

  
&lt;/tr&gt;



&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Conclusión:&lt;/strong&gt; Si mueves un archivo en Mercurial, volverá a ocupar espacio. Si mueves un archivo en git, el repositorio seguirá ocupando lo mismo (prácticamente).&lt;/p&gt;
&lt;h3 id=&#34;conservando-historia-entre-moves&#34;&gt;Conservando historia entre moves&lt;/h3&gt;
&lt;p&gt;Este apartado continúa el script anterior:&lt;/p&gt;
&lt;table&gt;

  &lt;tr&gt;

    &lt;th&gt;Mercurial&lt;/th&gt;

    &lt;th&gt;Git&lt;/th&gt;

  
&lt;/tr&gt;


  &lt;tr&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ hg -R $WC1 mv $WC1/example $WC1/file
$ hg -R $WC1 commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;third&amp;#34;&lt;/span&gt;
$ du -hs $WC1
11M /tmp/wc1-hg
$ hg -R $WC1 log $WC1/file --follow
changeset: 2:3d54fb888504
tag: tip
user: Miguel Angel Garcia &amp;lt;magmax@example.org&amp;gt;
date: Thu Jun &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; 05:31:08 &lt;span style=&#34;color:#ae81ff&#34;&gt;2013&lt;/span&gt; +0200
summary: third

changeset: 1:f13ffb871397
user: Miguel Angel Garcia &amp;lt;magmax@example.org&amp;gt;
date: Thu Jun &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; 05:31:07 &lt;span style=&#34;color:#ae81ff&#34;&gt;2013&lt;/span&gt; +0200
summary: second

changeset: 0:e47df7ca3541
user: Miguel Angel Garcia &amp;lt;magmax@example.org&amp;gt;
date: Thu Jun &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; 05:31:07 &lt;span style=&#34;color:#ae81ff&#34;&gt;2013&lt;/span&gt; +0200
summary: initial
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1 mv example file
$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1 commit -am &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;third&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;master dd45fed&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; third
 &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; file changed, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; insertions&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; deletions&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;-&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
 rename example &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; file &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;100%&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
$ du -hs $WC1
8,9M /tmp/wc1-git
$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1 log -- file
commit dd45fedd449babb33a019f23a2dae244e18f400c
Author: Miguel Angel Garcia &amp;lt;magmax@example.org&amp;gt;
Date: Mon May &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; 19:46:49 &lt;span style=&#34;color:#ae81ff&#34;&gt;2013&lt;/span&gt; +0200

    third

commit f206fe12540494bf1f6f5193bd6234865da75e13
Author: Miguel Angel Garcia &amp;lt;magmax@example.org&amp;gt;
Date: Mon May &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; 19:46:48 &lt;span style=&#34;color:#ae81ff&#34;&gt;2013&lt;/span&gt; +0200

    second

commit 50f537cac82b6499c8519af7c7710211bf96c0c3
Author: Miguel Angel Garcia &amp;lt;magmax@example.org&amp;gt;
Date: Mon May &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; 19:46:48 &lt;span style=&#34;color:#ae81ff&#34;&gt;2013&lt;/span&gt; +0200

    initial
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;


  
&lt;/tr&gt;



&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Conclusión&lt;/strong&gt;: Tanto Mercurial como Git siguen correctamente la historia del archivo. (Gracias, Juan Penalta)&lt;/p&gt;
&lt;p&gt;Como dato curioso, se observa que al volver a mover el archivo, en esta ocasión
no ocupa espacio en mercurial.&lt;/p&gt;
&lt;h3 id=&#34;dos-pushes-simultáneos-sin-conflicto&#34;&gt;Dos &lt;em&gt;pushes&lt;/em&gt; simultáneos sin conflicto&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;NOTA:&lt;/strong&gt; En esta demostración se utilizará el archivo &lt;code&gt;annotate-output&lt;/code&gt;, que se encuentra en el paquete &amp;ldquo;&lt;strong&gt;devscripts&lt;/strong&gt;&amp;rdquo;. Tan solo añade la hora y el tipo de salida (&lt;em&gt;stdout&lt;/em&gt; o &lt;em&gt;stderr&lt;/em&gt;) y redirecciona todo a la salida estándar.&lt;/p&gt;
&lt;table&gt;

  &lt;tr&gt;

    &lt;th&gt;Mercurial&lt;/th&gt;

    &lt;th&gt;Git&lt;/th&gt;

  
&lt;/tr&gt;


  &lt;tr&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ export SERVER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;server-hg
$ export WC1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/tmp/wc1-hg
$ export WC2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/tmp/wc2-hg
$ hg init $SERVER
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ export SERVER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/home/miguel/server-git
$ export WC1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/tmp/wc1-git
$ export WC2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/tmp/wc2-git
$ git --bare init $SERVER
Initialized empty Git repository in /tmp/server-git/
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

  
&lt;/tr&gt;


  &lt;tr&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ echo -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[hooks]\npretxnchangegroup.sleep=sleep 2&amp;#39;&lt;/span&gt; &amp;gt; $SERVER/.hg/hgrc
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ echo -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#!/bin/bash\nsleep 2&amp;#39;&lt;/span&gt; &amp;gt; $SERVER/hooks/post-receive
$ chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;755&lt;/span&gt; $SERVER/hooks/post-receive
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

  
&lt;/tr&gt;


  &lt;tr&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ hg clone ssh://localhost/$SERVER $WC1
no changes found
updating to branch default
&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; files updated, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; files merged, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; files removed, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; files unresolved
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git clone $SERVER $WC1
Cloning into &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/tmp/wc1-git&amp;#39;&lt;/span&gt;...
warning: You appear to have cloned an empty repository.
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;.
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

  
&lt;/tr&gt;


  &lt;tr&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ touch $WC1/file
$ hg -R $WC1 add $WC1/file
$ hg -R $WC1 commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;initial version&amp;#34;&lt;/span&gt;
$ hg -R $WC1 push
pushing to ssh://localhost//tmp/server-hg
searching &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; changes
remote: adding changesets
remote: adding manifests
remote: adding file changes
remote: added &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; changesets with &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; changes to &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; files
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ touch $WC1/INITIAL
$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1 add INITIAL
$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1 commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master branch creation&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;master &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;root-commit&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 38576fe&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; master branch creation
 &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; files changed
 create mode &lt;span style=&#34;color:#ae81ff&#34;&gt;100644&lt;/span&gt; INITIAL
$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1 push origin master
To /tmp/server-git
 * &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;new branch&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; master -&amp;gt; master
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

  
&lt;/tr&gt;


  &lt;tr&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ hg clone ssh://localhost/$SERVER $WC2
requesting all changes
adding changesets
adding manifests
adding file changes
added &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; changesets with &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; changes to &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; files
updating to branch default
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; files updated, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; files merged, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; files removed, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; files unresolved
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git clone $SERVER $WC2
Cloning into &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/tmp/wc2-git&amp;#39;&lt;/span&gt;...
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;.
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

  
&lt;/tr&gt;


  &lt;tr&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ touch $WC1/file2
$ hg -R $WC1 branch branch1
marked working directory as branch branch1
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;branches are permanent and global, did you want a bookmark?&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
$ hg -R $WC1 add $WC2/file2
$ hg -R $WC1 commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;changes on wc1&amp;#34;&lt;/span&gt;
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ touch $WC1/file
$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1 checkout -b working-copy-1
Switched to a new branch &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;working-copy-1&amp;#39;&lt;/span&gt;
$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1 add file
$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1 commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;change 1&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;working-copy-1 de8c105&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; change &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
 &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; files changed
 create mode &lt;span style=&#34;color:#ae81ff&#34;&gt;100644&lt;/span&gt; file
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

  
&lt;/tr&gt;


  &lt;tr&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ touch $WC2/fileB
$ hg -R $WC2 branch branch2
marked working directory as branch branch2
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;branches are permanent and global, did you want a bookmark?&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
$ hg -R $WC2 add $WC2/fileB
$ hg -R $WC2 commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;changes on wc2&amp;#34;&lt;/span&gt;
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ touch $WC2/fileB
$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC2/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC2 checkout -b working-copy-2
Switched to a new branch &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;working-copy-2&amp;#39;&lt;/span&gt;
$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC2/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC2 add fileB
$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC2/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC2 commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;changes on wc2&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;working-copy-2 eee3889&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; changes on wc2
 &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; files changed
 create mode &lt;span style=&#34;color:#ae81ff&#34;&gt;100644&lt;/span&gt; fileB
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

  
&lt;/tr&gt;


  &lt;tr&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ annotate-output +&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WC__1__%H:%M:%S&amp;#34;&lt;/span&gt; hg -R $WC1 push --new-branch &amp;amp;
$ annotate-output +&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WC__2__%H:%M:%S&amp;#34;&lt;/span&gt; hg -R $WC2 push --new-branch
WC__2__13:31:54 I: Started hg -R /tmp/wc2-hg push --new-branch
WC__1__13:31:54 I: Started hg -R /tmp/wc1-hg push --new-branch
WC__1__13:31:57 O: pushing to ssh://localhost//tmp/server-hg
WC__1__13:31:57 O: searching &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; changes
WC__1__13:31:57 O: remote: adding changesets
WC__1__13:31:57 O: remote: adding manifests
WC__1__13:31:57 O: remote: adding file changes
WC__1__13:31:57 O: remote: added &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; changesets with &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; changes to &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; files
WC__1__13:31:57 I: Finished with exitcode &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
WC__2__13:31:58 E: abort: push failed:
WC__2__13:31:58 O: pushing to ssh://localhost//tmp/server-hg
WC__2__13:31:58 E: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;unsynced changes&amp;#39;&lt;/span&gt;
WC__2__13:31:58 O: searching &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; changes
WC__2__13:31:58 O: remote: waiting &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; lock on repository /tmp/server-hg held by
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nightcrawler:6267&amp;#39;&lt;/span&gt;
WC__2__13:31:58 I: Finished with exitcode &lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ annotate-output +&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WC__1__%H:%M:%S&amp;#34;&lt;/span&gt; git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1
push origin master &amp;amp;
$ annotate-output +&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WC__2__%H:%M:%S&amp;#34;&lt;/span&gt; git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC2/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC2
push origin master
WC__1__13:30:35 I: Started git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/tmp/wc1-git/.git
--work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/tmp/wc1-git push origin working-copy-1:working-copy-1
WC__2__13:30:35 I: Started git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/tmp/wc2-git/.git
--work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/tmp/wc2-git push origin working-copy-2:working-copy-2
WC__2__13:30:37 E: To /tmp/server-git
WC__1__13:30:37 E: To /tmp/server-git
WC__2__13:30:37 E: * &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;new branch&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; working-copy-2 -&amp;gt; working-copy-2
WC__1__13:30:37 E: * &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;new branch&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; working-copy-1 -&amp;gt; working-copy-1
WC__2__13:30:37 I: Finished with exitcode &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
WC__1__13:30:37 I: Finished with exitcode &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

  
&lt;/tr&gt;



&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Conclusión:&lt;/strong&gt; Dos pushes simultáneos sobre ramas diferentes en Mercurial dará un error a la segunda que entre, si la primera se acepta. En git ambas podrán pasar.&lt;/p&gt;
&lt;p&gt;¿Por qué ha ocurrido esto en Mercurial? ¿Qué es &lt;strong&gt;&amp;ldquo;Unsynced changes&amp;rdquo;&lt;/strong&gt;? Mirando el código es un problema en el protocolo; Mercurial realiza 4 fases principales:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Saludo&lt;/li&gt;
&lt;li&gt;Solicitar un hash con el estado de las cabezas del servidor.&lt;/li&gt;
&lt;li&gt;Ejecutar hooks&lt;/li&gt;
&lt;li&gt;Enviar los deltas con el hash. Si el hash no coincide, abortará.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;En nuestro caso, un proceso se ha quedado bloqueado en el paso 3 y el otro ha
obtenido una hash que no coincidirá más tarde. El resultado es que ambas ramas
se bloquean hasta poder alcanzar el paso 4. La primera que llegue, modificará
las cabezas y, por tanto, la hash, que hará que la segunda aborte.
Si el primer proceso falla (un hook que no devuelve 0), la segunda pasará.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nota personal:&lt;/strong&gt; Subjetivamente, encuentro mucho más útiles los mensajes de Git que de Mercurial.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Sistemas de Control de Versiones (Subversion y Mercurial)</title>
      <link>https://magmax.org/blog/mercurial-subversion/</link>
      <pubDate>Mon, 30 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/mercurial-subversion/</guid>
      <description>
        
          &lt;p&gt;En esta ocasión vamos a ver qué es un Sistema de Control de Versiones y cómo se utiliza.&lt;/p&gt;
&lt;p&gt;Voy a dividir la entrada en 4 partes bien diferenciadas. Primero una breve introducción, explicando qué son y qué tipos hay. A continuación, una descripción del uso de VCS, seguida por una descripción de DVCS. Finalmente, una entrada avanzada de cómo utilizar DVCS. Si ya eres un usuario de DVCS, a lo mejor te interesa saltarte las dos primeras partes.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/hgvssvn.jpg&#34;
         alt=&#34;Mercurial y Subversion&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;introducción&#34;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Un &lt;em&gt;Sistema de Control de Versiones&lt;/em&gt; (SCV o, en inglés, VCS o &amp;ldquo;Version Control System&amp;rdquo;) tiene una estructura similar a un sistema de archivos. La diferencia está en que se puede acceder a distintas versiones de los archivos y operar con estas versiones. Es decir: &lt;em&gt;Es un sistema de ficheros con versionado&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Hay distintos tipos. Los más sencillos son los sistemas locales, útiles para un único usuario. En la era de la nube, no tiene sentido en pensar en sistemas de este tipo y ya no se mantiene ninguno de éstos. Hace tiempo trabajé con PVCS y era un verdadero infierno (una persona estaba encargada del PVCS y era la única que accedía al mismo). Los ignoraremos.&lt;/p&gt;
&lt;p&gt;Un poco más complejos son los denominados VCS (&amp;ldquo;Version Control System&amp;rdquo;). Éstos diferencian entre el sistema central y la copia local (&lt;em&gt;working copy&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Los más utilizados actualmente son los DVCS (&amp;quot;&lt;em&gt;Distributed Version Control System&lt;/em&gt;&amp;quot;), en los que puede haber más de una copia remota y éstas se pueden sincronizar entre ellas.&lt;/p&gt;
&lt;p&gt;Echémosle un vistazo rápido a todos ellos.&lt;/p&gt;
&lt;h2 id=&#34;vcs&#34;&gt;VCS&lt;/h2&gt;
&lt;p&gt;Aunque las empresas están abandonándolos, aún siguen siendo muy utilizados.&lt;/p&gt;
&lt;p&gt;El sistema consiste, básicamente, en una copia local y un servidor remoto. Las modificaciones se realizan sobre la copia local y luego se envían al servidor. Cada máquina que tiene una copia local se sincroniza bajo demanda con el servidor remoto.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://subversion.tigris.org/&#34;&gt;Subversion&lt;/a&gt; , &lt;a href=&#34;https://cvs.nongnu.org/&#34;&gt;CVS&lt;/a&gt; , &amp;hellip; Han sido los más utilizados. Vamos a ver un poquito de &lt;em&gt;Subversion&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;init&lt;/em&gt;: permite inicializar un repositorio.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;checkout&lt;/em&gt;: descarga un repositorio remoto en una carpeta local (&lt;em&gt;working copy&lt;/em&gt;), desde la que podemos manipular los archivos.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;update&lt;/em&gt;: comprueba si hay actualizaciones en el servidor y se las descarga a la copia local. Si hay conflictos (hemos tocado un archivo que alguien ya ha modificado en el servidor), tratará de resolverlos. Si no puede, dejará los archivos marcados como &amp;ldquo;conflicto&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;add&lt;/em&gt;: mientras que no hagamos &lt;em&gt;add&lt;/em&gt; a un archivo, éste será ignorado.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;commit&lt;/em&gt;: crea una nueva versión, enviando al servidor las modificaciones desde la última vez que se utilizó esta orden.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;remove&lt;/em&gt;: el archivo deja de estar gestionado. Hay que tener en cuenta que las versiones que subimos con el archivo seguirán estando ahí, pero a partir de ese momento, las nuevas versiones no lo mostrarán.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;diff&lt;/em&gt;: permite ver las diferencias existentes entre las distintas versiones de un mismo fichero.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;log&lt;/em&gt;: muestra los cambios ocurridos en el repositorio.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El uso típico de este tipo de repositorios es:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;El administrador crea el repositorio (&lt;em&gt;init&lt;/em&gt;) y publica la dirección en la que se encuentra (https, ssh, &amp;hellip;).&lt;/li&gt;
&lt;li&gt;El usuario se descarga el repositorio a su copia local (&lt;em&gt;checkout&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;El usuario comienza un ciclo de iteraciones sucesivas de las órdenes siguientes, aunque usará el resto de forma ocasional:
&lt;ol&gt;
&lt;li&gt;Modificar el código&lt;/li&gt;
&lt;li&gt;Subir cambios (&lt;em&gt;commit&lt;/em&gt;). En este punto se realiza un &lt;em&gt;update&lt;/em&gt; automático y, si hay conflictos, se exige su resolución antes de permitir el &lt;em&gt;commit&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Los sistemas de este tipo tienen un problema: si no hay conexión, no se puede hacer nada con el repositorio, ya que la mayor parte de la lógica está en el servidor.&lt;/p&gt;
&lt;h2 id=&#34;dvcs&#34;&gt;DVCS&lt;/h2&gt;
&lt;p&gt;En este caso entra en juego un componente más: un servidor local. Este servidor local puede ser una copia local del servidor remoto. Esta característica permite trabajar con el servidor aunque no exista conexión a la red. Cuando se desee, se puede sincronizar el servidor local con el servidor remoto.&lt;/p&gt;
&lt;p&gt;La manera de trabajar con el servidor local es muy similar a la utilizada por los &lt;em&gt;VCS&lt;/em&gt;, aunque pueden cambiar los nombres de las órdenes. Por ejemplo, la orden &amp;ldquo;&lt;em&gt;clone&lt;/em&gt;&amp;rdquo; de &lt;em&gt;Mercurial&lt;/em&gt; equivaldría al &amp;ldquo;&lt;em&gt;checkout&lt;/em&gt;&amp;rdquo; de subversion.&lt;/p&gt;
&lt;p&gt;Evidentemente, hay una serie de instrucciones adicionales que nos permiten trabajar con el servidor remoto. Dado que esto no es un tutorial de &lt;em&gt;mercurial&lt;/em&gt;, obviaré estas órdenes comunes y me centraré en las nuevas operaciones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;pull&lt;/em&gt;: permite traerse los cambios del repositorio remoto al repositorio local.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;push&lt;/em&gt;: Envía los cambios del repositorio local (ojo, no la copia de trabajo) al repositorio remoto.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;branch&lt;/em&gt;: Permite crear ramas nuevas. De esto hablaremos en el siguiente punto.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;branches&lt;/em&gt;: Muestra la lista de ramas existentes.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;merge&lt;/em&gt;: Mezcla dos colas.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;out&lt;/em&gt;: Muestra la lista de &lt;em&gt;changesets&lt;/em&gt; (commits) que están en el servidor local pero no en el servidor remoto.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No hay un ciclo habitual con los DVCS. Sin embargo, podríamos poner como &amp;ldquo;ciclo sencillo&amp;rdquo; la intercalación entre:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pull&lt;/li&gt;
&lt;li&gt;Ciclos de tipo VCS&lt;/li&gt;
&lt;li&gt;push&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Algunos ejemplos de DVCS son &lt;a href=&#34;https://mercurial.selenic.com/&#34;&gt;Mercurial&lt;/a&gt; , &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; , &lt;a href=&#34;https://bazaar.canonical.com/en/&#34;&gt;Bazaar&lt;/a&gt; , &lt;a href=&#34;https://veracity-scm.com/&#34;&gt;Veracity&lt;/a&gt;  o
&lt;a href=&#34;https://www.plasticscm.com/&#34;&gt;Plastic SCM&lt;/a&gt; .&lt;/p&gt;
&lt;h2 id=&#34;dvcs-avanzado&#34;&gt;DVCS Avanzado&lt;/h2&gt;
&lt;p&gt;Vamos a ver aquí tres niveles. El primero se tratará del manejo de ramas (&amp;ldquo;branches&amp;rdquo;); el segundo, de &lt;em&gt;hooks&lt;/em&gt; y el tercer, del manejo de repositorios remotos.&lt;/p&gt;
&lt;h3 id=&#34;branches&#34;&gt;Branches&lt;/h3&gt;
&lt;p&gt;El manejo de ramas permite realizar un trabajo paralelo sin afectar a la rama principal. Las ramas principales suelen llamarse algo como &amp;ldquo;&lt;em&gt;trunk&lt;/em&gt;&amp;rdquo;, &amp;ldquo;&lt;em&gt;default&lt;/em&gt;&amp;rdquo;, &amp;hellip; y suelen ser las más importantes.&lt;/p&gt;
&lt;p&gt;Existe una corriente que defiende el &amp;ldquo;&lt;em&gt;Un cambio, una rama&lt;/em&gt;&amp;rdquo;, de manera que antes de comenzar a hacer cambios, debes crearte una rama y, posteriormente, mezclar con la rama principal. Este planteamiento permite pasar varios días trabajando en la rama sin afectar al trabajo de los demás. No es necesario esperar al último momento para aplicar todos los cambios, ya que se puede mezclar una rama con la rama principal en cualquier momento, facilitando así el poder actualizarse o reduciendo los posibles conflictos.&lt;/p&gt;
&lt;p&gt;Existe también la posibilidad de crear ramas de ramas o de mezclarlas entre ellas, complicando así el grafo generado.&lt;/p&gt;
&lt;p&gt;Hay que tener en cuenta que, durante la mezcla de código, es posible que el algoritmo de mezclado falle, así que es buena idea combinar estas técnicas con robustas baterías de pruebas.&lt;/p&gt;
&lt;h3 id=&#34;hooks&#34;&gt;Hooks&lt;/h3&gt;
&lt;p&gt;Los repositorios pueden lanzar acciones automáticas cuando se producen ciertos eventos. Por ejemplo, podrían enviarnos un e-mail cuando una rama se mezcla con la rama principal, o comprobar que el código cumple ciertos criterios de calidad.&lt;/p&gt;
&lt;p&gt;Este tipo de técnicas pueden ser muy provechosas, aunque puede requerir tanto mantenimiento como para dedicar parte del personal a manejarlas.&lt;/p&gt;
&lt;h3 id=&#34;múltiples-repositorios&#34;&gt;Múltiples repositorios&lt;/h3&gt;
&lt;p&gt;Finalmente, llegamos a los múltiples repositorios. Existe la opción de tener repositorios remotos réplica. Esto significa que podemos sincronizar nuestros cambios contra una de estas réplicas y ésta se sincronizará tarde o temprano con otra de las réplicas.&lt;/p&gt;
&lt;p&gt;La sincronización entre repositorios puede ser manual o automática, y puede dar lugar a un &lt;em&gt;flujo de trabajo&lt;/em&gt; distinto según se necesite. Por ejemplo, puede utilizarse esta técnica para mantener repositorios remotos, de manera que se incremente la velocidad entre los &lt;em&gt;working copies&lt;/em&gt; y el servidor central o, lo que puede resultar más provechoso, definir unas calidades para cada uno de los repositorios.&lt;/p&gt;
&lt;p&gt;Veamos un ejemplo&amp;hellip; Podemos tener el repositorio de uso habitual, donde &amp;ldquo;cabe todo&amp;rdquo;, llamándole &amp;ldquo;&lt;em&gt;Development&lt;/em&gt;&amp;quot;; otro repositorio del que se realizan pruebas unitarias automáticas, llamado &amp;ldquo;&lt;em&gt;testing&lt;/em&gt;&amp;quot;; si las pruebas automáticas pasan, podríamos tener otro con las pruebas de integración &amp;ldquo;&lt;em&gt;integration&lt;/em&gt;&amp;quot;; si estas pasan, otro con las pruebas de calidad &amp;ldquo;&lt;em&gt;QA&lt;/em&gt;&amp;rdquo; y, si estas pasan, otro con el código definitivo &amp;ldquo;&lt;em&gt;Release&lt;/em&gt;&amp;rdquo;. Cuando hay una nueva rama en este repositorio, podríamos sincronizarlo con &amp;ldquo;&lt;em&gt;Development&lt;/em&gt;&amp;rdquo; y, así, cerramos el círculo.&lt;/p&gt;
&lt;p&gt;No he leído nada aún al respecto, pero supongo que a esto es a lo que hace referencia la &amp;ldquo;&lt;em&gt;Integración contínua&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Con el fin de no hacer crecer disparatadamente todos los repositorios, se pueden mezclar sólo ciertas ramas de un repositorio a otro, simplificando las mezclas y reduciendo la historia.&lt;/p&gt;
&lt;h2 id=&#34;conclusión&#34;&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;El uso de todas las técnicas avanzadas puede provocar flujos de trabajo muy diferentes, pero todos ellos útiles para el desarrollo de software. Cualquier empresa de más de 5 desarrolladores que trate de hacer software sin utilizar un VCS o un DVCS está destinada al fracaso; no podrá obtener una calidad competitiva ni unos plazos aceptables.&lt;/p&gt;
&lt;h2 id=&#34;más-información&#34;&gt;Más información&lt;/h2&gt;
&lt;p&gt;Hoy día es raro no haber oído hablar de los sistemas de control de versiones. De
todas maneras, os recomiendo apuntaros al blog de mis amigos de `Codice
Software]  donde, entre muchas cosas interesantes, explican más a fondo &lt;a href=&#34;https://www.plasticscm.com/infocenter/quick-start/task-cycle-in-plastic-scm.aspx&#34;&gt;un
flujo de trabajo&lt;/a&gt;  con su propia herramienta.&lt;/p&gt;
&lt;p&gt;En breve voy a comenzar la lectura de un libro que promete ser interesante,
&lt;a href=&#34;https://www.ericsink.com/&#34;&gt;Version Control by Example&lt;/a&gt;, propuesto por Eric Sink, que os podéis descargar
gratuítamente o, si tenéis suerte como yo, &lt;a href=&#34;https://www.ericsink.com/entries/vcbe_print_edition_free.html&#34;&gt;conseguirlo de forma gratuita en
papel&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;También os propongo echar un ojo a la &lt;a href=&#34;https://en.wikipedia.org/wiki/Revision_control&#34;&gt;Wikipedia&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Y, por si fuera poco, existe la posibilidad de utilizar algunos de ellos de
forma remota, utilizando &lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt; , &lt;a href=&#34;https://bitbucket.org/&#34;&gt;Bitbucket&lt;/a&gt; , &lt;a href=&#34;https://launchpad.net/&#34;&gt;Launchpad&lt;/a&gt; , &lt;a href=&#34;https://savannah.gnu.org/&#34;&gt;Savannah&lt;/a&gt; ,
&lt;a href=&#34;https://gna.org/&#34;&gt;Gna!&lt;/a&gt; , &amp;hellip; Para gustos, los -colores- sistemas de control de versiones :D&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
