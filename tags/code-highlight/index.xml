<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>code highlight on El blog de MagMax</title>
    <link>http://example.org/tags/code-highlight/</link>
    <description>Recent content in code highlight on El blog de MagMax</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Aug 2011 00:00:00 +0000</lastBuildDate><atom:link href="http://example.org/tags/code-highlight/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Resaltado de sintaxis en tu web</title>
      <link>http://example.org/blog/resaltado-sintaxis/</link>
      <pubDate>Fri, 19 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/resaltado-sintaxis/</guid>
      <description>
        
          &lt;p&gt;Durante el cambio de Drupal a Blogger me surgió el problema del resaltado de sintaxis. En los artículos de mi web hay mucho código, y éste es uno de los puntos más importantes. En muy poco tiempo he visto tres maneras diferentes de gestionarlo y me gustaría compartirlas con vosotros. No sería justo olvidar que la solución final la encontré gracias a un comentario de Ángel Guzmán.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;http://example.org/images/javascript.png&#34;
         alt=&#34;Javascript&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;opción-drupal-geshi&#34;&gt;Opción Drupal: GeSHi&lt;/h2&gt;
&lt;p&gt;Cuando usaba Drupal siempre utilizaba la opción fácil: &lt;a href=&#34;http://drupal.org/project/geshifilter&#34;&gt;El módulo GeSHi para Drupal&lt;/a&gt; . Este modo tiene una ventaja: lo gestiona todo Drupal y no tenemos que preocuparnos por nada. También tiene una desventaja: lo gestiona todo Drupal y si queremos migrar somos incompatibles con todo.&lt;/p&gt;
&lt;p&gt;Es un formato muy sencillo, ya que basta con incluir unas marcas especiales &lt;em&gt;code&lt;/em&gt; indicando, de forma opcional, el lenguaje del código.&lt;/p&gt;
&lt;h2 id=&#34;opción-hardcoded&#34;&gt;Opción hardcoded&lt;/h2&gt;
&lt;p&gt;La segunda opción que utilicé durante la migración fue traducir el código a HTML mediante algún traductor, como &lt;a href=&#34;http://www.andre-simon.de/doku/highlight/en/highlight.html&#34;&gt;highlight&lt;/a&gt;  (paquete Debian).&lt;/p&gt;
&lt;p&gt;En este caso se consigue un buen resultado y rápido de cargar, pero con muchas pegas. La primera es que consume mucho más espacio. Requiere numerosas marcas y cambios de formato, lo que constituye una gran carga. Además, ofusca todo el código y cualquier modificación posterior es un infierno. Pero el mayor problema de esta solución es la poca versatilidad: si necesitas cambiar el formato tienes que reescribir todo el código e ir aplicándolo trozo a trozo.&lt;/p&gt;
&lt;h2 id=&#34;opción-github&#34;&gt;Opción GitHub&lt;/h2&gt;
&lt;p&gt;En el repositorio &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;  tienes la posibilidad de añadir &lt;em&gt;Gists&lt;/em&gt;. Estos &lt;em&gt;gists&lt;/em&gt; consisten en pequeños trozos de código indexable y con control de versiones.&lt;/p&gt;
&lt;p&gt;La gran ventaja de este formato es que tienes todo el código junto y con control de versiones. La gran desventaja, que en seguida tienes miles de Gists difíciles de gestionar y que tienes el código separado del resto de tu artículo. Como ventaja adicional, puedes compartir el código entre distintos artículos. Pero esto es arriesgado, ya que un artículo puede requerir una modificación que entorpezca la lectura del otro, por lo que en la práctica no lo compartirás.&lt;/p&gt;
&lt;p&gt;Otro problema adicional es que los &lt;em&gt;feeds&lt;/em&gt; no resuelven las direcciones, por lo que puedes perder el código en estos &lt;em&gt;feeds&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;opción-syntaxhighlighter&#34;&gt;Opción SyntaxHighlighter&lt;/h2&gt;
&lt;p&gt;Exiten algunas soluciones dinámicas, como es el caso de &lt;a href=&#34;http://alexgorbatchev.com/SyntaxHighlighter/&#34;&gt;SyntaxHighligther&lt;/a&gt; . En este caso tenemos un puñado de archivos JavaScript y un formato simple en nuestro código, muy similar al que necesitábamos en Drupal. Además, las marcas son estándar, por lo que los &lt;em&gt;feeds&lt;/em&gt; perderán el formato pero seguirán siendo legibles.&lt;/p&gt;
&lt;p&gt;Si no confías en que los archivos javascript vayan a continuar en el servidor, puedes copiártelos a tu &lt;em&gt;site&lt;/em&gt;. Utilizar los comunes tiene una ventaja: los navegadores cachean los archivos javascript que utilizan las webs, con el fin de reutilizarlos si se trata de acceder a la misma URL. De esta manera, si tenemos la suerte de que ya han accedido a otro &lt;em&gt;site&lt;/em&gt; que requería los mismos archivos javascript, conseguiremos una mayor velocidad de carga. Además, así las nuevas versiones las gestiona otro :D&lt;/p&gt;
&lt;p&gt;También me ha sorprendido la gran versatilidad, ya que puedes resaltar líneas o cambiar el formato.&lt;/p&gt;
&lt;p&gt;Veamos un ejemplo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Esto es el típico hola-mundo en python&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Y esta línea estará resaltada&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;¿Desventajas? Carga un poco más lento que otras soluciones y la página en general pesará más. Además, tienes que seleccionar un nuevo javascript por cada lenguaje que quieras soportar. Si estás usando un sistema de blogs público (como Blogger) o simplemente genérico (como Drupal), no te queda más remedio que meter esos javascripts en todas la plantilla, apareciendo en todas las páginas. Tampoco es demasiado grave, ya que cuando los usuarios repitan, tendrán los archivos javascript ya descargados en su máquina.&lt;/p&gt;
&lt;p&gt;La gran ventaja es que cambiando el estilo en la plantilla, cambiará el estilo del código de todo tu &lt;em&gt;site&lt;/em&gt; (si no has hecho marranadas especificándolo a capón).&lt;/p&gt;
&lt;p&gt;Un saludo.&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
