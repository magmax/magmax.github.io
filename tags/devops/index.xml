<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>devops on El blog de MagMax</title>
    <link>http://example.org/tags/devops/</link>
    <description>Recent content in devops on El blog de MagMax</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Sep 2018 00:00:00 +0000</lastBuildDate><atom:link href="http://example.org/tags/devops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DevOps: ¿Equipo, Rol o metodología?</title>
      <link>http://example.org/blog/devops-rol-o-metodologia/</link>
      <pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/devops-rol-o-metodologia/</guid>
      <description>
        
          &lt;p&gt;Recientemente leí el artículo &lt;a href=&#34;https://opensource.com/article/18/8/getting-started-devops-6-mistakes-avoid&#34;&gt;6 DevOps mistakes to avoid&lt;/a&gt;, cuyo primer punto
es &amp;ldquo;Creating a single DevOps team&amp;rdquo;. Esto genero un pequeño hilo en twitter con
&lt;a href=&#34;https://twitter.com/recena&#34;&gt;@recena&lt;/a&gt;, donde colaboró también mi amigo &lt;a href=&#34;https://twitter.com/thejtoken&#34;&gt;@thejtoken&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finalmente, &lt;a href=&#34;https://twitter.com/david_bonilla&#34;&gt;@david_bonilla&lt;/a&gt;, en la última bonilista, ha escrito también en
torno a este tema: &lt;a href=&#34;https://mailchi.mp/bonillaware/devops?e=c93a79969f&#34;&gt;¿Es DevOps un rol o una metodología de trabajo?&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En este artículo doy mis argumentos a favor y en contra.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;http://example.org/images/devops.png&#34;
         alt=&#34;Ciclo DevOps&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;el-problema&#34;&gt;El problema&lt;/h2&gt;
&lt;p&gt;No queda claro cuales son las competencias exactas de un DevOps. Es&amp;hellip; &amp;ldquo;un ente&amp;rdquo;
que está entre los desarrolladores (&amp;ldquo;Dev&amp;rdquo;) y los de sistemas (&amp;ldquo;Ops&amp;rdquo;).&lt;/p&gt;
&lt;p&gt;Tampoco está claro cuáles son sus competencias, pero parecen incluir:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Evitar problemas durante el despliegue de las aplicaciones&lt;/li&gt;
&lt;li&gt;Reducir los silos de conocimiento&lt;/li&gt;
&lt;li&gt;Incrementar la velocidad de desarrollo&lt;/li&gt;
&lt;li&gt;Incrementar la colaboración entre equipos&lt;/li&gt;
&lt;li&gt;Fomentar el auto-aprendizaje individual&lt;/li&gt;
&lt;li&gt;Facilitar el prototipado&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Casi na.&lt;/p&gt;
&lt;p&gt;Sin embargo, las ofertas de trabajo suelen incluir:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gestión de AWS/Azure/cloud.&lt;/li&gt;
&lt;li&gt;Jenkins, Travis u otros servidores de Integración Contínua&lt;/li&gt;
&lt;li&gt;Herramientas de automatización: Ansible, Chef, Puppet, &amp;hellip;&lt;/li&gt;
&lt;li&gt;Kubernetes/Docker Swarm.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;¿Qué tienen unas que ver con las otras? Pues en realidad poco o mucho, según se
mire. El problema radica cuando nos centramos en el uso de las herramientas sin
mirar al objetivo de las mismas.&lt;/p&gt;
&lt;p&gt;Pero&amp;hellip; ¿Debería ser un equipo, un rol en cada equipo o bien una metodología de
trabajo? Voy a profundizar aquí.&lt;/p&gt;
&lt;h2 id=&#34;devops-es-un-equipo&#34;&gt;DevOps es un equipo&lt;/h2&gt;
&lt;p&gt;Cuando los DevOps son un equipo, el resultado es que se crea una muralla entre
los Devs y los Ops. Esta muralla tiene la forma de silo de conocimiento,
justamente una de las cosas que se quería evitar.&lt;/p&gt;
&lt;p&gt;Este silo de conocimiento suele convertirse en un cuello de botella y hacer que
algunos proyectos se bloqueen por otros más urgentes.&lt;/p&gt;
&lt;p&gt;Sin embargo, tiene algunas ventajas: la reutilización de recursos es mucho mayor
que con otras soluciones y, ciertamente, se mejorará mucho la velocidad de
despliegue de los proyectos gestionados.&lt;/p&gt;
&lt;h2 id=&#34;devops-es-un-rol&#34;&gt;DevOps es un rol&lt;/h2&gt;
&lt;p&gt;Si en lugar de un equipo se crea una figura de DevOps dentro de cada equipo,
solucionamos el problema de los proyectos estancados y los silos de
conocimiento, pero generamos otros.&lt;/p&gt;
&lt;p&gt;Para comenzar y de acuerdo con la &lt;a href=&#34;https://en.wikipedia.org/wiki/Conway%27s_law&#34;&gt;ley de Conway&lt;/a&gt;, si tienes 4 equipos
trabajando en un compilador, obtendrás un compilador de 4 fases. Traducido a los
DevOps, si tienes 4 equipos tendrás:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ansible, Puppet, Chef y SaltStack, todos resolviendo los mismos problemas.&lt;/li&gt;
&lt;li&gt;Jenkins sin pipelines, Jenkins con pipelines, Travis y TeamCity.&lt;/li&gt;
&lt;li&gt;Git, Mercurial, Subversion y gente sin control de versiones.&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La cuestión es que cada uno de esos DevOps va a tratar de resolver los problemas
que vaya encontrando con sus conocimientos, y resultará muy difícil que comparta
esos conocimientos con el resto de los DevOps, por la típica excusa de la falta
de tiempo.&lt;/p&gt;
&lt;p&gt;Al final, y de una manera muy oculta, se están generando pequeños silos de
conocimiento.&lt;/p&gt;
&lt;p&gt;Esta aproximación tiene otro problema añadido: Somos personas y tenemos la
maldita costumbre de enfermar, cogernos vacaciones y dormir. Si sólo una persona
en el equipo tiene este rol, tendremos un cuello de botella.&lt;/p&gt;
&lt;p&gt;Además, en las empresas se entiende muy bien eso de &amp;ldquo;tengo 5 personas en el
equipo, así que tengo 5 desarrolladores&amp;rdquo;, pero muy mal eso de &amp;ldquo;en mi equipo de 5
personas tengo un QA y un DevOps, por lo que sólo tengo 3.5 desarrolladores&amp;rdquo;. El
resultado es un DevOps-programador, que dedica el tiempo que puede a las labores
de DevOps y al final termina echando horas y dejando la empresa.&lt;/p&gt;
&lt;p&gt;Pero no todo es malo&amp;hellip; Sólo una persona dentro del equipo sabe cómo funciona el
producto, cómo se despliega, qué novedades incorpora, etc. Con esta
aproximación, cada DevOps conoce su producto y puede mejorar su despliegue.&lt;/p&gt;
&lt;h2 id=&#34;devops-es-una-metodología-de-trabajo&#34;&gt;DevOps es una metodología de trabajo&lt;/h2&gt;
&lt;p&gt;Si DevOps es una forma de hacer las cosas&amp;hellip; ¿Quién se encarga? ¿Necesitamos un
&amp;ldquo;Coach&amp;rdquo;?&lt;/p&gt;
&lt;p&gt;Mi experiencia me dice que los Coach suelen terminar escaldados. Si todo va
bien, ha sido gracias al equipo. Si va mal, la culpa es del Coach. En cualquier
caso, muchos en la empresa verán que &amp;ldquo;no hace nada, sólo habla&amp;rdquo;. No sería la
primera vez que veo que se tilda al Coach de Vende-humos.&lt;/p&gt;
&lt;p&gt;Eso hace que yo esté en contra de los Coach &amp;ldquo;puros&amp;rdquo;. Me gusta pensar en entregar
y hacer cosas palpables (más o menos, que ya sabéis cómo es eso del software).
No es lo mismo entregar un esquema en un PPT que un Jenkins configurado. El
problema es que, muchas veces, el segundo requiere del primero.&lt;/p&gt;
&lt;p&gt;Si es una metodología&amp;hellip; ¿Dónde están los roles necesarios? ¿Y sus fases de
trabajo? ¿Qué entregables hay que gestionar?&lt;/p&gt;
&lt;h2 id=&#34;mi-experiencia&#34;&gt;Mi experiencia&lt;/h2&gt;
&lt;p&gt;Es muy bonito eso de pensar en que cada equipo tiene su DevOps, que comparten
infraestructuras y conocimientos y ayudan al bien de la empresa.&lt;/p&gt;
&lt;p&gt;Sin embargo, la realidad es que:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;los equipos se crean y destruyen de acuerdo con las necesidades de la empresa.&lt;/li&gt;
&lt;li&gt;las personas tienden a ponerse enfermas, coger vacaciones y abandonar la
empresa.&lt;/li&gt;
&lt;li&gt;No todos tenemos los mismos conocimientos.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;¿Qué ocurre cuando el DevOps no está? Si es un equipo, otro puede tomar el
relevo, pero si es un rol o una persona del equipo, es un problema.&lt;/p&gt;
&lt;p&gt;La solución obvia es crear un equipo, pero éste termina gestionando más y más
hardware hasta que termina degradándose a sistemas y deja de cumplir la
funcionalidad de DevOps.&lt;/p&gt;
&lt;p&gt;Y claro, la evolución a esto es abstraerse y verlo como una metodología, pero no
hay nada especificado y todo es muy difuso, así que depende de la dirección de
la empresa que se entienda su puesto o no&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;conclusión&#34;&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;En realidad, más que una &lt;em&gt;metodología&lt;/em&gt;, DevOps es una &lt;em&gt;filosofía&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Lo primero que debe plantearse la empresa es &lt;strong&gt;si necesita un DevOps&lt;/strong&gt;, y qué
objetivos se buscan con él. Si Desarrollo trabaja bien con Sistemas, a lo mejor
no es necesario.&lt;/p&gt;
&lt;p&gt;El término DevOps nació en una conferencia de Agile, por lo que veo lógico que
la definición de DevOps sea ágil. En un momento dado, una empresa puede
necesitar un DevOps por grupo, un equipo determinado o un coach. O incluso una
mezcla de varios de éstos. En realidad, no importa.&lt;/p&gt;
&lt;p&gt;Lo que importa es mejorar la forma de trabajar de la empresa. Lo que importan
son &lt;strong&gt;los individuos y las interacciones&lt;/strong&gt; por encima de &lt;em&gt;procesos y
herramientas&lt;/em&gt;. Importa que &lt;strong&gt;el software funcione&lt;/strong&gt;, y poder &lt;strong&gt;responder al
cambio&lt;/strong&gt;. ¿Os suena de algo? Sí, está en el &lt;a href=&#34;http://agilemanifesto.org/&#34;&gt;Agile Manifest&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Si una persona, un equipo o cambiar la forma de trabajar puede ayudarte a
conseguir estos objetivos, entonces merece la pena.&lt;/p&gt;
&lt;p&gt;Si deja de serlo, cambia tu forma de trabajar, prueba a realizar algún cambio. Adáptate de forma ágil.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>http://example.org/blog/docker/</link>
      <pubDate>Tue, 21 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/docker/</guid>
      <description>
        
          &lt;p&gt;La vida de un DevOps está llena de &lt;em&gt;palabros&lt;/em&gt; raros. Uno que suena mucho
últimamente es el de &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;, pero&amp;hellip; ¿qué es exactamente? ¿Por qué está tan de moda?&lt;/p&gt;
&lt;p&gt;En este post contaré cómo lo veo yo y por qué no sólo que los &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; han venido para quedarse, sino que están revolucionando la industria.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;http://example.org/images/containers.jpg&#34;
         alt=&#34;Docker no es otra cosa más que un container&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;qué-es-un-docker&#34;&gt;Qué es un Docker&lt;/h2&gt;
&lt;p&gt;Un &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; es una manera de empaquetar una infraestructura.&lt;/p&gt;
&lt;p&gt;Imaginad un &lt;code&gt;.deb&lt;/code&gt; que lo trae todo configurado como lo necesitáis, listo para trabajar; pues es aún más, ya que permite tener distintas versiones de todas sus dependencias.&lt;/p&gt;
&lt;p&gt;Otro &lt;em&gt;palabro&lt;/em&gt; que está de moda es la &lt;strong&gt;Orquestación&lt;/strong&gt;. Hay muchas herramientas
como &lt;a href=&#34;https://puppetlabs.com/&#34;&gt;Puppet&lt;/a&gt;, &lt;a href=&#34;https://www.chef.io&#34;&gt;Chef&lt;/a&gt;, &lt;a href=&#34;http://saltstack.com/&#34;&gt;Salt&lt;/a&gt; o &lt;a href=&#34;http://www.ansible.com&#34;&gt;Ansible&lt;/a&gt;, pero &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; va aún más lejos en busca de una &lt;strong&gt;Infraestructura inmutable&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;La idea original detrás de &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; no es nueva. Hace ya muchos años que un
colega me hablaba de las &lt;strong&gt;jaulas&lt;/strong&gt;, contenedores que permiten correr procesos.
&lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; ha perfeccionado esas jaulas, permitiendo su empaquetado, distribución y
definición.&lt;/p&gt;
&lt;p&gt;Todo comienza en un &lt;strong&gt;Dockerfile&lt;/strong&gt;, como veremos más adelante.&lt;/p&gt;
&lt;h2 id=&#34;conceptos&#34;&gt;Conceptos&lt;/h2&gt;
&lt;p&gt;Hay algunos conceptos es importante tener en cuenta a la hora de trabajar con
&lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Dockerfile&lt;/em&gt;
Es un archivo que permite definir las &lt;strong&gt;imágenes&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;imagen&lt;/em&gt;
Consiste en un conjunto de aplicaciones empaquetadas. En este paquete va todo: dependencias, configuración, puertos expuestos, etc. Sin embargo, éstos no son usables, ya que no están en ejecución.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;container o contenedor&lt;/em&gt;
Es una instancia de una &lt;strong&gt;imagen&lt;/strong&gt; en ejecución. Es lo que usaremos.&lt;/p&gt;
&lt;p&gt;Tanto las &lt;em&gt;imágenes&lt;/em&gt; como los &lt;em&gt;containers&lt;/em&gt; tienen un nombre consistente en una hash, algo como &lt;code&gt;b02610296ec7&lt;/code&gt;, pero pueden tener un alias más fácil de recordar.&lt;/p&gt;
&lt;h2 id=&#34;ejemplo-rabbitmq&#34;&gt;Ejemplo: RabbitMQ&lt;/h2&gt;
&lt;h3 id=&#34;generando-las-imágenes&#34;&gt;Generando las imágenes&lt;/h3&gt;
&lt;p&gt;Vamos con un ejemplo pequeño: vamos a crear un docker que ejecute un &lt;a href=&#34;https://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt;.
Vamos a hacer lo mismo que hicimos en el artículo &lt;a href=&#34;http://example.org/blog/colas-de-mensajes-rabbitmq/&#34;&gt;Colas de mensajes: RabbitMQ&lt;/a&gt;.
Para ello vamos con un &lt;strong&gt;Dockerfile&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; debian:8.1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;MAINTAINER&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; Miguel Angel Garcia &amp;lt;miguelangel@magmax.org&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    apt-get update &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    apt-get install -y rabbitmq-server&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    rabbitmq-plugins enable rabbitmq_management &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    rabbitmqctl add_vhost /my_vhost &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    rabbitmqctl add_user my_user my_pass &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    rabbitmqctl set_permissions -p /my_vhost my_user &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    rabbitmqctl set_user_tags my_user management monitoring &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    /etc/init.d/rabbitmq-server stop&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CMD&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rabbitmq-server&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Expose ports.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;EXPOSE&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; 5672&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;EXPOSE&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; 15672&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ahora utilizaremos el &lt;strong&gt;Dockerfile&lt;/strong&gt; para generar una &lt;strong&gt;imagen&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;docker build .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y nos vamos a tomar un café. Aquí &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; hará de las suyas, descargándose la imagen base (en nuestro caso, &lt;code&gt;debian:8.1&lt;/code&gt;) y ejecutando todas las órdenes de &lt;code&gt;RUN&lt;/code&gt;. Cada orden &lt;code&gt;RUN&lt;/code&gt; generará una imagen intermedia que ocupará espacio, pero son puntos de &lt;em&gt;&amp;ldquo;checkpoint&amp;rdquo;&lt;/em&gt;, ya que generará el resto de imágenes a partir de ahí.&lt;/p&gt;
&lt;p&gt;Si optamos por varios &lt;code&gt;RUN&lt;/code&gt; es importante el orden, ya que cualquier modificación regenerará todas las imágenes tras ella. Por ejemplo, si creemos que vamos a cambiar la contraseña del usuario con frecuencia, sería más eficiente usar algo así:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; debian:8.1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;MAINTAINER&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; Miguel Angel Garcia &amp;lt;miguelangel@magmax.org&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    apt-get update &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    apt-get install -y rabbitmq-server&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; rabbitmq-plugins enable rabbitmq_management&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; rabbitmqctl add_vhost /my_vhost&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    rabbitmqctl add_user my_user my_pass &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    rabbitmqctl set_permissions -p /my_vhost my_user &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    rabbitmqctl set_user_tags my_user management monitoring &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    /etc/init.d/rabbitmq-server stop&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Esto generará 5 imágenes reutilizables. Si modificamos la contraseña, hay tres imágenes que se reusarán, haciendo el proceso de &lt;code&gt;build&lt;/code&gt; mucho más rápido.&lt;/p&gt;
&lt;p&gt;Un poco más abajo vemos la orden &lt;code&gt;CMD&lt;/code&gt;, que es la orden por defecto a ejecutar cuando lancemos el &lt;em&gt;container&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Finalmente, un par de &lt;code&gt;EXPOSE&lt;/code&gt;, que son puertos que queremos exportar. Lo veremos ahora en la parte de ejecución.&lt;/p&gt;
&lt;p&gt;También podríamos haber visto un &lt;code&gt;ADD&lt;/code&gt;, que copia archivos de la máquina actual a la jaula o &lt;code&gt;VOLUME&lt;/code&gt;, que sirve para crear puntos de montaje, pero para este artículo es suficiente con &lt;code&gt;FROM&lt;/code&gt;, &lt;code&gt;MAINTAINER&lt;/code&gt;, &lt;code&gt;RUN&lt;/code&gt;, &lt;code&gt;CMD&lt;/code&gt; y &lt;code&gt;EXPOSE&lt;/code&gt;. No os creáis que hay muchas órdenes más.&lt;/p&gt;
&lt;p&gt;Una vez construida la imagen podemos listarla:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ docker images
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&amp;lt;none&amp;gt;              &amp;lt;none&amp;gt;              5e98d103b422        &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; seconds ago      229.1 MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;ejecutando-un-docker&#34;&gt;Ejecutando un docker&lt;/h3&gt;
&lt;p&gt;Lo siguiente es ejecutar un docker. Lo primero que tenemos que ver son los
puntos de montaje, variables y puertos que exponga. En este caso sólo explicaré
los puertos expuestos. Es importante porque alterarán los argumentos con los que
llamar al &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En nuestro caso, vamos a mapear los puertos locales 35000 y 35001 a los de la máquina 5672 y 15672, respectivamente:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;docker run -i -p 35000:5672 -p 35001:15672 5e98d103b422
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Explico los argumentos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-i&lt;/code&gt; Modo interactivo. Útil para depurar y ver qué está pasando dentro del &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p 35000:5672&lt;/code&gt; Mapeo el puerto 35000 local al 5672&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p 35001:15672&lt;/code&gt; Mapeo el puerto 35001 local al 15672&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5e98d103b422&lt;/code&gt; Hash o nombre de la imagen a ejecutar.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ahora podemos ver el &lt;em&gt;container&lt;/em&gt; corriendo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ docker ps
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;CONTAINER ID        IMAGE                 COMMAND             CREATED             STATUS              PORTS                                               NAMES
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;859bd82d0f8a        5e98d103b422:latest   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rabbitmq-server&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; minutes ago       Up &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; minutes        0.0.0.0:35000-&amp;gt;5672/tcp, 0.0.0.0:35001-&amp;gt;15672/tcp   suspicious_turing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Por defecto &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; da nombres graciosos a todos los containers, como &amp;ldquo;suspicious_turing&amp;rdquo; :D&lt;/p&gt;
&lt;p&gt;Y podemos conectarnos a http://localhost:35001, donde está la interfaz de
nuestro precioso &lt;a href=&#34;https://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;otras-órdenes-interesantes&#34;&gt;Otras órdenes interesantes&lt;/h2&gt;
&lt;p&gt;Para terminar, veamos otras órdenes interesantes, como parar un &lt;em&gt;container&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ docker stop 2b415bcb6009
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;O volver a lanzarlo (notad que ya no es necesario indicar el mapeo de puertos):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ docker start 2b415bcb6009
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Mostrar todos los &lt;em&gt;containers&lt;/em&gt; disponibles:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ docker ps -a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Eliminar un &lt;em&gt;container&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ docker rm 2b415bcb6009
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Mostrar todas las &lt;em&gt;imágenes&lt;/em&gt; disponibles:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ docker images
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Eliminar una &lt;em&gt;imagen&lt;/em&gt; que no tiene &lt;em&gt;containers&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ docker rmi 5e98d103b422
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;O forzar el borrado de una &lt;em&gt;imagen&lt;/em&gt; a pesar de tener &lt;em&gt;containers&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ docker rmi -i 5e98d103b422
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finalmente, un aviso: &lt;strong&gt;El nombre del container o su hash siempre es el último argumento de cualquier órden&lt;/strong&gt;. Eso es algo que me ha vuelto loco en alguna ocasión.&lt;/p&gt;
&lt;h2 id=&#34;ventajas-e-inconvenientes&#34;&gt;Ventajas e inconvenientes&lt;/h2&gt;
&lt;p&gt;¿Qué ventajas ofrece este sistema de empaquetado?&lt;/p&gt;
&lt;p&gt;La primera, que &lt;strong&gt;una vez creada la imagen podemos lanzar varias instancias de la misma&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ docker run -d -p 35000:5672 -p 35001:15672 5e98d103b422
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;f99518d24970fe5d39787340e25947851daba31c8dea7e8c4380f23f4bb82d19
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;$ docker run -d -p 36000:5672 -p 36001:15672 5e98d103b422
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;2b415bcb600995b80874e1109a1ad1320f20162ce1efac58637a1c8a04b7d439
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;$ docker ps
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;CONTAINER ID        IMAGE                 COMMAND             CREATED             STATUS              PORTS                                               NAMES
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;2b415bcb6009        5e98d103b422:latest   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rabbitmq-server&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; seconds ago       Up &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; seconds        0.0.0.0:36000-&amp;gt;5672/tcp, 0.0.0.0:36001-&amp;gt;15672/tcp   prickly_babbage
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt;f99518d24970        5e98d103b422:latest   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rabbitmq-server&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; seconds ago      Up &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; seconds       0.0.0.0:35000-&amp;gt;5672/tcp, 0.0.0.0:35001-&amp;gt;15672/tcp   grave_stallman
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y tener una escuchando en el pueto 35001 y otra en el 36002 (la opción &lt;code&gt;-d&lt;/code&gt; es para lanzar en segundo plano). Con un par de scripts resultaría sencillo montarse un cluster, ¿no?&lt;/p&gt;
&lt;p&gt;Otra ventaja es la &lt;strong&gt;inmutabilidad&lt;/strong&gt;. Si tenemos una infraestructura montada con
&lt;a href=&#34;https://puppetlabs.com/&#34;&gt;Puppet&lt;/a&gt;, &lt;a href=&#34;https://www.chef.io&#34;&gt;Chef&lt;/a&gt;, &lt;a href=&#34;http://saltstack.com/&#34;&gt;Salt&lt;/a&gt; o &lt;a href=&#34;http://www.ansible.com&#34;&gt;Ansible&lt;/a&gt;, nada impide que entre dos ejecuciones se
haya cambiado una librería (la típica &lt;em&gt;libc6&lt;/em&gt;) que provoque fallos de
instalación o, lo que es mucho peor, de ejecución. Sin embargo, con las imágenes
de &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; estamos seguros de que todas las máquinas son iguales.&lt;/p&gt;
&lt;p&gt;Recomiendo leer el artículo &lt;a href=&#34;https://boxfuse.com/blog/no-ssh.html&#34;&gt;Immutable Infrastructure: No SSH&lt;/a&gt; que habla sobre la inmutabilidad y los contenedores, y que ha sido en gran parte la inspiración para este artículo.&lt;/p&gt;
&lt;p&gt;Sólo queda recordar que todo lo que ocurra dentro de un &lt;em&gt;container&lt;/em&gt; no se replica en otros &lt;em&gt;containers&lt;/em&gt; y se eliminará con éste. Existe la opción de jugar con los &lt;code&gt;VOLUME&lt;/code&gt; (que quizá explique en otro artículo), para compartir un directorio entre el host y el &lt;em&gt;container&lt;/em&gt; .&lt;/p&gt;
&lt;p&gt;Como inconvenientes (gracias, Ángel), se puede mencionar la propia
&lt;strong&gt;inmutabilidad&lt;/strong&gt;, ya que hasta que se le coge el truco puede provocar pérdidas
de datos.&lt;/p&gt;
&lt;p&gt;Otro inconveniente es el pequeño &lt;em&gt;overhead&lt;/em&gt; que provocan los contenedores,
aunque si se usan varias imágenes que compartern &lt;em&gt;layers&lt;/em&gt; el resultado final es
mínimo.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>En busca de los cinco 9s: Calculando la disponibilidad de sistemas complejos</title>
      <link>http://example.org/blog/en-busca-de-los-cinco-9s/</link>
      <pubDate>Sat, 13 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/en-busca-de-los-cinco-9s/</guid>
      <description>
        
          &lt;p&gt;Este artículo es la traducción del artículo &lt;a href=&#34;http://www.edgeblog.net/2007/in-search-of-five-9s/&#34;&gt;In search of five 9s: Calculating
Availability of Complex Systems&lt;/a&gt;, publicado por Bill el 29 de Octubre de 2007.
Dado que el artículo original tiene demasiado texto, me he visto obligado a
modificar la maquetación y añadir títulos.&lt;/p&gt;
&lt;p&gt;Puede parecer un poco largo, pero es realmente interesante. Aunque tiene muchas
fórmulas es sencillo de entender, gracias a los ejemplos.&lt;/p&gt;
&lt;p&gt;Y he elegido este artículo porque con el &lt;strong&gt;cloud&lt;/strong&gt; que está tan de moda resulta
sencillo y relativamente barato redundar máquinas.&lt;/p&gt;
&lt;p&gt;Además, éste es el tipo de artículos que realmente me hacen sentir como Ingeniero.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;hr&gt;
&lt;figure&gt;
    &lt;img src=&#34;http://example.org/images/uptime.jpg&#34;
         alt=&#34;Uptime&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;disponibilidad-y-sla&#34;&gt;Disponibilidad y SLA&lt;/h2&gt;
&lt;p&gt;He pasado los últimos días tratando de desarrollar un modelo matemático simple para predecir la disponibilidad esperada en sistemas complejos. En IT se nos suele pedir que desarrollemos y cumplamos acuerdos de nivel de servicio
(&lt;abbr title=&#34;Acuerdos de Nivel de Servicio o Server Level Agreements&#34;&gt;SLAs&lt;/abbr&gt;
).
Si no se analizan los puntos de fallo de un sistema, y después se calcula la
disponibilidad del sistema, el
(&lt;abbr title=&#34;Acuerdo de Nivel de Servicio o Server Level Agreement&#34;&gt;SLA&lt;/abbr&gt;
).
es defectuoso desde el principio. Para
complicar aún más las cosas, diferentes personas tienen diferentes definiciones
de disponibilidad. Por ejemplo: ¿cuenta un &lt;em&gt;downtime&lt;/em&gt; planificado de
mantenimiento en sus cálculos de disponibilidad del sistema?&lt;/p&gt;
&lt;p&gt;Definiciones de Disponibilidad Comunes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Disponibilidad =
&lt;abbr title=&#34;Media del tiempo entre fallos&#34;&gt;MTBF&lt;/abbr&gt;
 / (
&lt;abbr title=&#34;Media del tiempo de recuperación&#34;&gt;MTTR&lt;/abbr&gt;
 +
&lt;abbr title=&#34;Media del tiempo entre fallos&#34;&gt;MTBF&lt;/abbr&gt;

). Ésta es una definición clásica de disponibilidad y es frecuentemente usada por fabricantes de hardware cuando publican una métrica de disponibilidad para un determinado servidor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Disponibilidad = (Uptime + Scheduled Maintenance)/(Unscheduled Downtime + Uptime + Scheduled Maintenance). Consiste en una métrica centrada en IT donde el negocio puede permitirse &lt;em&gt;downtimes&lt;/em&gt; durante horas. Este modelo funciona para determinados sistemas, como un servidor de ficheros que no se necesita durante la noche, pero no funciona bien para servicios web, a pesar de que muchas compañías aún lo usan para sus
&lt;abbr title=&#34;SLAs (Acuerdos de Nivel de Servicio o Server Level Agreement)&#34;&gt;SLAs&lt;/abbr&gt;
.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Disponibilidad = Uptime/(Uptime + Downtime). Es la métrica que mejor aplica para servicios que se necesitan 24x7, como sitios de comercio electrónico.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Normalmente se expresa la disponibilidad como un porcentaje. En ocasiones, la gente hace referencia a los &lt;em&gt;&amp;ldquo;cuatro nueves&amp;rdquo;&lt;/em&gt; (99.99%) o los &lt;em&gt;&amp;ldquo;cinco nueves&amp;rdquo;&lt;/em&gt; (99.999%). Para simplificar las cosas, en la siguiente tabla se muestran los minutos de &lt;em&gt;downtime&lt;/em&gt; al año permitidos para un nivel determinado:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Disponiblidad&lt;/th&gt;
&lt;th&gt;Min Downtime/Año&lt;/th&gt;
&lt;th&gt;HorasDowntime/Año&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;95.000%&lt;/td&gt;
&lt;td&gt;26,298&lt;/td&gt;
&lt;td&gt;438&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;98.000%&lt;/td&gt;
&lt;td&gt;10,519&lt;/td&gt;
&lt;td&gt;175&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;98.500%&lt;/td&gt;
&lt;td&gt;7,889&lt;/td&gt;
&lt;td&gt;131&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;99.000%&lt;/td&gt;
&lt;td&gt;5,260&lt;/td&gt;
&lt;td&gt;88&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;99.500%&lt;/td&gt;
&lt;td&gt;2,630&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;99.900%&lt;/td&gt;
&lt;td&gt;526&lt;/td&gt;
&lt;td&gt;8.8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;99.990%&lt;/td&gt;
&lt;td&gt;52.6&lt;/td&gt;
&lt;td&gt;.88&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;99.999%&lt;/td&gt;
&lt;td&gt;5.26&lt;/td&gt;
&lt;td&gt;.088&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Basándose en la tabla anterior, se puede comprobar que hay una gran diferencia entre un
&lt;abbr title=&#34;Acuerdo de Nivel de Servicio o Server Level Agreement&#34;&gt;SLA&lt;/abbr&gt;

que especifique  un 99% de disponibilidad (88 horas de &lt;em&gt;downtime&lt;/em&gt; al año) y 99.9% de disponibilidad (8.8 horas de &lt;em&gt;downtime&lt;/em&gt; al año). Pero ¿cómo se puede estar seguro de cuál es el &lt;em&gt;downtime&lt;/em&gt; esperado de un sistema? En su form más simplista, la disponibilidad esperada de un sistema es la disponibilidad esperada de cada una de sus partes multiplicadas entre sí. De esta manera, si el sistema tiene dos servidores, y cada servidor tiene una disponibilidad esperada del 99%, entonces la disponibilidad del sistema sería \(99\% * 99\% = 98.01\%\). Nota: He usado la expresión &amp;ldquo;disponibilidad esperada&amp;rdquo;. Estamos calculando el futuro esperado de un sistema sobre un periodo de tiempo, no la disponibilidad histórica. Para el resto de este artículo, eliminaré el término &amp;ldquo;esperada&amp;rdquo; por brevedad, pero está siempre implícito.&lt;/p&gt;
&lt;h2 id=&#34;sistemas-compuestos&#34;&gt;Sistemas compuestos&lt;/h2&gt;
&lt;p&gt;El modelo simplista de más arriba es útil para mostrar que el &lt;em&gt;downtime&lt;/em&gt; es acumulativo. En otras palabras, si se espera que un componente esté fuera de línea 88 horas/año, y un fallo de cualquier componente es un fallo del sistema, entonces el sistema tiene un &lt;em&gt;downtime&lt;/em&gt; esperado de 174 horas. ¿Por qué no 176 horas? Bueno, ocasionalmente ambos componentes estarán caídos al mismo tiempo.&lt;/p&gt;
&lt;p&gt;Los sistemas del mundo real nunca son tan simples. Típicamente el sistema estará compuesto de múltiples componentes, con redundancia, y cada uno con distinto nivel de disponibilidad por componente. Modelar esto requiere fórmulas algo más complicadas, pero en cuanto se tengan claros los conceptos, los nuevos cálculos pueden hacerse rápidamente en una hoja Excel. Antes de continuar necesitamos algo de notación básica para simplificar nuestras fórmulas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Disponibilidad del componente 1: \(Ac_1\)&lt;/li&gt;
&lt;li&gt;Disponibilidad del componente 2: \(Ac_2\)&lt;/li&gt;
&lt;li&gt;Disponibilidad del componente 3: \(Ac_3\)&lt;/li&gt;
&lt;li&gt;Disponibilidad del componente N: \(Ac_N\)&lt;/li&gt;
&lt;li&gt;Sistema de disponibilidad: \(As\)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Y dicho esto, estamos listos para nuestra primera fórmula. Cuando un sistema está constituído por N componentes que son puntos únicos de fallo, la disponibilidad del sistema se puede calcular como:&lt;/p&gt;
&lt;p&gt;$$
As = Ac_1 * Ac_2 * Ac_3 * &amp;hellip; Ac_n
$$&lt;/p&gt;
&lt;h3 id=&#34;ejemplo&#34;&gt;Ejemplo&lt;/h3&gt;
&lt;p&gt;Consideremos un sitio de comercio electrónico 24x7 con muchos puntos únicos de fallo. Se podría modelar el sistema con los 8 componentes siguientes:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Component&lt;/th&gt;
&lt;th&gt;Availability&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Web&lt;/td&gt;
&lt;td&gt;85%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Application&lt;/td&gt;
&lt;td&gt;90%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Database&lt;/td&gt;
&lt;td&gt;99.9%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DNS&lt;/td&gt;
&lt;td&gt;98%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Firewall&lt;/td&gt;
&lt;td&gt;85%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Switch&lt;/td&gt;
&lt;td&gt;99%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data Center&lt;/td&gt;
&lt;td&gt;99.99%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ISP&lt;/td&gt;
&lt;td&gt;95%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Si cualquiera de estos componentes falla, el sistema caerá. La disponibilidad esperada del sistema sería \(85\%*90\%*99.9\%*98\%*85\%*99\%*99.99\%*95\% = 59.87\%\). Nótese que se modela cada componente como un todo, en lugar de mirar cada una de sus partes. Se podría dividir el servicio web en el software (Apache), el código (nuestra web) y el hardware (placa base, discos duros, etc). Para nuestros propósitos, la complejidad no mejora necesariamente el modelo, así que trabajaremos con el servicio como un todo. Además, para esta discusión se utilizará la tercera definición de disponibilidad de arriba. Para nuestros usuarios, no importa si el sistema está caído por mantenimiento o por un disco duro roto.&lt;/p&gt;
&lt;h2 id=&#34;mejorar-la-disponibilidad&#34;&gt;Mejorar la disponibilidad&lt;/h2&gt;
&lt;p&gt;Si queremos conservar nuestros trabajos, necesitamos encontrar una manera de mejorar esta disponibilidad. Los objetivos obvios para mejorar la estabilidad del sitio son la web y el firewall. La pregunta es qué efecto tendría en la disponibilidad de la web añadir otro servidor. Con esto llegamos a la segunda ecuación. Cuando un sistema está compuesto por dos componentes redundantes, la disponibilidad del sistema se puede calcular como:&lt;/p&gt;
&lt;p&gt;$$
As = Ac_1 + ((1 – Ac_1) * Ac_2)
$$&lt;/p&gt;
&lt;h3 id=&#34;ejemplo-1&#34;&gt;Ejemplo&lt;/h3&gt;
&lt;p&gt;Usando nuestro ejemplo del servidor web con disponibilidad de 85%, añadir un segundo servidor incrementaría la disponibilidad a \(85\% + (1-85\%)*85\% = 97.75\%\). La lógica detrás de esto es que mientras el primer servidor está caído (15% del tiempo) el segundo servidor estará arriba el 85% del tiempo. Esto podría traducirse o no a la disponibilidad en el mundo real. Por ejemplo, si el servicio web está caído tan a menudo porque necesitamos desplegar nuestro código constantemente, añadir un segundo servidor debería traducirse en un incremento de la disponibilidad, ya que se puede desplegar código en el servidor fuera de línea mientras el otro servidor continúa funcionando. En este caso, el incremento de nuestra disponibilidad real debería ser mayor del 12.75%. En caso contrario, si el servicio se cae por errores de código, añadir un segundo servidor podría empeorar la disponibilidad debido al desesperante error.&lt;/p&gt;
&lt;p&gt;La idea es que, en general, si has calculado rigurosamente la disponibilidad del componente, la ecuación funcionará. Nótese que la ecuación funcionará igualmente si los componentes tienen distinta estimación de disponibilidad. Supongamos que el servidor web tiene un problema de disponibilidad porque el hardware está subdimensionado. Ahora supongamos que el segundo servidor que hemos comprado tiene el doble de capacidad y determinamos que por sí mismo daría una disponibilidad del 90%, por lo que la ecuación cambia a \(85\% + (1-85\%)*90\% = 98.5\%\).&lt;/p&gt;
&lt;p&gt;Volvamos al cálculo del sistema anterior y añadamos esto. Asumiendo que se ha añadido un segundo servidor web y un segundo firewall, incrementando la disponibilidad de estos componentes del sistema a 97.75%. Ahora la disponibilidad de nuestro nuevo sistema sería \(97.75\%*90\%*99.9\%*98\%*97.75\%*99\%*99.99\%*95\% = 79.10\%\). Mejor, pero aún no es buena. Es difícil conseguir cualquier nivel de alta disponibilidad cuando se tienen puntos únicos de fallo. Así que asumamos que añadimos componentes redundantes en todos nuestros servidores y equipos de red. Asumamos un segundo ISP para diversificar el transporte, pero aún estamos en un único
&lt;abbr title=&#34;Centro de Proceso de Datos, o DataCenter&#34;&gt;CPD&lt;/abbr&gt;
.
Nuestra ecuación sería ahora: \(97.75\%*99\%*99.9999\%*99.96\%*97.75\%*99.99\%*99.99\%*99.75\% = 94.3\%\). Mejorando. Eliminando los puntos únicos de fallo se mejoró la disponibilidad del sistema del 60% (3506 horas de downtime/año) a 94.3% (500 horas de downtime/año).&lt;/p&gt;
&lt;h3 id=&#34;generalizando-la-fórmula&#34;&gt;Generalizando la fórmula&lt;/h3&gt;
&lt;p&gt;La ecuación #2 de más arriba modelaba cómo añadir un único componente. En algunos casos es necesario añadir más de un componente redundante. Por ejemplo, se podrían tener más de dos servidores web. En este caso es necesario iterar la ecuación #2 varias veces para agrupar el efecto de los componentes adicionales, lo que implica una tercera ecuación. Cuando se intenta calcular la disponibilidad de un servicio con n componentes redundantes, se calcula:&lt;/p&gt;
&lt;p&gt;$$
As = Ac_{n-1} + ((1 – Ac_{n-1}) * Ac_n)
$$&lt;/p&gt;
&lt;h3 id=&#34;ejemplo-2&#34;&gt;Ejemplo&lt;/h3&gt;
&lt;p&gt;En el caso de nuestro servidor web, añadir un tercer servidor cambia la disponibilidad a: \(97.75\% + (1-97.75\%)*85\% = 99.6625\%\). Añadiendo un cuarto servidor incrementaría la disponibilidad a: \(99.6625\% + (1-99.6625\%)*85\% = 99.949\%\). Nótese que hay una disminución de ganancia. Añadiendo el segundo servidor incrementó la disponibilidad en un 12.75%. Añadir el tercero sólo hizo ganar 1.9125%. El cuarto servidor nos da un insignificante .2865%. E incluso con 3 servidores más para distribuir nuestra carga, aún no se han conseguido los elusivos cuatro nueves de disponibilidad. Diseñar un sistema altamente disponible requiere que cada componente individual sea altamente disponible Y añadir redundancia en los componentes. Si el servidor web individual de nuestro sistema tuviera una disponibilidad del 90% en lugar del 85%, entonces la disponibilidad de los dos servidores sería del 99% y los tres servidores tendrían un 99.99%.&lt;/p&gt;
&lt;p&gt;Las ecuaciones #2 y #3 tienen un defecto, ya que asumen que cada componente independiente puede manejar la carga, y que la carga es constante. ¿Qué ocurre si bajo operativa normal un servidor web puede manejar la carga, pero en pico se necesitan tres servidores? En ese caso la disponibilidad de los tres servidores en carga normal sería de 99.775%, mientras que en pico bajaría hasta el 85%. En un pico de carga, la caída de uno de los servidores podría significar una pérdida de servicio, por lo que se transforma a la disponibilidad de una única caja. ¿Y si el pico de carga requiere 2 servidores? En este caso la disponibilidad en pico sería del 97.75%. Si el pico require dos servidores y tenemos tres, la disponibilidad sería equivalente a tener dos servidores. El concepto importante aquí es que &lt;strong&gt;hay una relación inversa entre la carga y la disponibilidad&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;redundando-el-cpd&#34;&gt;Redundando el CPD&lt;/h2&gt;
&lt;p&gt;Debería ser obvio a estas alturas unos verdaderos altos niveles de disponibilidad (99.9% - 99.999%) es muy difícil y muy caro. Uno de los puntos únicos de fallo más caros a eliminar es el propio
&lt;abbr title=&#34;Centro de Proceso de Datos, o DataCenter&#34;&gt;CPD&lt;/abbr&gt;
.
En la mayoría de los casos, doblará el coste de la infraestructura, e incluso podría ser más del doble, ya que será necesario invertir en tecnologías para sincronizar ambos
&lt;abbr title=&#34;Centros de Proceso de Datos, o DataCenters&#34;&gt;CPDs&lt;/abbr&gt;
.&lt;/p&gt;
&lt;p&gt;De todas formas consideremos añadir un nuevo
&lt;abbr title=&#34;Centro de Proceso de Datos, o DataCenter&#34;&gt;CPD&lt;/abbr&gt;
.
En el ejemplo de arriba, la disponibilidad de nuestro sistema con servidores e
ISPs redundantes era del 94.3%. Añadir un segundo
&lt;abbr title=&#34;Centro de Proceso de Datos, o DataCenter&#34;&gt;CPD&lt;/abbr&gt;

con la tecnología
necesaria para permitir que ambos trabajen de forma activo-activo (ambos centros
reciben tráfico al mismo tiempo) incrementaría nuestra disponibilidad a
\(94.3\% + (1-94.3\%)*94.3\% = 99.675\%\). ¡Añadir un nuevo
&lt;abbr title=&#34;Centro de Proceso de Datos, o DataCenter&#34;&gt;CPD&lt;/abbr&gt;

puede ahorrar hasta 471 horas de downtime al año!&lt;/p&gt;
&lt;p&gt;En este ejemplo se asume que cada
&lt;abbr title=&#34;Centro de Proceso de Datos, o DataCenter&#34;&gt;CPD&lt;/abbr&gt;

es un sistema independiente, por lo que el fallo de un sistema en un
&lt;abbr title=&#34;Centro de Proceso de Datos, o DataCenter&#34;&gt;CPD&lt;/abbr&gt;

sería un fallo de todo el sistema en ese centro. No siempre es así. Por ejemplo,
si se diseña correctamente, un servidor web podría conectarse a la base de datos
del otro
&lt;abbr title=&#34;Centro de Proceso de Datos, o DataCenter&#34;&gt;CPD&lt;/abbr&gt;
.
En este caso la disponibilidad sería mayor del 99.675%. Si se pudiera diseñar el
&lt;em&gt;site&lt;/em&gt; de manera que cada sistema operara de forma independiente al resto de
servicios, la disponibilidad en el ejemplo se incrementaría del 99.675% al
99.888% (cada servicio tendría 3 componentes redundantes, excepto el
&lt;abbr title=&#34;Centro de Proceso de Datos, o DataCenter&#34;&gt;CPD&lt;/abbr&gt;

que sólo tendría uno).&lt;/p&gt;
&lt;h3 id=&#34;excel&#34;&gt;Excel&lt;/h3&gt;
&lt;p&gt;Estas fórmulas son mucho más sencillas de mostrar en Excel. Pegue la siguiente tabla en una hoja de cálculo, comenzando en la casilla A1:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Avail %&lt;/th&gt;
&lt;th&gt;1 Component&lt;/th&gt;
&lt;th&gt;2 Components&lt;/th&gt;
&lt;th&gt;3 Components&lt;/th&gt;
&lt;th&gt;4 Components&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Web&lt;/td&gt;
&lt;td&gt;85%&lt;/td&gt;
&lt;td&gt;=B2+((1-B2)*$B2)&lt;/td&gt;
&lt;td&gt;=C2+((1-C2)*$B2)&lt;/td&gt;
&lt;td&gt;=D2+((1-D2)*$B2)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Application&lt;/td&gt;
&lt;td&gt;90%&lt;/td&gt;
&lt;td&gt;=B3+((1-B3)*$B3)&lt;/td&gt;
&lt;td&gt;=C3+((1-C3)*$B3)&lt;/td&gt;
&lt;td&gt;=D3+((1-D3)*$B3)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Database&lt;/td&gt;
&lt;td&gt;99.9%&lt;/td&gt;
&lt;td&gt;=B4+((1-B4)*$B4)&lt;/td&gt;
&lt;td&gt;=C4+((1-C4)*$B4)&lt;/td&gt;
&lt;td&gt;=D4+((1-D4)*$B4)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DNS&lt;/td&gt;
&lt;td&gt;98%&lt;/td&gt;
&lt;td&gt;=B5+((1-B5)*$B5)&lt;/td&gt;
&lt;td&gt;=C5+((1-C5)*$B5)&lt;/td&gt;
&lt;td&gt;=D5+((1-D5)*$B5)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Firewall&lt;/td&gt;
&lt;td&gt;85%&lt;/td&gt;
&lt;td&gt;=B6+((1-B6)*$B6)&lt;/td&gt;
&lt;td&gt;=C6+((1-C6)*$B6)&lt;/td&gt;
&lt;td&gt;=D6+((1-D6)*$B6)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Switch&lt;/td&gt;
&lt;td&gt;99%&lt;/td&gt;
&lt;td&gt;=B7+((1-B7)*$B7)&lt;/td&gt;
&lt;td&gt;=C7+((1-C7)*$B7)&lt;/td&gt;
&lt;td&gt;=D7+((1-D7)*$B7)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data Center&lt;/td&gt;
&lt;td&gt;99.99%&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;=B8+((1-B8)*$B8)&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ISP&lt;/td&gt;
&lt;td&gt;95%&lt;/td&gt;
&lt;td&gt;=B9+((1-B9)*$B9)&lt;/td&gt;
&lt;td&gt;=C9+((1-C9)*$B9)&lt;/td&gt;
&lt;td&gt;=D9+((1-D9)*$B9)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;System Avail %&lt;/td&gt;
&lt;td&gt;=b2&lt;em&gt;b3&lt;/em&gt;b4&lt;em&gt;b5&lt;/em&gt;b6&lt;em&gt;b7&lt;/em&gt;b8*b9&lt;/td&gt;
&lt;td&gt;=c2&lt;em&gt;c3&lt;/em&gt;c4&lt;em&gt;c5&lt;/em&gt;c6&lt;em&gt;c7&lt;/em&gt;b8*c9&lt;/td&gt;
&lt;td&gt;=d2&lt;em&gt;d3&lt;/em&gt;d4&lt;em&gt;d5&lt;/em&gt;d6&lt;em&gt;d7&lt;/em&gt;d8*d9&lt;/td&gt;
&lt;td&gt;=e2&lt;em&gt;e3&lt;/em&gt;e4&lt;em&gt;e5&lt;/em&gt;e6&lt;em&gt;e7&lt;/em&gt;d8*e9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Ahora que tiene los conceptos claros y el principio de una hoja de cálculo para calcular los cambios de premisas, se puede centrar en aplicar estas teorías a su situación particular. Comenzando por descomponer su sistema, sea una web simple, un sistema de contabilidad o un sistema de ficheros, en servicios de componentes independientes. Para cada servicio, determine el número mínimo de unidades necesarias para trabajar, y la disponibilidad necesaria de cada unidad.&lt;/p&gt;
&lt;p&gt;Estimar la disponibilidad puede ser un reto. Una manera es mirar datos históricos. Si no se tiene acceso a buenos datos, se puede formar una estimación basada en los parámetros de su operativa estándar. Por ejemplo, si se despliega código nuevo del servicio web dos veces al mes y cada una causa un &lt;em&gt;downtime&lt;/em&gt; de 2 horas, se traduce en 48 horas de parada al año. Si se espera realizar labores de mantenimiento del sistema operativo una vez por trimestre, con un &lt;em&gt;downtime&lt;/em&gt; estimado de 2 horas por trimestre, serían otras 8 horas más al año. Si además se anticipa a un fallo hardware al año, con garantía de entrega el siguiente día hábil, se traduciría en 41 horas de &lt;em&gt;downtime&lt;/em&gt; al año (fallos en viernes se repararían el lunes, los sábados y domingos en martes). Sumando estos números obtenemos \(48 + 8 + 41 = 98\) horas de &lt;em&gt;downtime&lt;/em&gt; al año, o una disponibilidad estimada del 98.882%.&lt;/p&gt;
&lt;p&gt;Con un poco de esfuerzo, se puede estimar un nivel de disponibilidad realista
para su sistema. Éste es el pilar para crear
&lt;abbr title=&#34;Acuerdos de Nivel de Servicio o Server Level Agreements&#34;&gt;SLAs&lt;/abbr&gt;

realistas y cumplibles. Estas fórmulas pueden ayudar a IT a negociar los
&lt;abbr title=&#34;Acuerdos de Nivel de Servicio o Server Level Agreements&#34;&gt;SLAs&lt;/abbr&gt;

con negocio, y puede ayudar a comparar el
&lt;abbr title=&#34;Retorno Sobre la Inversión&#34;&gt;RSI&lt;/abbr&gt;

de diferentes soluciones. Por ejemplo, digamos que se está
intentando elegir una solución para el servidor web, y se tienen dos elecciones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La opción 1 consiste en 4 servidores usando hardware barato sin redundancia interna. Cada servidor cuesta 3.000 €. Estimamos la disponibilidad en un 75%.&lt;/li&gt;
&lt;li&gt;La opción 2 consiste en 2 servidores usando hardware caro con discos duros y fuentes de alimentación redundantes. Cada servidor cuesta 20.000 €. Estimas la disponibilidad de cada servidor en un 99%.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Se estima que el coste por &lt;em&gt;downtime&lt;/em&gt; es de 500€/hora, y se espera que estos servidores aguanten la carga del sistema los próximos 3 años, tras los cuales se reemplazarán. Usando los números de arriba, la solución #1 tiene una disponibilidad esperada del 99.6% a un coste de 12.000€. La solución #2 tiene una disponibilidad esperada del 99.99%, a un coste de $40.000€. La solución #1 experimentaría 34 horas/año, o 102 horas en los tres años, de &lt;em&gt;downtime&lt;/em&gt; más que la solución #2. En tres años, este &lt;em&gt;downtime&lt;/em&gt; extra costaría $51.000€. Por lo que el gasto de 28.000€ previo proporcionará un
&lt;abbr title=&#34;Retorno Sobre la Inversión&#34;&gt;RSI&lt;/abbr&gt;

en 3 años del 182%. Nótese que el modelo es tan bueno como lo sean las estimaciones. Si los servidores de la solución #2 sólo tuvieran el 95% de disponibilidad, la disponibilidad combinada sería del 99.75%, lo que sólo proporciona 13 horas menos de &lt;em&gt;downtime&lt;/em&gt; anual. En este caso sólo se ahorrarían 20,000€ en los 3 años por la inversión de 28.000€, por lo que podría ser mejor la opción #1.&lt;/p&gt;
&lt;h2 id=&#34;conclusión&#34;&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;Diseñar y operar sistemas de alta disponibilidad es un trabajo complicado, pero con unas pocas fórmulas sencillas, es posible entender y predecir su comportamiento general. Esto permitirá realizar mejores decisiones al elegir entre múltiples opciones, y hacer predicciones más realistas a la hora de negociar los
&lt;abbr title=&#34;Acuerdos de Nivel de Servicio o Server Level Agreement&#34;&gt;SLAs&lt;/abbr&gt;
.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Artículo original&lt;/strong&gt;: &lt;a href=&#34;http://www.edgeblog.net/2007/in-search-of-five-9s/&#34;&gt;In search of five 9s: Calculating Availability of Complex Systems&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://example.org/blog/en-busca-de-los-cinco-9s/&#34;&gt;Traducido por Miguel Ángel García&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Vagrant y Puppet</title>
      <link>http://example.org/blog/vagrant-puppet/</link>
      <pubDate>Fri, 18 May 2012 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/blog/vagrant-puppet/</guid>
      <description>
        
          &lt;p&gt;Hay mucha gente que tiene que trabajar a diario con más de un ordenador. En ocasiones, tienen cientos. Las máquinas se estropean y hay que reemplazarlas, así que se pierde mucho tiempo en reinstalar el sistema. Incluso si sólo tienes una máquina, siempre se te olvida instalar algo que necesitarás cuando no tengas red.&lt;/p&gt;
&lt;p&gt;Una solución es clonar discos, pero eso es poco flexible. Resulta complejo cambiar la versión de un programa en todas las máquinas.&lt;/p&gt;
&lt;p&gt;¿Qué sería lo ideal? Pues poder tener la configuración de tu PC en un repositorio Git o Mercurial. Y poder probar la configuración en una máquina virtual.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;http://example.org/images/puppet.png&#34;
         alt=&#34;Puppet&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;antes-que-nada&#34;&gt;Antes que nada&amp;hellip;&lt;/h2&gt;
&lt;p&gt;Antes de comenzar, una advertencia: &lt;em&gt;Vamos a hacer cosas peligrosas&lt;/em&gt;. Eso significa que puede que se nos reinicie el ordenador o que perdamos datos.&lt;/p&gt;
&lt;p&gt;Tras hacer esa advertencia, también os diré que todo será razonablemente seguro y que vamos a trabajar en máquinas virtuales para que no pase, pero no puedo garantizar nada.&lt;/p&gt;
&lt;h2 id=&#34;vagrant&#34;&gt;Vagrant&lt;/h2&gt;
&lt;p&gt;Lo primero que necesitamos es un entorno para gestionar máquinas virtuales. Uno de los más utilizados hoy en día es &lt;a href=&#34;https://www.virtualbox.org/&#34;&gt;VirtualBox&lt;/a&gt; . Pero nosotros no vamos a necesitar un entorno gráfico ni nada de eso.&lt;/p&gt;
&lt;p&gt;VirtualBox tiene soporte para máquinas virtuales &lt;em&gt;headless&lt;/em&gt;, es decir, máquinas que &amp;ldquo;están por ahí&amp;rdquo;, pero que no se ven.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt;  no es más que una interfaz a VirtualBox, pero que nos hace la vida más fácil.&lt;/p&gt;
&lt;p&gt;Así que vamos a usar Vagrant. Llegada a esta conclusión, tendríamos dos opciones: instalar una máquina virtual desde cero o coger una ya instalada y partir de ahí. Si optáramos por la primera opción, tendríamos que ver &lt;a href=&#34;https://github.com/jedi4ever/veewee&#34;&gt;VeeWee&lt;/a&gt; ; como este artículo va de Puppet, vamos a optar por la segunda opción.&lt;/p&gt;
&lt;p&gt;Lo primero: vamos a instalarnos Vagrant:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ sudo gem install vagrant
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sí, es Ruby.&lt;/p&gt;
&lt;p&gt;Tras pelearme con algunas máquinas virtuales públicas, algunos reinicios y demás, os recomiendo que utilicéis la siguiente:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ vagrant box add squeeze32 http://mathie-vagrant-boxes.s3.amazonaws.com/debian_squeeze_32.box
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Eso tardará un poco, ya que tiene que descargarse 4Gb. Os recomiendo que &lt;em&gt;no&lt;/em&gt; utilicéis la wifi. Básicamente, nos descargamos la imagen y la llamamos &lt;em&gt;squeeze32&lt;/em&gt;. Eso es importante para referirnos a ella desde el &lt;em&gt;Vagrantfile&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Mientras se descarga, vamos a crearnos una carpeta en alguna parte y a ir configurando Vagrant. El archivo de configuración que yo utilizo tiene el siguiente aspecto (debe llamarse &lt;em&gt;Vagrantfile&lt;/em&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# file: Vagrantfile&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Vagrant&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Config&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;	config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;box &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;squeeze32&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Difícil, ¿eh?&lt;/p&gt;
&lt;p&gt;Vamos con el manejo básico de vagrant:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;up&lt;/em&gt; levanta nuestra máquina virtual. Eso implica construirla si no existe y &lt;em&gt;provisionarla&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;destroy&lt;/em&gt; mata nuestra máquina virtual y la borra.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;halt&lt;/em&gt; sólo mata nuestra máquina virtual. No lo uséis. Ya se morirá sola y, si vais a apagarla, borradla del todo con &lt;em&gt;destroy&lt;/em&gt;. ¡Es más divertido!&lt;/li&gt;
&lt;li&gt;&lt;em&gt;provision&lt;/em&gt; Hará que se ejecute Puppet (cuando lo tengamos configurado). Esto es lo que se llama &amp;ldquo;provisionar&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;status&lt;/em&gt; Muestra las máquinas virtuales existentes y el estado en el que se encuentran.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;ssh&lt;/em&gt; Os conectará por ssh a la máquina virtual.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Habría que contar algo sobre usar varias máquinas virtuales y tal, pero esto es un artículo introductorio. Para cosas avanzadas, buscad otra cosa o la propia documentación :D&lt;/p&gt;
&lt;p&gt;Vamos con Puppet.&lt;/p&gt;
&lt;h2 id=&#34;puppet&#34;&gt;Puppet&lt;/h2&gt;
&lt;p&gt;Este artículo va a ser introductorio, así que me centraré en la estructura básica, la configuración y la instalación de un único paquete sencillo.&lt;/p&gt;
&lt;h3 id=&#34;estructura-básica-de-un-proyecto&#34;&gt;Estructura básica de un proyecto&lt;/h3&gt;
&lt;p&gt;La estructura básica es:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;.
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;├── manifests
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;│   └── desktop.pp
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;├── modules
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;│   └── module
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;│       ├── files
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;│       ├── templates
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt;│       └── manifests
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9&lt;/span&gt;└── Vagrantfile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;El archivo que se encuentra en @manifests/desktop.pp@ va a ser el que defina nuestra máquina. Aquí hacemos un breve paréntesis.&lt;/p&gt;
&lt;p&gt;Puppet está pensado para utilizarse en grandes empresas, con cientos o miles de máquinas. Algunas de estas máquinas serán iguales, pero otras serán distintas. Por eso tiene una estructura cliente-servidor segura, mediante claves ssl.&lt;/p&gt;
&lt;p&gt;Yo lo estoy contando para un entorno casero, así que olvidaos de eso. Vamos a tener un archivo distinto por cada máquina y no voy a contar nada de &lt;em&gt;nodes&lt;/em&gt;. Tan sólo nuestra máquinita y ya. Como tengo un ordenador de escritorio y el que utilizo para viajar, tengo un archivito &amp;ldquo;desktop.pp&amp;rdquo;. Quizá algún día tenga un &amp;ldquo;laptop.pp&amp;rdquo; :D&lt;/p&gt;
&lt;h3 id=&#34;configuración&#34;&gt;Configuración&lt;/h3&gt;
&lt;p&gt;La idea es mantener el archivo @desktop.pp@ lo más sencillo posible, de manera que podamos reutilizar su información en otras máquinas. Por eso el mío es así:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# file: manifests/desktop.pp&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;stage { &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;apt, pre, post&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Stage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;apt&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Stage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;pre&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Stage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Stage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;post&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apt&amp;#39;&lt;/span&gt;: stage &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; apt }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;kernel&amp;#39;&lt;/span&gt;: }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Lo que hago es definirme 3 etapas: apt, pre y post; después establezco el orden de las etapas, relativas a &lt;em&gt;main&lt;/em&gt;. Puppet no tiene orden de ejecución, pero hay cosas que hay que hacer antes que nada. Yo, por ejemplo, quiero que se me actualice APT antes de comenzar a trabajar.&lt;/p&gt;
&lt;p&gt;A continuación declaro las clases a utilizar. Queda claro que quiero la clase &amp;ldquo;apt&amp;rdquo; que se ejecutará en la etapa &amp;ldquo;apt&amp;rdquo; (derrocho imaginación).&lt;/p&gt;
&lt;p&gt;Finalmente, incluyo también la clase &amp;ldquo;kernel&amp;rdquo;, que me instalará el núcleo. Evidentemente, para usarlo tendré que reiniciar, pero me hace ilusión tener instalada la última versión.&lt;/p&gt;
&lt;h3 id=&#34;módulos&#34;&gt;Módulos&lt;/h3&gt;
&lt;p&gt;Ahora hay que definir los módulos. Comenzaremos por APT. la definición está en @modules/apt/manifests/init.pp@. Siempre, los manifiestos se llamarán &lt;em&gt;init.pp&lt;/em&gt; y estarán en la carpeta &lt;em&gt;manifests&lt;/em&gt;, dentro de nuestro módulo. Este archivo contendrá:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# file: modules/apt/manifests/init.pp&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; apt {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;  file { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sources.list&amp;#39;&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;    path &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/etc/apt/sources.list&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;    source &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;puppet:///modules/apt/sources.list&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;    owner &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;root&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;    replace &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;  }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;  exec { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;update&amp;#39;&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;    path &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/usr/bin&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;    command &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;apt-get update&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;    require &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sources.list&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;  }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Esto es lo más dificil que vamos a hacer y lo más sencillo de explicar. Como véis, el módulo APT necesita un fichero de configuración y ejecutar una orden. El fichero será el @sources.list@, claro :D&lt;/p&gt;
&lt;p&gt;No hay mucho que contar, tan solo que sobreescribo el @sources.list@ y después lanzo un update. Estos requisitos se ejecutarán sin orden fijo, así que tengo que forzar un orden mediante la orden &lt;em&gt;require&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Claro, el archivo que quiero instalar tiene que estar en el directorio &lt;em&gt;files&lt;/em&gt; (mirad la estructura más arriba). Y tendrá algo como esto:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;# file: modules/apt/files/sources.list
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;deb http://ftp.es.debian.org/debian unstable main contrib non-free
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ahora vamos a configurar el módulo del &lt;em&gt;kernel&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# file: modules/kernel/manifests/init.pp&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; kernel {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;  package { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;linux-image-amd64&amp;#39;&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;ensure&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; latest,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;  }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;  package { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;linux-headers-amd64&amp;#39;&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;ensure&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; latest,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;  }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Como véis, es una clase que necesitará dos paquetes: el kernel y las headers. Y me aseguro de tener instalada la última versión.&lt;/p&gt;
&lt;h2 id=&#34;lanzándolo&#34;&gt;Lanzándolo&lt;/h2&gt;
&lt;p&gt;Bueno, ya lo tenemos todo configurado, así que hay que decirle a Vagrant que lance a Puppet:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# file: Vagrantfile&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Vagrant&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Config&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;	config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;box &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;squeeze32&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;	config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;provision &lt;span style=&#34;color:#e6db74&#34;&gt;:puppet&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;puppet&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;		puppet&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;manifests_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;manifests&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;		puppet&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;module_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;modules&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;		puppet&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;manifest_file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;desktop.pp&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Bueeeeeeeeeeeno. Pues ya está todo. Vamos con la magia:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ vagrant up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y flipad con los mensajes de pantalla. Nos dejará una máquina perfectamente configurada:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;$ vagrant up
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;default&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Importing base box &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;squeeze32&amp;#39;&lt;/span&gt;...
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;default&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; The guest additions on this VM &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; not match the install version of
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;VirtualBox! This may cause things such as forwarded ports, shared
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;folders, and more to not work properly. If any of those things fail on
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;this machine, please update the guest additions and repackage the
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;box.
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;Guest Additions Version: 4.0.4
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;VirtualBox Version: 4.1.14
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;default&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Matching MAC address &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; NAT networking...
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;default&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Clearing any previously set forwarded ports...
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;default&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Forwarding ports...
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;default&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -- 22 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2222&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;adapter 1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;default&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Creating shared folders metadata...
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;default&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Clearing any previously set network interfaces...
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;default&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Booting VM...
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;default&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Waiting &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; VM to boot. This can take a few minutes.
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;default&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; VM booted and ready &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; use!
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;default&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Mounting shared folders...
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;default&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -- v-root: /vagrant
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;default&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -- manifests: /tmp/vagrant-puppet/manifests
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;default&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -- v-pp-m0: /tmp/vagrant-puppet/modules-0
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;default&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Running provisioner: Vagrant::Provisioners::Puppet...
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;default&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Running Puppet with /tmp/vagrant-puppet/manifests/desktop.pp...
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26&lt;/span&gt;stdin: is not a tty
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27&lt;/span&gt;notice: /Stage&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;apt&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;/Apt/File&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;sources.list&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;/content: content changed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{md5}c6f69c7769cbbd3b3c938217487efa02&amp;#39;&lt;/span&gt; to &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{md5}509cf608fd519f230246df247418b7b2&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29&lt;/span&gt;notice: /Stage&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;apt&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;/Apt/File&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;sources.list&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;/group: group changed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;root&amp;#39;&lt;/span&gt; to &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vagrant&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31&lt;/span&gt;notice: /Stage&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;apt&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;/Apt/Exec&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;update&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;/returns: executed successfully
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33&lt;/span&gt;notice: /Stage&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;/Kernel/Package&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;linux-image-amd64&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;/ensure: ensure changed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;purged&amp;#39;&lt;/span&gt; to &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;latest&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35&lt;/span&gt;notice: /Stage&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;/Kernel/Package&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;linux-headers-amd64&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;/ensure: ensure changed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;purged&amp;#39;&lt;/span&gt; to &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;latest&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36&lt;/span&gt;$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;aplicándolo-a-nuestra-máquina&#34;&gt;Aplicándolo a nuestra máquina&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;NOTA&lt;/em&gt;: Mucho ojo. Si seguís estos pasos, es perfectamente posible que rompáis vuestra máquina. ¡Sobreescribiríais el @sources.list@!&lt;/p&gt;
&lt;p&gt;Como todas las operaciones que realizamos requieren ser root, si lo ejecutamos como usuarios normales no debería ocurrir nada, pero insisto una vez más: &lt;em&gt;si ejecutas esto es bajo tu cuenta y riesgo&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# puppet apply manifests/desktop.pp --modulepath=modules/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Poco que contar: le pedimos a puppet que aplique nuestra configuración y le indicamos dónde están los módulos.&lt;/p&gt;
&lt;h2 id=&#34;ventajas&#34;&gt;Ventajas&lt;/h2&gt;
&lt;p&gt;El uso de Vagrant sólo nos da una ventaja: la de poder probar nuestra configuración antes de aplicarla en una máquina real.&lt;/p&gt;
&lt;p&gt;El uso de Puppet es otro cantar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;podemos compartir configuraciones entre máquinas,&lt;/li&gt;
&lt;li&gt;podemos replicar configuraciones,&lt;/li&gt;
&lt;li&gt;podemos guardar las configuraciones en un repositorio,&lt;/li&gt;
&lt;li&gt;podemos volver a una configuración determinada,&lt;/li&gt;
&lt;li&gt;si identificamos un nuevo tipo de máquina, podemos basarnos en una ya existente,&lt;/li&gt;
&lt;li&gt;si se rompe una máquina, podemos tener otra operativa en poco tiempo,&lt;/li&gt;
&lt;li&gt;no olvidaremos instalar nada,&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aunque tiene algunos&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;inconvenientes&#34;&gt;Inconvenientes&lt;/h2&gt;
&lt;p&gt;Requiere un poquitín de trabajo extra. Hay que modificar los archivos y después lanzar puppet, en lugar de tocar los archivos originales o ejecutar APT a mano.&lt;/p&gt;
&lt;p&gt;Además, pueden darse situaciones poco agradables, como que un paquete entre en conflicto con otro. Como Puppet no garantiza ningún orden, puede darse que el primero se instale y el segundo desinstale al primero. Como, de forma individual, no hay errores, Puppet no nos informará del problema.&lt;/p&gt;
&lt;p&gt;Hay algunas soluciones, como realizar &lt;em&gt;pruebas&lt;/em&gt;. Existen distintos entornos de pruebas, pero se basan en comprobar que la sintaxis es la adecuada y, en mi opinión, es lo mismo que tener redundancia: se especifican las reglas de dos maneras distintas y deben coincidir. Personalmente, no me gusta el sistema y no le veo un beneficio.&lt;/p&gt;
&lt;p&gt;Nuevamente, en mi opinión, lo más útil es definir una nueva etapa de pruebas que &lt;em&gt;realice pruebas por los efectos&lt;/em&gt;, no por los requisitos: si queremos que un servidor esté corriendo, comprobamos que el puerto está ocupado. Si hemos modificado un archivo, podemos comprobar su fecha de modificación. Pero no hay ningún framework que nos facilite esta tarea.&lt;/p&gt;
&lt;h2 id=&#34;más-información&#34;&gt;Más información&lt;/h2&gt;
&lt;p&gt;Podéis visitar la propia &lt;a href=&#34;http://docs.puppetlabs.com/learning/&#34;&gt;web de Puppet&lt;/a&gt; . Está todo muy bien explicadito, salvo la estructura inicial (para lo que ya estoy yo XD).&lt;/p&gt;
&lt;p&gt;En este artículo he introducido los tipos &lt;a href=&#34;http://docs.puppetlabs.com/references/stable/type.html&#34;&gt;file&amp;quot;, &amp;ldquo;package&amp;rdquo; y &amp;ldquo;exec&amp;rdquo;; podéis visitar la &amp;ldquo;lista completa de tipos puppet&lt;/a&gt;  si queréis.&lt;/p&gt;
&lt;p&gt;Así mismo, he comentado las etapas, pero hay muchos otros &lt;a href=&#34;https://www.puppetlabs.com/references/2.6.8/metaparameter.html&#34;&gt;metaparámetros&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;También tenéis &lt;a href=&#34;http://vagrantup.com/&#34;&gt;la página de Vagrant&lt;/a&gt;, claro.&lt;/p&gt;
&lt;p&gt;Si os gustan estos temas, os recomiendo que sigáis a &lt;a href=&#34;http://blog.carlossanchez.eu/&#34;&gt;Carlos Sánchez&lt;/a&gt;, que presentó en el &lt;a href=&#34;http://codemotion.es/&#34;&gt;CodeMotion&lt;/a&gt;  la charla &lt;a href=&#34;http://www.slideshare.net/carlossg/from-dev-to-devops-codemotion-es-2012&#34;&gt;From Dev to DevOps&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Podréis encontrar más información si buscáis la palabra &amp;ldquo;devops&amp;rdquo; en google :D&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
