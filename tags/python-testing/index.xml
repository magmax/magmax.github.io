<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>python testing - Etiqueta - El blog de MagMax</title>
        <link>https://magmax.org/tags/python-testing/</link>
        <description>python testing - Etiqueta - El blog de MagMax</description>
        <generator>Hugo -- gohugo.io</generator><language>es</language><lastBuildDate>Sun, 10 Jun 2012 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://magmax.org/tags/python-testing/" rel="self" type="application/rss+xml" /><item>
    <title>Pruebas Unitarias: Proveedores de datos</title>
    <link>https://magmax.org/blog/dataproviders/</link>
    <pubDate>Sun, 10 Jun 2012 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>https://magmax.org/blog/dataproviders/</guid>
    <description><![CDATA[A menudo, cuando realizamos pruebas unitarias de algún problema algorítmico, nos encontramos con muchos tests iguales. Tan solo cambia la entrada y el resultado.
La mayor parte de los XUnit ya se han dado cuenta de esto y por eso han implementado soluciones. El problema es que no se han puesto de acuerdo en la nomenclatura ni en la implementación.
Veremos aquí aproximaciones en Java, PHP y Python.
  Java: Parametrized Poca gente sabe (y yo lo he descubierto hace poco) que JUnit 4 incluyó los tests parametrizados.]]></description>
</item><item>
    <title>Python: Cómo hacer pruebas 5: freshen</title>
    <link>https://magmax.org/blog/python-pruebas-5/</link>
    <pubDate>Fri, 02 Dec 2011 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>https://magmax.org/blog/python-pruebas-5/</guid>
    <description><![CDATA[Después del éxito cosechado con el artículo Python: Cómo hacer pruebas (4), no puedo evitar aprovechar el tirón y subir el nivel: BDD, o, lo que es lo mismo, Business Driven Development.
Éste va a ser un tema muy arriesgado, ya que en mi vida he conseguido hacer BDD para&hellip; el ejemplo que os voy a mostrar. No lo he usado nunca más, aunque me parece bastante interesante el tema.]]></description>
</item><item>
    <title>Python: Cómo hacer pruebas 4: pyDoubles</title>
    <link>https://magmax.org/blog/python-pruebas-4/</link>
    <pubDate>Wed, 09 Nov 2011 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>https://magmax.org/blog/python-pruebas-4/</guid>
    <description><![CDATA[Tras las peticiones populares , no puedo evitar escribir este post antes de lo que esperaba.
Es la continuación del artículo Python: Cómo hacer pruebas(3), que parece haber tenido bastante éxito.
En este caso vamos a ver los dobles de prueba, y utilizaremos, cómo no, pyDoubles , creado principalmente por Carlos Blé y disponible en Debian gracias a mi buen amigo David Villa.
Actualización 2011-11-16: Corrijo el significado de las siglas F.]]></description>
</item><item>
    <title>Python: Cómo hacer pruebas 3: nose y hamcrest</title>
    <link>https://magmax.org/blog/python-pruebas-3/</link>
    <pubDate>Mon, 07 Nov 2011 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>https://magmax.org/blog/python-pruebas-3/</guid>
    <description><![CDATA[Después del artículo Python: Cómo hacer pruebas (2), viene el (3) :D
En esta ocasión temo que el tutorial va a ser un poco light, pero ya lo compensaremos con el próximo. Nos vamos a centrar en dos herramientas para hacer tests. Estas herramientas son nose y Hamcrest .
Ambos son paquetes Debian y sencillos de instalar.
  Nose Nose es una herramienta que nos permitirá ejecutar nuestros tests de una manera sencilla y cómoda.]]></description>
</item><item>
    <title>Python: Cómo hacer pruebas 2: unittest</title>
    <link>https://magmax.org/blog/python-pruebas-2/</link>
    <pubDate>Tue, 27 Sep 2011 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>https://magmax.org/blog/python-pruebas-2/</guid>
    <description><![CDATA[Tras el artículo Python: Cómo hacer pruebas (1) es lógico pensar que vendrá la segunda parte.
En esta ocasión nos centraremos en UnitTest.
  Construcción básica Hay muchas ocasiones en las que las pruebas realizadas con doctest se nos quedarán cortas. Por ejemplo, ¿cómo probamos un acceso a base de datos? ¿Y una interacción entre clases? Con este fin está unittest. Hay gente que lo denomina &ldquo;PyUnit&rdquo;, ya que es similar a JUnit.]]></description>
</item><item>
    <title>Python: Cómo hacer pruebas 1: doctest</title>
    <link>https://magmax.org/blog/python-pruebas-1/</link>
    <pubDate>Sun, 25 Sep 2011 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>https://magmax.org/blog/python-pruebas-1/</guid>
    <description><![CDATA[Voy a redactar distintas maneras de hacer pruebas en Python. En este sentido, veremos diferentes estilos, desde el más sencillo al más complejo; desde las pruebas unitarias hasta las pruebas de sistema.
Estoy convencido de que me voy a dejar mil historias en el tintero&hellip; os ruego un poco de paciencia y de ayuda :D
En esta primera entrega, veremos cómo probar utilizando los desconocidos doctest.
  Función de ejemplo Vamos a practicar con la función que obtiene el factorial de un número, función que queremos probar.]]></description>
</item><item>
    <title>No comentes: ¡Asegura!</title>
    <link>https://magmax.org/blog/asegura/</link>
    <pubDate>Sun, 14 Aug 2011 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>https://magmax.org/blog/asegura/</guid>
    <description><![CDATA[Hoy he descubierto mucho de ese gran desconocido que es assert.
Resulta que tenía a mi alcance una herramienta de depuración bastante fuerte y aún no he hecho uso de ella.
Con el fin de solucionar este problema, escribo este artículo, aunque no escribiré nada que no se encuentre en la Documentación de Java sobre Assert o la documentación Python.
  Lo más básico Lo primero es saber cómo vamos a usarlo.]]></description>
</item></channel>
</rss>
