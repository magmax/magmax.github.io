<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>agile on El blog de MagMax</title>
    <link>https://magmax.org/tags/agile/</link>
    <description>Recent content in agile on El blog de MagMax</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 Nov 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://magmax.org/tags/agile/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lo que me gustaría que hubiéramos hecho...</title>
      <link>https://magmax.org/blog/lo-que-me-gustaria-que-hubieramos-hecho/</link>
      <pubDate>Sun, 01 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/lo-que-me-gustaria-que-hubieramos-hecho/</guid>
      <description>
        
          &lt;p&gt;A veces te encuentras con un post que crees que es realmente revolucionario. Eso
me ocurrió cuando leí el artículo &lt;a href=&#34;https://ronjeffries.com/articles/015-10/wish-prac/&#34;&gt;What I wish we had done &amp;hellip;&lt;/a&gt; por primera vez.&lt;/p&gt;
&lt;p&gt;Tanto me llamó la atención que no tardé ni 5 minutos en enviarle un email al mismo Ron Jeffries para pedirle permiso para traducirlo aquí, en mi blog. Me lo dio en menos de tres horas.&lt;/p&gt;
&lt;p&gt;Espero que lo saboreéis tanto como yo. Espero haber sido fiel en la traducción.&lt;/p&gt;
&lt;p&gt;Como siempre que hago esto, por favor, comentad sólo sobre la traducción. Los comentarios sobre el contenido del artículo deberían estar con el artículo original.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ATENCIÓN:&lt;/strong&gt; Por lo visto no todo el mundo entendió el artículo original como yo, y Ron Jeffries, su autor original, lo ha modificado para evitar equívocos. En cuanto pueda traduciré de nuevo los cambios o borraré esta traducción, dependiendo de si soy de los que lo entendieron correctamente.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/poetry.jpg&#34;/&gt; 
&lt;/figure&gt;

&lt;hr&gt;
&lt;p&gt;Como fiel lector, probablemente sea consciente de que creo que la palabra &amp;ldquo;Agile&amp;rdquo; debería significar &amp;ldquo;coherente con el Manifiesto Ágil&amp;rdquo;. Y, claro está, no significa eso en absoluto. En su lugar significa lo que quiera que las palabras del usuario signifiquen en ese momento. Ah, bien, la vida es dura, entonces mueres. Rápido, espero, pero no pronto. Pero estoy divagando&amp;hellip;&lt;/p&gt;
&lt;p&gt;Un importante colaborador a la confusión es la proliferación de marcas o métodos con nombre propio y frameworks. En el momento del Manifiesto, si no recuerdo mal, estaban Scrum, XP y DSDM. Pero al poco tiempo desde entonces, Jim Highsmith apareció con el Desarrollo de Software Adaptativo, Alistair Cockburn ideó su familia Crystal, Mike Beedle comenzó una serie de nombres como XP@Scrum. Y muchos otros.&lt;/p&gt;
&lt;p&gt;Cuanto más popular &amp;ldquo;Ágil&amp;rdquo; se volvía, más métodos con nombre propio y frameworks
teníamos. Ahora tenemos muchos más: DAD, SAFe, LeSS, FAST, y muchos más. Para
una lista más completa, vean &lt;a href=&#34;https://ronjeffries.com/articles/2015-07-07-yet-another-method/&#34;&gt;este artículo&lt;/a&gt;. La idea es que hay muchos.&lt;/p&gt;
&lt;p&gt;Entonces tenemos una ingente cantidad de empresas llamando Ágil a esto y Ágil lo otro. ¡Buah!&lt;/p&gt;
&lt;p&gt;Brian Marick sugirió en una ocasión que, en lugar de &amp;ldquo;Ágil&amp;rdquo;, deberíamos haberlo
llamado Cronosynclasico Infundibulum o algo así. No, espere, era
&lt;a href=&#34;https://www.exampler.com/blog/2009/05/02/artisanal-retro-futurism-%E2%8A%97-team-scale-anarcho-syndicalism/&#34;&gt;Retro-futurismo artesanal con Anarco-sindicalismo a Escala de Equipo&lt;/a&gt;. Parte de la idea era que el nombre pareciera tan indeseable que la gente no qusiera hondear esa bandera, y quizá se hubiera dado más atención a las valiosas ideas en lugar de la marca.&lt;/p&gt;
&lt;p&gt;Todos estos barcos ya han zarpado, claro. Adiós, barquitos.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;De todas las palabras tristes orales o escritas, las más tristes son éstas: &amp;ldquo;¡Podría haber sido!&amp;rdquo;&lt;/p&gt;
&lt;p&gt;John Greenleaf Whittier&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Bueno, no me está permitido volver atrás en mi propia línea temporal, por suerte, pero a veces reflejar lo que podría haber sido puede ayudarnos con lo que aún puede ser. Y en esto es en lo que pensaba cuando comencé este artículo:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;¿Y si, en lugar de Valores y Principios, hubiéramos incluído Prácticas? ¿Y si además, en lugar de crear nombres y negocios alrededor de &amp;ldquo;Ágil&amp;rdquo;, nos hubiéramos centrado todos en descubrir, apoyar y promover las prácticas que más nos gustan y con las que mejor podemos ayudar?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Me parece que algo bueno podría haber salido de eso. Quizá aún pueda.&lt;/p&gt;
&lt;p&gt;Cuando instruyo un equipo, o cuando en el transcurso de una experiencia de
&lt;em&gt;training&lt;/em&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, llegan las preguntas, creo en las fuerzas actuando sobre un equipo, y me refiero a cosas que ellos podrían intentar para balancear mejor las fuerzas.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A veces, las respuestas parecen claras pero de alguna forma se tienen que calcular. Quizá el equipo tenga una organización separada de pruebas. Quizá estén construyendo una lista de defectos cada vez más larga, o quizá tienen problemas para programar sus iteraciones porque no saben cuántos defectos de alta prioridad tendrán que arreglar esta vez. Algunos necesitan resolver la ecuación y obtener que si se mandan menos defectos a la gente que prueba, tendremos menos defectos que arreglar, y nos resultará más fácil saber cuánto trabajo llevar a cabo.&lt;/p&gt;
&lt;p&gt;Entonces nos toca hablar de cómo eso nos retrasará porque, no sé, quizá hasta deberíamos probar nuestro código. Entonces tendríamos que observar que estamos gastando el 45% de nuestro tiempo arreglando errores y que seguramente podría requir menos tiempo prevenirlos que arreglarlos, además de ser menos vergonzoso. Entonces y sólo entonces, encontraremos tiempo para comprender cómo probar nuestro código de forma que no sea desagradable. Lo que nos lleva a TDD, y entonces a ATDD, ambos casi divertidos y en cierto modo poco dolorosos.&lt;/p&gt;
&lt;p&gt;La mayoría de las soluciones a los problemas de un equipo probablemente ya se conozcan. Seguramente, hay detalles y matices que habrá que descubrir. Seguramente, hay cosas que se tendrán que aprender. Pero hay que empezar buscando qué ocurre y darse cuenta de que se puede hacer mejor. Quizá se necesite &amp;ldquo;permiso&amp;rdquo; para hacerlo mejor. Nada explica &amp;ldquo;permiso&amp;rdquo; mejor que tener un caro pero extrañamente fascinante Autor del Manifiesto Ágil sentado contigo ayudando a que te des cuenta de cómo mejorar tu vida (por decir algo).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Lo que quiero decir es que no temenos que decir &amp;ldquo;Ágil&amp;rdquo; o nombrar el nombre de mi método - ¿han notado que yo ni siquiera tengo uno? - para poder ayudar a esta gente, y para tener un poco de trabajo de vez en cuando. Cuando un equipo obtiene ayuda y comienza a obtener resultados, a menudo me vuelven a llamar para ayudar a otro equipo, y se extiende boca a boca y me llaman a visitar otras empresas. A veces me llaman de empresas de tercera generación, donde la gente ha cambiado de trabajo desde un lugar al que visité.&lt;/p&gt;
&lt;p&gt;No tengo intención de promocionarme a mí mismo con todo esto &amp;ndash; aunque no haya problema que que me contacten. Se trata de puntualizar que basta con ser reconocido como alguien útil, y quizá  ser útil en un contexto &amp;ldquo;Ágil&amp;rdquo; o &amp;ldquo;Scrum&amp;rdquo;, para encontrarse con mucho trabajo por hacer, y ser capaz de ayudar a montones de personas.&lt;/p&gt;
&lt;p&gt;Ahora hay algunos paquetes de prácticas en los que soy indudablemente experto y soy feliz de llevarlos allá donde se necesiten. Y si alguien me pidiera que le ayudara a aplicar TDD a su JavaScript, le recomendaría a algún otro, quizá James Shore, que sabe de eso más de lo que yo sabré jamás. ¿Trabajando con empotrados? Sugeriría James Grenning, o Nancy Van Schooenderwoert, porque son expertos en ese área. ¿Preocupaciones en las relaciones humano-a-humano? Quizá Esther Derby o Diana Larsen. Y así. Conozco montones de personas y por eso no tengo que saberlo todo.&lt;/p&gt;
&lt;p&gt;La verdad es que todo el que está por ahí, toda empresa que está por ahí, vendiendo &amp;ldquo;Soluciones Ágiles&amp;rdquo; o como quiera que las llamen, es en realidad experto sólo en un pequeño conjunto de prácticas útiles de las que se necesitan para que un equipo crezca, mejore y finalmente destaque.&lt;/p&gt;
&lt;p&gt;¿Y si los Autores del Manifiesto se hubieran centrado en descubrir, respaldar y
fomentar ciertas prácticas específicas? Pero en lugar de personas, comenzando
por los Autores, se crearon Empresas separadas, ofreciendo su charlatanería como
soluciones completas. Esas empresas se ven a sí mismas compitiendo con las
otras, y avivan las llamas para que sus pobres clientes se engañen creyendo que
deben elegir entre una u otra. ¿Por qué necesitamos elegir ésta o aquélla&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;? ¿Por qué no elegir ambas? ¿Por qué no elegir todas esas cosas que nos ayudarán?&lt;/p&gt;
&lt;p&gt;¿Y si tú y yo, todos los que trabajamos con estas ideas, comenzáramos ahora? ¿Y si nos diéramos cuenta todos nosotros, de una vez, que la S mayúscula de Scrum, la K mayúscula de Kanban, la A mayúscula de Ágil, son puntos de comienzo rudimentarios para una larga jornada, y que el aprendizaje real comienza una vez que se empiezan a hacer estas cosas rudimentarias y se presta atención a lo que ocurre luego?&lt;/p&gt;
&lt;p&gt;¿Quizá fuéramos capaces de cambiar la corriente contra el Gran Agilismo, o Ágil Sólo En El Nombre? ¿Quizá terminaríamos las guerras inútiles entre Scrum y Kanban, o SAFe y LeSS? No, probablemente no. Pero apuesto a que podríamos ayudar a mucha gente por el camino.&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Artículo original&lt;/strong&gt;: &lt;a href=&#34;https://ronjeffries.com/articles/015-10/wish-prac/&#34;&gt;What I wish we had done &amp;hellip;&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Copyright del artículo original&lt;/strong&gt;: Copyright © 1998-2015 Ronald E Jeffries.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Copyright de la traducción al castellano&lt;/strong&gt;: Miguel Ángel García.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Translated with permission from Ron Jeffries // Traducido con permiso de Ron Jeffries.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Si necesita ayuda y también quiere respaldar mi trabajo, de vez en cuando visito equipos y les ayudo a pensar en cómo mejorar. Además, con Chet Hendrickson, ofrezco el delicioso taller Habilidades de un Desarrollador Ágil basado en inmersiones XP, ya que soy uno de sus creadores. Si le gustaría tener la insignia, el taller también ofrece un título de &amp;ldquo;Desarrollador Scrum Certificado&amp;rdquo;. De todas formas, el valor se encuentra en el aprendizage que se descubre en el taller, no en la insignia. La mayoría de los desarrolladores parecen, como debe ser, no preocuparse mucho de las insignias. De todas formas, si desea algo de ayuda,  contácteme. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Mientras escribía ésto, vi y respondí un &lt;em&gt;tweet&lt;/em&gt; desagradable de una persona con un método con inicial mayúscula, metiéndose con el método con inicial mayúscula de otra gente, sus procesos, ideas y porcentajes. ¿Cómo puede ocurrir en el 2015? Casi todos los equipos decentes que veo están usando ideas cruzando métodos, y si lo lo hacen cuando yo llego, lo harán cuando me vaya. Esas ideas no compiten realmente, son muy compatibles. El mismo elefante, diferente ángulo. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;

        
      </description>
    </item>
    
    <item>
      <title>Retrospectiva al OpenSpace</title>
      <link>https://magmax.org/blog/retrospectiva_juguemos/</link>
      <pubDate>Sat, 15 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/retrospectiva_juguemos/</guid>
      <description>
        
          &lt;p&gt;El sábado pasé el día en Madrid, asistiendo a &lt;a href=&#34;https://twitter.com/search?q=%23juguemOS&amp;amp;src=hash&#34;&gt;#juguemOS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Como siempre hago después de una reunión de estas características, aquí está la retrospectiva, con el fin de dejar constancia de mis impresiones y de compartir mis opiniones con los demás, tanto los que asistieron como los que no.&lt;/p&gt;
&lt;p&gt;Es bueno asistir a un evento de estas características de vez en cuando para cargar las pilas. ¡Es una inyección de &lt;a href=&#34;https://magmax.org/blog/hacer-cosas/&#34;&gt;ganas de hacer cosas&lt;/a&gt; en toda regla!&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/poetry.jpg&#34;/&gt; 
&lt;/figure&gt;

&lt;h1 id=&#34;en-qué-consiste&#34;&gt;¿En qué consiste?&lt;/h1&gt;
&lt;p&gt;El &lt;a href=&#34;https://en.wikipedia.org/wiki/Open-space_technology&#34;&gt;OpenSpace&lt;/a&gt; #juguemOS consiste en una reunión para aprender técnicas de juegos, en principio orientados a enseñar las metodologías ágiles.&lt;/p&gt;
&lt;p&gt;Es un &lt;strong&gt;OpenSpace&lt;/strong&gt;, por lo que cuenta con las reglas básicas de todo &lt;a href=&#34;https://en.wikipedia.org/wiki/Open-space_technology&#34;&gt;OpenSpace&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Involúcrate y pásatelo bien&lt;/li&gt;
&lt;li&gt;Los que vienen, son los que tienen que venir.&lt;/li&gt;
&lt;li&gt;Lo que ocurre, es lo que tiene que ocurrir.&lt;/li&gt;
&lt;li&gt;Empieza cuando tiene que empezar.&lt;/li&gt;
&lt;li&gt;Termina cuando tiene que terminar.&lt;/li&gt;
&lt;li&gt;Ley de los dos pies: Si no estás aprendiendo o contribuyendo, es tu responsabilidad usar tus dos pies para encontrar otro lugar donde aprendas o contribuyas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nada más llegar creamos la parrilla. Al principio costó y al final se quedaron muchas cosas en el tintero. Como suele ocurrirme en los &lt;em&gt;OpenSpace&lt;/em&gt;, al final no voy a ninguna de las charlas a las que quiero ir, pero siempre me resulta muy instructivo e interesante.&lt;/p&gt;
&lt;p&gt;Hay que recordar que en un &lt;em&gt;OpenSpace&lt;/em&gt; no hay nada fijo. Algunas charlas fueron informales y otras fueron juegos dirigidos. ¡No es posible pasarlo mal en un sitio así!&lt;/p&gt;
&lt;h1 id=&#34;las-charlas&#34;&gt;Las charlas&lt;/h1&gt;
&lt;p&gt;No dudo ni por un momento de que todas las charlas fueron geniales. Por eso voy a contar mi experiencia de las que yo asistí. Pienso devorar los posts de los que asistieron al resto y verme todos los vídeos.&lt;/p&gt;
&lt;p&gt;A medida que se vayan publicando historias, intentaré enlazarlas al final de este artículo.&lt;/p&gt;
&lt;h2 id=&#34;saltos&#34;&gt;Saltos&lt;/h2&gt;
&lt;p&gt;La primera dinámica a la que asistí fue la de &amp;ldquo;Saltos&amp;rdquo;. Consistió en aprender dos dinámicas en las que se emplea el salto (hacia arriba o hacia adelante) como elemento clave, aunque en la primera no es del todo necesario.&lt;/p&gt;
&lt;p&gt;La primera técnica consistía en crear grupos pequeños (2-3 personas). Se elige un representante. Cada grupo decide si saltará o no. Se reúnen los representantes, cierran los ojos y&amp;hellip; ¡saltan!, teniendo en cuenta que:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;si no salta nadie, todos deben pagar a la banca (en nuestro caso solo teníamos bombones)&lt;/li&gt;
&lt;li&gt;si saltan algunos, los que saltaron deben pagar a los que no lo hicieron.&lt;/li&gt;
&lt;li&gt;si saltan todos, todos reciben un bombón extra.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Jaume propuso otra variante, en la que se utilizan grupos más grandes y hay 2 representantes, y las reglas son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;si no salta ninguno, no ganan nada.&lt;/li&gt;
&lt;li&gt;si salta sólo uno, el que no saltó gana 5.&lt;/li&gt;
&lt;li&gt;si saltan los dos, ambos reciben 3 &amp;ldquo;trofeos&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ambos juegos sirven para dialogar sobre la &lt;strong&gt;confianza en los demás&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;El segundo juego consiste en apuntar en el suelo (un post-it) hasta dónde eres capaz de saltar. Todos realizan la estimación. Después, cada uno realiza el salto.&lt;/p&gt;
&lt;p&gt;En este caso se puede dialogar sobre la &lt;strong&gt;confianza en uno mismo&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;war-games&#34;&gt;War games&lt;/h2&gt;
&lt;p&gt;La segunda charleja del día estuvimos hablando sobre problemas que encontramos los grupos para introducir las metodologías ágiles en entornos hostiles. En concreto, estuvimos hablando de:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Equipos hostiles&lt;/strong&gt;, donde existen conflictos previos y rechazo al cambio.&lt;/li&gt;
&lt;li&gt;La figura del &lt;strong&gt;saboteador&lt;/strong&gt;, una única persona que rechaza el cambio o que sabotea el &lt;em&gt;Kanban&lt;/em&gt; de los demás&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;juegos-en-empresa&#34;&gt;Juegos en empresa&lt;/h2&gt;
&lt;p&gt;Aquí estuvimos hablando de distintos juegos que se pueden emplear para intruducir las metodologías ágiles en la empresa. Comentamos algunos juegos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El &lt;a href=&#34;https://marshmallowchallenge.com/Welcome.html&#34;&gt;marshmallow&lt;/a&gt;, con una variante que incluye la compra de los materiales.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/incauti/juego-de-los-5-cuadrados-rotos&#34;&gt;5 cuadrados&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;El triángulo&lt;/li&gt;
&lt;li&gt;Los &lt;a href=&#34;https://12meses12katas.com/&#34;&gt;katas&lt;/a&gt; son otra forma de juegos&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pero lo importante no fueron los juegos en sí, sino las conclusiones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El juego sirve como &lt;strong&gt;disparador de situaciones&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Lo más importante en una charla, clase, etc. no es el cuerpo, sino &lt;strong&gt;las conclusiones&lt;/strong&gt; y &lt;strong&gt;el comienzo&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;El facilitador debe ser una parte del grupo.&lt;/li&gt;
&lt;li&gt;trabajar por parejas mejora el rendimiento también en los juegos. Es importante asistir a eventos de juegos también por pares.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;transición-agile&#34;&gt;Transición Agile&lt;/h2&gt;
&lt;p&gt;En este caso Ángel nos estuvo contando problemas como la oposición al cambio, mediante dinámicas como cruzar los brazos y cambiar la posición de los mismos o que otra persona te cambie la posición de los brazos, que es similar a lo que ocurre con un comercial agresivo.&lt;/p&gt;
&lt;p&gt;Existen distintos tipos de resistencias:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;psicológicas&lt;/strong&gt;, relacionadas con el &lt;strong&gt;entendimiento&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;emocionales&lt;/strong&gt;, con la &lt;strong&gt;aceptación&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;comportamentales&lt;/strong&gt;, con el &lt;strong&gt;cambio&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Después realizamos la actividad de &amp;ldquo;&lt;em&gt;Design Thinking&lt;/em&gt;&amp;rdquo; por grupos (hicimos 3 grupos), que consiste en tres fases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Observación&lt;/strong&gt;: Se describe al tipo de persona a la que se quiere llegar. Para ello, se dibuja a la persona, se obtienen sus características, aunque no parezcan importantes (caracter, móvil que usa, aficciones, gustos, inquietudes, &amp;hellip;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ideación&lt;/strong&gt;: Se crea un mapa mental con las ideas que queremos transmitir. El centro del mapa fue la palabra &amp;ldquo;razones&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prototipado&lt;/strong&gt;: Las dos primeras fases son de divergencia y la última de convergencia: se mueven las características de la persona al mapa mental, con aquellas ideas que estén relacionadas, tachándolas en caso de que queramos producir el efecto contrario.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El resultado me dejó de piedra, ya que es un gráfico que muestra en qué casos se debe utilizar un &lt;strong&gt;refuerzo positivo&lt;/strong&gt; y cuándo una &lt;strong&gt;razón convincente&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Finalmente presentamos los resultados con un &lt;strong&gt;elevator speech&lt;/strong&gt;, que no es más que una presentación muy corta (30 segundos) en la que cada grupo eligió un representante y Ángel hizo las veces de la persona a la que queremos convencer.&lt;/p&gt;
&lt;p&gt;Me gustó la frase final: &amp;ldquo;&lt;strong&gt;Hay que dar razones a las personas como personas&lt;/strong&gt;&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;juegos-cortos-y-miscelanea&#34;&gt;Juegos Cortos y miscelanea&lt;/h2&gt;
&lt;p&gt;Finalmente asistí a una charla en &lt;em&gt;petit comité&lt;/em&gt; en la que estuvimos dialogando de posibles juegos cortos a utilizar en charlas, entre otros sitios.&lt;/p&gt;
&lt;p&gt;Hablamos de los &amp;ldquo;&lt;em&gt;Party Games&lt;/em&gt;&amp;rdquo;, que son los juegos tipo &amp;ldquo;&lt;em&gt;Pictionary&lt;/em&gt;&amp;rdquo;, &amp;ldquo;&lt;em&gt;Party&lt;/em&gt;&amp;rdquo;, &amp;ldquo;&lt;em&gt;Tabú&lt;/em&gt;&amp;rdquo;, etc. enfocados hacia la enseñanza. En ocasiones se pueden encontrar estos juegos como &amp;ldquo;&lt;em&gt;Time up&lt;/em&gt;&amp;rdquo; debido a que se utilizan tiempos muy cortos.&lt;/p&gt;
&lt;p&gt;Salieron ejemplos como el &amp;ldquo;&lt;em&gt;Jungle Speed&lt;/em&gt;&amp;rdquo;, aunque también hablamos del juego de las &amp;ldquo;&lt;em&gt;estatuas&lt;/em&gt;&amp;rdquo; o la &amp;ldquo;&lt;em&gt;marioneta&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Este tipo de prácticas pueden utilizarse para asentar conocimientos.&lt;/p&gt;
&lt;p&gt;También estuvimos hablando sobre cómo aplicar juegos a las charlas, haciendo que la gente responda preguntas por escrito (no tienen por qué compartirlas), haciéndoles cantar, obligándoles a moverse, etc.&lt;/p&gt;
&lt;h2 id=&#34;juego-final&#34;&gt;Juego final&lt;/h2&gt;
&lt;p&gt;Para terminar, jugamos a construir algo con el cuerpo. Existían tres reglas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no se puede hablar&lt;/li&gt;
&lt;li&gt;no se pueden hacer señas&lt;/li&gt;
&lt;li&gt;hay que construir algo
Y en cinco minutos teníamos un flipante fórmula 1 construido únicamente con nuestros cuerpos.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;retrospectiva&#34;&gt;Retrospectiva&lt;/h1&gt;
&lt;p&gt;Acabamos con una retrospectiva del día. Es imposible recordar todo lo que se dijo, pero la impresión general es que se aprovechó el día y que todos queremos más.&lt;/p&gt;
&lt;h1 id=&#34;conclusiones&#34;&gt;Conclusiones&lt;/h1&gt;
&lt;p&gt;Todo estuvo genial. Como todo buen &lt;em&gt;OpenSpace&lt;/em&gt;, debe haber desorganización y la hubo. Chapó por &lt;a href=&#34;https://www.izada.es/&#34;&gt;Izada&lt;/a&gt;, ya que el local mola, consiguieron el material en tiempo récord, la comida estaba muy rica (aunque sobró demasiada) y todo me encantó. Espero con ansia los videos y las fotos del día.&lt;/p&gt;
&lt;p&gt;La organización estuvo genial, pero como todo en esta vida, siempre hay algo en lo que se puede mejorar, y aquí están mis sugerencias para la organización del próximo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Durante la elaboración de la parrilla, poner nombre a los post-its, para saber a quién buscar y permitir organizarla mejor, evitando que coincidan en dos salas al mismo tiempo.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Los descansos son descansos&lt;/strong&gt;, no momentos para meter más dinámicas. Los descansos permiten el diálogo, pararse para charlar con la gente.&lt;/li&gt;
&lt;li&gt;No se cumplió la regla de que &amp;ldquo;las cosas acaban cuando acaban&amp;rdquo;, sobre todo al principio, ya que la señal de finalización no era lo suficientemente clara. No tener descansos no ayudaba a cumplirla.&lt;/li&gt;
&lt;li&gt;Todo era tan rápido que apenas había tiempo para twitear algo o hablar fuera de la actividad.&lt;/li&gt;
&lt;li&gt;Quizá habría que unir fuerzas con &lt;a href=&#34;https://www.devopenmadrid.com/&#34;&gt;DevOpenMadrid&lt;/a&gt;. Seguramente alguno más de los participantes habría venido.&lt;/li&gt;
&lt;li&gt;En cualquier caso, se echa de menos una web que sirva de punto de referencia. Como puede verse en la de &lt;a href=&#34;https://www.devopenmadrid.com/&#34;&gt;DevOpenMadrid&lt;/a&gt;, no es necesario que sea preciosa ni nada por el estilo.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fue un gran día, pero siempre hay espacio de mejora. Me encantó. Repetiría sin pensarlo.&lt;/p&gt;
&lt;h1 id=&#34;bibliografía&#34;&gt;Bibliografía&lt;/h1&gt;
&lt;p&gt;Me llevo tarea:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Buscar qué es el &amp;ldquo;&lt;a href=&#34;https://www.box.com/shared/mg9kq3d17e&#34;&gt;Ball Game&lt;/a&gt;&amp;rdquo;, para saber cómo aplicar las variaciones de &lt;em&gt;asignación de roles&lt;/em&gt;, &lt;em&gt;cliente cabrón&lt;/em&gt;, cuellos de botella (&lt;em&gt;handicaps&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;Buscar qué es el juego del &lt;strong&gt;hipnotizador colombiano&lt;/strong&gt; (¿alguien tiene algún enlace?).&lt;/li&gt;
&lt;li&gt;Buscar documentación de &amp;ldquo;&lt;strong&gt;Agnes Lafuente&lt;/strong&gt;&amp;rdquo; (¿Se llamaba así?)&lt;/li&gt;
&lt;li&gt;Libro: &amp;ldquo;&lt;a href=&#34;https://www.amazon.com/Training-Back-Room-Aside-Learn/dp/0787996629&#34;&gt;Training from the back of the room&lt;/a&gt;&amp;rdquo;, de &lt;em&gt;Sharon Brown&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Libro: &amp;ldquo;&lt;a href=&#34;https://www.amazon.com/Facilitators-Participatory-Decision-Making-Jossey-Bass-Management/dp/0787982660&#34;&gt;Facilitator&amp;rsquo;s guide to Participatory Decision-Making&lt;/a&gt;&amp;rdquo;, de &lt;em&gt;Sam Kaner&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Libro: &amp;ldquo;&lt;a href=&#34;https://www.amazon.com/Lean-Startup-Entrepreneurs-Continuous-Innovation/dp/0307887898&#34;&gt;Lean start up&lt;/a&gt;&amp;rdquo;, de &lt;em&gt;Eric Ries&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/search?q=%23juguemOS&amp;amp;src=hash&#34;&gt;Hashtag #juguemOS&lt;/a&gt; en twitter&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
    <item>
      <title>10 razones para evitar el Desarrollo Dirigido por Tests</title>
      <link>https://magmax.org/blog/10reasons-to-avoid-tdd/</link>
      <pubDate>Wed, 05 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/10reasons-to-avoid-tdd/</guid>
      <description>
        
          &lt;p&gt;Como saben los que me siguen habitualmente, de vez en cuando me da por traducir algún artículo, con la intención de acercar información interesante a los más perezosos a la hora de leer en inglés. Éste es otro de &lt;em&gt;esos artículos&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;En este caso he traducido el artículo &lt;a href=&#34;https://www.softwareandi.com/2011/12/10-reasons-to-avoid-test-driven.html&#34;&gt;10 Reasons to Avoid Test Driven Development&lt;/a&gt;, de &lt;a href=&#34;https://plus.google.com/107676240236745204608/posts&#34;&gt;Assaf Stone&lt;/a&gt;. No sé la licencia que tiene&amp;hellip; no pone nada en su web.&lt;/p&gt;
&lt;p&gt;Espero que os guste tanto como a mí.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;10-razones-para-evitar-tdd&#34;&gt;10 razones para evitar TDD&lt;/h1&gt;
&lt;p&gt;El Desarrollo Dirigido por Tests (TDD), y todas sus variantes (BDD, ATDD) son en mi opinión buenos métodos para dirigir los esfuerzos de desarrollo de cualquier grupo, e incrementar la calidad el producto. Pero TDD no es una bala de plata. No encaja en todos los proyectos. El siguiente artículo lista las 10 principales razones para &lt;strong&gt;no&lt;/strong&gt; escribir tests automatizados para tu código.&lt;/p&gt;
&lt;p&gt;Si se te aplica una o más de estas condiciones, deberías considerar olvidar TDD y, de hecho, todas las demás técnicas ágiles, ya que serán un esfuerzo desperdiciado:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/no-TDD.png&#34;
         alt=&#34;No TDD&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;10-no-hay-cliente&#34;&gt;10. No hay cliente&lt;/h2&gt;
&lt;p&gt;A veces se desarrolla un producto que nunca usará nadie. En este caso, cualquier esfuerzo dedicado por mejorar la calidad es un completo desperdicio. A nadie le importará.&lt;/p&gt;
&lt;h2 id=&#34;9-el-cliente-es-un-téster-ávido&#34;&gt;9. El cliente es un &lt;em&gt;téster&lt;/em&gt; ávido&lt;/h2&gt;
&lt;p&gt;Hay gente que adora más que nada probar software inestable (beta). La diversión de encontrar nuevos errores y tratar de imaginar qué fue mal es su razón de vivir. Otros son científicos de corazón, y adoran mirar trazas de error, para hacer ingeniería inversa en el código. Si da la casualidad de que tu cliente es uno de esos, entonces escribir tests automatizados le quitará toda la diversión a tu código. ¡No lo hagas!&lt;/p&gt;
&lt;h2 id=&#34;8-el-proyecto-es-corto-simple-y-directo&#34;&gt;8. El proyecto es corto, simple y directo&lt;/h2&gt;
&lt;p&gt;Si tu equipo puede completar el proyecto en un periodo de tiempo corto (no más de unas semanas), y &lt;strong&gt;nunca&lt;/strong&gt;, &lt;strong&gt;jamás&lt;/strong&gt; tendrá que volver a abrirlo por mantenimiento, entonces los beneficios de la &lt;strong&gt;mantenibilidad&lt;/strong&gt;, &lt;strong&gt;reusabilidad&lt;/strong&gt; y &lt;strong&gt;extensibilidad&lt;/strong&gt; se perderán. Dedicar tiempo y esfuerzo a estos valores es desperdiciarlo.&lt;/p&gt;
&lt;h2 id=&#34;7-tu-arquitectura-es-perfecta&#34;&gt;7. Tu arquitectura es perfecta&lt;/h2&gt;
&lt;p&gt;Si no hay forma de mejorar tu arquitectura, entonces no hay necesidad de que sea extensible. TDD, por su flujo de desarrollo incremental, fuerza a la arquitectura a ser extensible, simplemente haciéndote extenderla a medida que avanzas, y esto, como pintalabios en un cerdo, es algo que simplemente no necesitas.&lt;/p&gt;
&lt;h2 id=&#34;6-tu-documentación-es-perfecta&#34;&gt;6. Tu documentación es perfecta&lt;/h2&gt;
&lt;p&gt;Nunca olvidas una API, y cualquier cambio que hagas en tu software se documenta instantáneamente. Los tests que creas con TDD sirven como documentación, un ejemplo de cómo utilizar la API. Los tests correctamente nombrados y escritos explican el contexto del test, por lo que resulta sencillo encontrar el test que te muestra lo que necesitas entender. &lt;em&gt;Tu&lt;/em&gt; documentación es tan completa, que escribir tests es una clara violación del &lt;a href=&#34;https://c2.com/cgi/wiki?DontRepeatYourself&#34;&gt;principio DRY&lt;/a&gt;, así que claramente deberías evitar las pruebas.&lt;/p&gt;
&lt;h2 id=&#34;5-tu-equipo-nunca-cambia-y-todas-las-memorias-de-sus-miembros-son-perfectas&#34;&gt;5. Tu equipo nunca cambia y todas las memorias de sus miembros son perfectas&lt;/h2&gt;
&lt;p&gt;La memoria colectiva nunca olvida cada una de las líneas de código que escribió, o cuál era el contexto cuando la escribió. En ese caso, no necesitas las pruebas para recordarte lo que hace el código, por qué lo hace o cuál es la causa de ello. También significa que los miembros de tu equipo &lt;strong&gt;nunca se marchan&lt;/strong&gt;, o &lt;strong&gt;se reclutan nuevos miembros&lt;/strong&gt;, porque si este ocurriese, perderías información, o habría miembros que no recuerdan el código (sin haber estado allí cuando se escribió). Si este es el caso, no te molestes con las pruebas; tan solo interferirán en tu increible velocidad.&lt;/p&gt;
&lt;h2 id=&#34;4-hecho-significa-que-el-código-está-terminado&#34;&gt;4. &amp;ldquo;Hecho&amp;rdquo; significa que el código está terminado&lt;/h2&gt;
&lt;p&gt;Muchos equipos tienen una &lt;a href=&#34;https://www.allaboutagile.com/definition-of-done-10-point-checklist/&#34;&gt;definición de hecho&lt;/a&gt; (DoD) que significa que la característica está &amp;ldquo;hecha&amp;rdquo; cuando se encuentra en un estado tal que el usuario final puede recibir y ejecutar (codificada, probada, desplegada, documentada, etc.). Muchos otros en cambio, tu equipo incluido, prefieren una definición más sencilla y fácil de obtener que acepta &amp;ldquo;terminado&amp;rdquo; como &amp;ldquo;hecho&amp;rdquo;. Para ti es suficienet con que el desarrollador declare que él o ella completó su parte, y cualquier otra cosa es responsabilidad de otro. Si no necesitas que el código se pruebe por el dueño del producto / director / usuario para aceptarlo, entonces lo mejor que puedes hacer es pasar a la siguiente característica ya mismo, en lugar de alargar tu relación con &lt;em&gt;esta&lt;/em&gt; característica.&lt;/p&gt;
&lt;h2 id=&#34;3-te-pagan-por-codificar-no-por-probar&#34;&gt;3. Te pagan por codificar, no por probar&lt;/h2&gt;
&lt;p&gt;Ignorando el hecho de que los tests son código (sorpresa), las pruebas están hechas para probar. Quizá tu equipo de testers es suficientemente rápido como para ejecutar las pruebas a medida que tú codificas, y darte &lt;strong&gt;feedback&lt;/strong&gt; en pocos segundos, señalando las zonas en las que rompiste el código, de manera que puedas arreglarlo mientras los cambios están frescos en tu mente, así como una suite de regresión completa del producto, en caso de que hayas roto algo en un componente distinto cada noche (a ellos no les importa trabajar por las noches; adoran el silencio absoluto). Bien por ti, cuida esos testers, y asegúrate de que tienen suficiente trabajo como para no aburrirse e irse a otra compañía que les ofrezca mejores retos.&lt;/p&gt;
&lt;h2 id=&#34;2-depurar-no-cuenta-y-probar-requiere-mucho-tiempo&#34;&gt;2. Depurar no cuenta, y probar requiere mucho tiempo&lt;/h2&gt;
&lt;p&gt;Como en cualquier empresa competitiva, tu equipo debe entregar a tiempo, lo que significa que deben estimar cuándo se entregará. Ya que tu &lt;strong&gt;DoD&lt;/strong&gt; no incluye pruebas, y probablemente no podrás adivinar cuánto tiempo te llevará depurar la característica, lo que implica todo el ciclo de tira y afloja entre desarrollo y QA, sólo tienes que estimar cuánto tiempo te llevará codificarlo. Si quieres cumplir la fecha, no es necesario que añadas el &lt;strong&gt;20% de margen&lt;/strong&gt; en tu tiempo de entrega o perderás la fecha final. Peor aún, si añades el 20% a tus estimaciones, tu jefe podría pensar que estás rellenando las estimaciones, lo que es su trabajo. Si ocurre esto, ¿quién sabe lo que podría pasar? Es mejor jugar sobre seguro.&lt;/p&gt;
&lt;h2 id=&#34;1-sólo-es-una-teoría&#34;&gt;1. Sólo es una teoría&lt;/h2&gt;
&lt;p&gt;Como la Evolución (y la Gravedad), sólo es una teoría. Incluso si todas las razones de más arriba no fueran válidas, nunca nadie ha probado de forma inequívoca que &lt;em&gt;&lt;strong&gt;este producto&lt;/strong&gt;&lt;/em&gt; podría haberse hecho más rápido y con mejor calidad usando las metodologías de desarrollo new-age como TDD. Es solo una cuestión de opinión.&lt;/p&gt;
&lt;h2 id=&#34;prueba-tú-mismo&#34;&gt;Prueba tú mismo&lt;/h2&gt;
&lt;p&gt;Ahora, para probar si deberías usar el desarrollo dirigido por pruebas o no, vuelve a la lista. Cuenta cuántas razones te puedes aplicar. Si tienes &lt;strong&gt;diez&lt;/strong&gt; puntos, no uses TDD. De hecho, si marcaste más de &lt;strong&gt;uno&lt;/strong&gt; (la razón #8 podría hasta ser legítima), &lt;strong&gt;no escribas nada de código&lt;/strong&gt;. Quizás serías más útil eligiendo una carrera que tenga menos incógnitas y partes móviles. ¿Quizá pavimentar carreteras?&lt;/p&gt;
&lt;p&gt;Artículo original: &lt;a href=&#34;https://plus.google.com/107676240236745204608/posts&#34;&gt;Assaf Stone&lt;/a&gt;
Traducción: &lt;a href=&#34;https://www.magmax.org&#34;&gt;Miguel Ángel García&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Entonando el &#39;Mea Culpa&#39;</title>
      <link>https://magmax.org/blog/mea-culpa/</link>
      <pubDate>Tue, 07 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/mea-culpa/</guid>
      <description>
        
          &lt;p&gt;Es inevitable meter la pata de vez en cuando. Sin embargo, existen distintas maneras de reaccionar ante un problema. Cada una de ellas tiene sus consecuencias.&lt;/p&gt;
&lt;p&gt;En este post tan sólo me gustaría contar lo que he visto en mi vida laboral, ya que me parece bastante curioso.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/poetry.jpg&#34;/&gt; 
&lt;/figure&gt;

&lt;h1 id=&#34;causas&#34;&gt;Causas&lt;/h1&gt;
&lt;p&gt;La verdad es que no sé por qué será. Quizá sean los jefes.&lt;/p&gt;
&lt;p&gt;He tenido jefes que te echaban unas broncas de campeonato cuando metías la pata. También he tenido jefes que, cuando ocurría un problema podían tirarse hasta un día buscando al culpable para poder echarle la bronca. Estas dos posturas tienen una reacción lógica: cuando metes la pata, te callas y esperas que nadie se dé cuenta.&lt;/p&gt;
&lt;p&gt;También he tenido jefes que no echan broncas. Saben que no es necesario: todos somos responsables de nuestro trabajo, y somos conscientes de que las cosas mal hechas nos perjudican principalmente a nosotros mismos.&lt;/p&gt;
&lt;p&gt;No sé si será por el tipo de trabajo. Actualmente hago más de administrador de sistemas que de programador. Cuando ocurre un problema, necesitamos saber la causa.&lt;/p&gt;
&lt;p&gt;Es justamente por esta razón por la que, ante un problema, es importante anunciar el culpable. Si no es así, hay que buscar la causa. No se puede dejar al azar, ya que el error volverá a producirse y puede enmascararse con otro problema más. O combinarse y generar algo peor.&lt;/p&gt;
&lt;h1 id=&#34;consecuencias&#34;&gt;Consecuencias&lt;/h1&gt;
&lt;p&gt;¿Cuáles son las consecuencias de cada uno de estos actos? Pues resulta mucho más importante de lo que parece.&lt;/p&gt;
&lt;p&gt;Cuando tienes la presión de que te van a regañar, tiendes a esconder la mano. Las cosas &amp;ldquo;ocurren solas&amp;rdquo; y también &amp;ldquo;se arreglan solas&amp;rdquo;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Integración contínua: BuildBot</title>
      <link>https://magmax.org/blog/buildbot/</link>
      <pubDate>Thu, 02 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/buildbot/</guid>
      <description>
        
          &lt;p&gt;Como prometí en el &lt;a href=&#34;https://magmax.org/blog/jenkins/&#34;&gt;artículo anterior&lt;/a&gt;, es hora de presentar otra alternativa para la Integración Contínua (&lt;em&gt;CI&lt;/em&gt;, o &lt;em&gt;Continuous Integration&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;No es la única alternativa, pero yo sólo he trasteado con &lt;a href=&#34;https://jenkins-ci.org/&#34;&gt;Jenkins&lt;/a&gt; y con &lt;a href=&#34;https://buildbot.net/&#34;&gt;BuildBot&lt;/a&gt;.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/buildbot.png&#34;
         alt=&#34;Buildbot&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;maestroesclavo&#34;&gt;Maestro/Esclavo&lt;/h2&gt;
&lt;p&gt;De la misma manera que Jenkins, BuildBot tiene una arquitectura Maestro/Esclavo. Sin embargo, Jenkins nos gestionaba la instalación de los esclavos, mientras que BuildBot no lo hará. En general, es menos amigable que Jenkins.&lt;/p&gt;
&lt;p&gt;Cuando comenzamos un proyecto hay que crear el maestro y después crear los esclavos. Este es un proceso sencillo que veremos mediante un ejemplo.&lt;/p&gt;
&lt;h3 id=&#34;instalando&#34;&gt;Instalando&lt;/h3&gt;
&lt;p&gt;El maestro y el esclavo son paquetes debian separados. Eso nos permite instalarlos sólo allí donde hacen falta. En el ejemplo se considerará que ambos están en la misma máquina, aunque no tendría por qué.&lt;/p&gt;
&lt;p&gt;Se puede ejecutar en casi cualquier parte, ya que está escrito en python. Basta con tener el intérprete instalado en la máquina.&lt;/p&gt;
&lt;h2 id=&#34;el-ejemplo&#34;&gt;El ejemplo&lt;/h2&gt;
&lt;p&gt;Y como ejemplo, trataré de realizar lo mismo que ya hicimos en Jenkins: Vamos a configurar &lt;a href=&#34;https://www.pydoubles.org/&#34;&gt;pyDoubles&lt;/a&gt; para ejecutarlo con BuildBot.&lt;/p&gt;
&lt;h3 id=&#34;creando-el-esclavo&#34;&gt;Creando el esclavo&lt;/h3&gt;
&lt;p&gt;Comienzo por el esclavo porque no vamos a configurar nada, así que bastará con ejecutar:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ buildslave create-slave -r ./example-slave localhost example-slave pass
mkdir ./example-slave
chdir ./example-slave
mkdir ./example-slave/info
Creating info/admin, you need to edit it appropriately
Creating info/host, you need to edit it appropriately
Not creating info/access_uri - add it if you wish
Please edit the files in ./example-slave/info appropriately.
buildslave configured in ./example-slave
$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como véis, un proceso bastante sencillo. Y ahora sólo hay que seguir las instrucciones y editar los archivos que se indican: &lt;code&gt;info/admin&lt;/code&gt;, &lt;code&gt;info/host&lt;/code&gt; y uno que no indica claramente, que es el &lt;code&gt;buildbot.tac&lt;/code&gt;. Si abrís los archivos, veréis que &lt;code&gt;buildbot.tac&lt;/code&gt; es un programa python. Realmente no es necesario saber python para editarlo, ya que la plantilla es autoexplicativa. En nuestro caso, ni siquiera es necesario editarlo porque va a estar todo en local.&lt;/p&gt;
&lt;p&gt;La opción &amp;lsquo;&lt;code&gt;-r&lt;/code&gt;&amp;rsquo; que utilicé en la línea de órdenes sirve para que utilice rutas relativas. Así, podríamos mover de directorio la configuración del esclavo.&lt;/p&gt;
&lt;p&gt;En el caso del esclavo está claro qué archivos podemos mantener en un sistema de control de versiones: los tres indicados (&lt;code&gt;info/admin&lt;/code&gt;, &lt;code&gt;info/host&lt;/code&gt; y &lt;code&gt;buildbot.tac&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id=&#34;creando-el-maestro&#34;&gt;Creando el maestro&lt;/h3&gt;
&lt;p&gt;De manera similar al esclavo, podemos crear el maestro:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ buildbot create-master -r example-master
mkdir ./example-master
creating master.cfg.sample
populating public_html/
creating database (sqlite:///state.sqlite)
buildmaster configured in ./example-master
$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como podeis observar ahora tardará un poco más, ya que tiene que crear e inicializar la base de datos. Por defecto utilizará &lt;strong&gt;sqlite&lt;/strong&gt;, pero podemos configurarlo contra un &lt;strong&gt;mysql&lt;/strong&gt;. Para el ejemplo, &lt;strong&gt;sqlite&lt;/strong&gt; será suficiente.&lt;/p&gt;
&lt;p&gt;Veamos lo que nos ha creado aquí:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
├── buildbot.tac
├── master.cfg.sample
├── public_html
│   ├── bg_gradient.jpg
│   ├── default.css
│   ├── favicon.ico
│   └── robots.txt
└── state.sqlite
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lo primero es mover el archivo &amp;ldquo;&lt;code&gt;master.cfg.sample&lt;/code&gt;&amp;rdquo; a &amp;ldquo;&lt;code&gt;master.cfg&lt;/code&gt;&amp;rdquo;. Éste será nuestra plantilla a modificar.&lt;/p&gt;
&lt;p&gt;¿Qué tendríamos que guardar en un sistema de control de versiones? Pues basta con guardar &lt;code&gt;buildbot.tac&lt;/code&gt; y &lt;code&gt;master.cfg&lt;/code&gt;. Nada más. El resto de los archivos podemos volver a obtenerlos con la orden (fijáos que lo ejecuto desde dentro del directorio creado):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;example-master$ buildbot upgrade-master
checking for running master
checking master.cfg
upgrading basedir
populating public_html/
populating ./public_html/favicon.ico
populating ./public_html/robots.txt
populating ./public_html/bg_gradient.jpg
populating ./public_html/default.css
populating ./master.cfg.sample
upgrading database (sqlite:///state.sqlite)

upgrade complete
example-master$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Evidentemente, perderemos el histórico de datos, pero&amp;hellip; ¿es realmente importante? Si es así, recomiendo hacer copias de seguridad como se harían de cualquier otra base de datos. Y, evidentemente, no utilizar sqlite.&lt;/p&gt;
&lt;h3 id=&#34;configurando-el-maestro&#34;&gt;Configurando el maestro&lt;/h3&gt;
&lt;p&gt;Ahora es necesario configurar el maestro. Podéis observar el parecido que hay en el archivo &lt;code&gt;buildbot.tac&lt;/code&gt; con el del esclavo. Dejaremos las opciones tal y como están.&lt;/p&gt;
&lt;p&gt;Vamos con el complicado: &lt;code&gt;master.cfg&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Sí, es python. Pero para hacer lo básico no es necesario saber python, sino seguir los consejos de los comentarios. La ventaja de utilizar python es que ofrece mucha versatilidad.&lt;/p&gt;
&lt;p&gt;Por defecto trae configurado el proyecto &lt;em&gt;pyFlakes&lt;/em&gt;, que vamos a cambiar por &lt;strong&gt;pyDoubles&lt;/strong&gt;. Veremos que no es tan complejo. Voy a pegar todo el archivo, pero si lo comparáis, veréis que sólo han cambiado las secciones &amp;ldquo;&lt;em&gt;ChangeSources&lt;/em&gt;&amp;rdquo;, &amp;ldquo;&lt;em&gt;Builders&lt;/em&gt;&amp;rdquo; y &amp;ldquo;&lt;em&gt;Project Identity&lt;/em&gt; &amp;quot;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# -*- python -*-&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ex: set syntax=python:&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  4&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# This is a sample buildmaster config file. It must be installed as&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  5&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#39;master.cfg&amp;#39; in your buildmaster&amp;#39;s base directory.&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  6&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  7&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# This is the dictionary that the buildmaster pays attention to. We also use&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  8&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# a shorter alias to save typing.&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;  9&lt;/span&gt;c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BuildmasterConfig &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 10&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 11&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;####### BUILDSLAVES&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 12&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 13&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# The &amp;#39;slaves&amp;#39; list defines the set of recognized buildslaves. Each element is&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 14&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# a BuildSlave object, specifying a unique slave name and password.  The same&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 15&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# slave name and password must be configured on the slave.&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 16&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; buildbot.buildslave &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; BuildSlave
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 17&lt;/span&gt;c[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;slaves&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [BuildSlave(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;example-slave&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pass&amp;#34;&lt;/span&gt;)]
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 18&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 19&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#39;slavePortnum&amp;#39; defines the TCP port to listen on for connections from slaves.&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 20&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# This must match the value configured into the buildslaves (with their&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 21&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# --master option)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 22&lt;/span&gt;c[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;slavePortnum&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9989&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 23&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 24&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;####### CHANGESOURCES&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 25&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 26&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# the &amp;#39;change_source&amp;#39; setting tells the buildmaster how it should find out&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 27&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# about source code changes.  Here we point to the buildbot clone of pyflakes.&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 28&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 29&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; buildbot.changes.gitpoller &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; GitPoller
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 30&lt;/span&gt;c[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;change_source&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 31&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#c[&amp;#39;change_source&amp;#39;].append(GitPoller(&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 32&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#        &amp;#39;git://github.com/buildbot/pyflakes.git&amp;#39;,&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 33&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#        workdir=&amp;#39;gitpoller-workdir&amp;#39;, branch=&amp;#39;master&amp;#39;,&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 34&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#        pollinterval=300))&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 35&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 36&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;####### SCHEDULERS&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 37&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 38&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Configure the Schedulers, which decide how to react to incoming changes.  In this&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 39&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# case, just kick off a &amp;#39;runtests&amp;#39; build&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 40&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 41&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; buildbot.schedulers.basic &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; SingleBranchScheduler
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 42&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; buildbot.schedulers.forcesched &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ForceScheduler
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 43&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; buildbot.changes &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; filter
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 44&lt;/span&gt;c[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;schedulers&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 45&lt;/span&gt;c[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;schedulers&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(SingleBranchScheduler(
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 46&lt;/span&gt;                            name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;all&amp;#34;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 47&lt;/span&gt;                            change_filter&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;filter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ChangeFilter(branch&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;master&amp;#39;&lt;/span&gt;),
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 48&lt;/span&gt;                            treeStableTimer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 49&lt;/span&gt;                            builderNames&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;runtests&amp;#34;&lt;/span&gt;]))
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 50&lt;/span&gt;c[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;schedulers&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(ForceScheduler(
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 51&lt;/span&gt;                            name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;force&amp;#34;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 52&lt;/span&gt;                            builderNames&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;runtests&amp;#34;&lt;/span&gt;]))
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 53&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 54&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;####### BUILDERS&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 55&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 56&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# The &amp;#39;builders&amp;#39; list defines the Builders, which tell Buildbot how to perform a build:&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 57&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# what steps, and which slaves can execute them.  Note that any particular build will&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 58&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# only take place on one slave.&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 59&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 60&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; buildbot.process.factory &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; BuildFactory
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 61&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; buildbot.steps.source &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Mercurial
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 62&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; buildbot.steps.shell &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ShellCommand
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 63&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 64&lt;/span&gt;factory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BuildFactory()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 65&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# check out the source&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 66&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addStep(Mercurial(repourl&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://bitbucket.org/carlosble/pydoubles&amp;#39;&lt;/span&gt;, mode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;copy&amp;#39;&lt;/span&gt;))
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 67&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# run the tests (note that this will require that &amp;#39;trial&amp;#39; is installed)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 68&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addStep(ShellCommand(command&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nosetests&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pyDoublesTests/unit.py&amp;#34;&lt;/span&gt;]))
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 69&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addStep(ShellCommand(command&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nosetests&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pyDoublesTests/hamcrest_integration.py&amp;#34;&lt;/span&gt;]))
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 70&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 71&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; buildbot.config &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; BuilderConfig
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 72&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 73&lt;/span&gt;c[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;builders&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 74&lt;/span&gt;c[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;builders&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 75&lt;/span&gt;    BuilderConfig(name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;runtests&amp;#34;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 76&lt;/span&gt;      slavenames&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;example-slave&amp;#34;&lt;/span&gt;],
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 77&lt;/span&gt;      factory&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;factory))
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 78&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 79&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;####### STATUS TARGETS&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 80&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 81&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#39;status&amp;#39; is a list of Status Targets. The results of each build will be&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 82&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# pushed to these targets. buildbot/status/*.py has a variety to choose from,&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 83&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# including web pages, email senders, and IRC bots.&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 84&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 85&lt;/span&gt;c[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 86&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 87&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; buildbot.status &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; html
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 88&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; buildbot.status.web &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; authz, auth
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 89&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 90&lt;/span&gt;authz_cfg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;authz&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Authz(
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 91&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# change any of these to True to enable; see the manual for more&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 92&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# options&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 93&lt;/span&gt;    auth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;auth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BasicAuth([(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pyflakes&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pyflakes&amp;#34;&lt;/span&gt;)]),
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 94&lt;/span&gt;    gracefulShutdown &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 95&lt;/span&gt;    forceBuild &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;auth&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# use this to test your slave once it is set up&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 96&lt;/span&gt;    forceAllBuilds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 97&lt;/span&gt;    pingBuilder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 98&lt;/span&gt;    stopBuild &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 99&lt;/span&gt;    stopAllBuilds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;100&lt;/span&gt;    cancelPendingBuild &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;101&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;102&lt;/span&gt;c[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(html&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;WebStatus(http_port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8010&lt;/span&gt;, authz&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;authz_cfg))
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;103&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;104&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;####### PROJECT IDENTITY&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;105&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;106&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# the &amp;#39;title&amp;#39; string will appear at the top of this buildbot&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;107&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# installation&amp;#39;s html.WebStatus home page (linked to the&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;108&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#39;titleURL&amp;#39;) and is embedded in the title of the waterfall HTML page.&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;109&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;110&lt;/span&gt;c[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;My BuildBot Installation&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;111&lt;/span&gt;c[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;titleURL&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.magmax.org&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;112&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;113&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# the &amp;#39;buildbotURL&amp;#39; string should point to the location where the buildbot&amp;#39;s&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;114&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# internal web server (usually the html.WebStatus page) is visible. This&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;115&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# typically uses the port number set in the Waterfall &amp;#39;status&amp;#39; entry, but&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;116&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# with an externally-visible host name which the buildbot cannot figure out&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;117&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# without some help.&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;118&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;119&lt;/span&gt;c[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;buildbotURL&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://localhost:8010/&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;120&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;121&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;####### DB URL&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;122&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;123&lt;/span&gt;c[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;db&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;124&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# This specifies what database buildbot uses to store its state.  You can leave&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;125&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# this at its default for all but the largest installations.&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;126&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;db_url&amp;#39;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sqlite:///state.sqlite&amp;#34;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;127&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;ejecutando-el-maestro&#34;&gt;Ejecutando el maestro&lt;/h3&gt;
&lt;p&gt;Ningún misterio: desde el directorio del maestro, basta ejecutar:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;example-master$ buildbot start
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ejecutando-el-esclavo&#34;&gt;Ejecutando el esclavo&lt;/h3&gt;
&lt;p&gt;Tampoco tiene misterio: desde el directorio del esclavo, basta ejecutar:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;example-slave$ buildslave start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y todo debería ir correctamente.&lt;/p&gt;
&lt;h2 id=&#34;lanzando-una-build-cómo-usar-la-gui&#34;&gt;Lanzando una build (cómo usar la GUI)&lt;/h2&gt;
&lt;p&gt;Si os habéis fijado en los logs o en el archivo de configuración, el maestro está sirviendo una web en &lt;a href=&#34;https://localhost:8010/&#34;&gt;https://localhost:8010/&lt;/a&gt;. Lo primero que haremos será &lt;em&gt;LogIn&lt;/em&gt;. Como no lo hemos modificado en el archivo de configuración, bastará con usar &lt;strong&gt;pyflakes/pyflakes&lt;/strong&gt; (si dudáis, mirad la sección de autenticación del archivo &lt;code&gt;master.cfg&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Una vez autenticados, podemos irnos a la sección &amp;ldquo;&lt;em&gt;Waterfall&lt;/em&gt;&amp;rdquo; y pulsar sobre &amp;ldquo;&lt;strong&gt;runtests&lt;/strong&gt;&amp;rdquo;. Eso nos mostrará la página de ejecución de tests, donde está todo configurado. Basta pulsar el botón &amp;ldquo;&lt;strong&gt;Force Build&lt;/strong&gt;&amp;rdquo;. Y, si todo es correcto, debería haberse ejecutado la batería de pruebas.&lt;/p&gt;
&lt;p&gt;La ventana más útil para ver resultados es la de &lt;em&gt;Waterfall&lt;/em&gt;. A partir de ahí no os costará mucho navegar el resto.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/buildbot-grid.jpg&#34;
         alt=&#34;Buildbot grid&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;comparativa-entre-buildbot-y-jenkins&#34;&gt;Comparativa entre BuildBot y Jenkins&lt;/h2&gt;
&lt;p&gt;A menudo las comparativas son odiosas. Éste es uno de esos casos. No se puede decir que uno sea mejor que el otro, pero sí que cada cual tiene sus puntos fuertes.&lt;/p&gt;
&lt;p&gt;Voy a exponer algunas de estas ventajas de cada uno.&lt;/p&gt;
&lt;h3 id=&#34;guardando-las-configuraciones&#34;&gt;Guardando las configuraciones&lt;/h3&gt;
&lt;p&gt;Ambos utilizan una base de datos para almacenar los resultados. Sin embargo, la forma de guardar las configuraciones de los trabajos es completamente diferente: Jenkins utiliza archivos XML, mientras que BuildBot utiliza un único archivo Python.&lt;/p&gt;
&lt;p&gt;Dado que los archivos de Jenkins no se modificarán a mano, sino utilizando la GUI, resultará dificil mantenerlos en un sistema de control de versiones. Sin embargo, resulta muy sencillo hacerlo con BuildBot.&lt;/p&gt;
&lt;h3 id=&#34;configuraciones-cambiantes&#34;&gt;Configuraciones cambiantes&lt;/h3&gt;
&lt;p&gt;Si tenemos configuraciones que cambian mucho, entonces es mejor no utilizar BuildBot. En BuildBot las configuraciones son estáticas y se requiere un reinicio del maestro para aplicar los cambios. Por esa razón, en estos casos es mejor utilizar Jenkins.&lt;/p&gt;
&lt;p&gt;Si lo único que va a cambiar son algunos parámetros, entonces sí podemos plantearnos usar BuildBot.&lt;/p&gt;
&lt;h3 id=&#34;try&#34;&gt;Try&lt;/h3&gt;
&lt;p&gt;BuildBot tiene una característica que Jenkins no tiene: el &lt;strong&gt;try&lt;/strong&gt;. Sirve para &amp;ldquo;&lt;em&gt;intentar&lt;/em&gt;&amp;rdquo; una build, de manera que coja los cambios locales, aunque no estén en el repositorio, e intente realizar una build con ellos. Esta característica puede resultar de mucha utilidad cuando se quieren probar situaciones que pueden no funcionar correctamente o para probar el propio sistema de CI.&lt;/p&gt;
&lt;h3 id=&#34;bonito&#34;&gt;Bonito&lt;/h3&gt;
&lt;p&gt;Indiscutiblemente, Jenkins es mucho más bonito que BuildBot. Han cuidado mucho más la interfaz.&lt;/p&gt;
&lt;p&gt;Además, BuildBot ofrece los resultados sin más, mientras que Jenkins permite procesarlos y presentarlos con una interfaz más bonita.&lt;/p&gt;
&lt;h3 id=&#34;ampliable&#34;&gt;Ampliable&lt;/h3&gt;
&lt;p&gt;Jenkins permite la fácil ampliación mediante la creación de &lt;em&gt;plug-ins&lt;/em&gt;. Estas extensiones requieren conocimientos de Java, &lt;a href=&#34;https://commons.apache.org/jelly/&#34;&gt;Jelly&lt;/a&gt; y, probablemente, un poco de Groovy, además de conocer la API.&lt;/p&gt;
&lt;p&gt;Con BuildBot es probable que no necesitemos de ampliaciones, ya que se puede programar sobre la propia build. En caso de necesitarlas, basta con escribir el programa Python adecuado. Para ello, podemos basarnos en el propio código de la clase de la que heredaremos.&lt;/p&gt;
&lt;p&gt;Para algunas cosas, será más sencillo el sistema de Jenkins. Para otras, el de BuildBot.&lt;/p&gt;
&lt;h3 id=&#34;rápido&#34;&gt;Rápido&lt;/h3&gt;
&lt;p&gt;Jenkins tarda más de un minuto en reiniciarse. BuildBot breves segundos.&lt;/p&gt;
&lt;p&gt;Tras un reinicio, Jenkins pierde el control de los esclavos: no sabe si están ejecutando algo, así que es probable que los trate como desocupados. Esto puede producir que fallen tanto el trabajo en curso como el nuevo. En el caso de que no lance un nuevo trabajo, Jenkins ignorará los resultados del trabajo en curso, por lo que se habrá perdido irremediablemente.&lt;/p&gt;
&lt;p&gt;Con BuildBot también se pierde la ejecución en curso. Además, cuando recupera el contacto con el esclavo, relanzará la build que estaba a medias. Sin embargo, el maestro reinicia al esclavo, evitando que haya dos instancias del esclavo corriendo simultáneamente.&lt;/p&gt;
&lt;p&gt;La documentación de Jenkins es extensa, pero entrar en el código suele ser complejo. La documentación de BuildBot es bastante buena, aunque la página web está desactualizada: recomiendo descargarse el código y leer la documentación directamente de allí (formato &lt;em&gt;sphinx&lt;/em&gt;, que podéis compilar en vuestras máquinas). De todas maneras, es código Python, que suele ser bastante legible.&lt;/p&gt;
&lt;h3 id=&#34;api&#34;&gt;API&lt;/h3&gt;
&lt;p&gt;Jenkins tiene API en formatos JSON y XML. Además, ofrece un cliente java bastante potente.&lt;/p&gt;
&lt;p&gt;BuildBot tiene API en formato JSON. Es algo más sencilla, pero es normal: la mayor parte de las cosas que queremos hacer estarán escritas en python, en el archivo de configuración.&lt;/p&gt;
&lt;p&gt;Jenkins, además, ofrece una interfaz Groovy, sólo disponible para administradores. Sobre esta interfaz debo prevenir que es peligrosa: un descuido en una condición y puedes renombrar todos los trabajos en curso; un &lt;code&gt;System.exit&lt;/code&gt;, y se apagará el servidor.&lt;/p&gt;
&lt;h2 id=&#34;otras-opciones&#34;&gt;Otras opciones&lt;/h2&gt;
&lt;p&gt;No son las dos únicas opciones disponibles. Existen muchas otras, de libre disposición, como &lt;a href=&#34;https://cruisecontrol.sourceforge.net/&#34;&gt;CruiseControl&lt;/a&gt;, &lt;a href=&#34;https://jenkins-ci.org/&#34;&gt;Jenkins&lt;/a&gt;, &lt;a href=&#34;https://buildbot.net/&#34;&gt;BuildBot&lt;/a&gt;, &lt;a href=&#34;https://gump.apache.org/&#34;&gt;Apache Gump&lt;/a&gt; o &lt;a href=&#34;https://continuum.apache.org/&#34;&gt;Apache Continuum&lt;/a&gt;. También hay aplicaciones propietarias, como &lt;a href=&#34;https://www.atlassian.com/es/software/bamboo/overview&#34;&gt;Bamboo&lt;/a&gt; o &lt;a href=&#34;https://en.wikipedia.org/wiki/Azure_DevOps_Server&#34;&gt;Team Foundation Server&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Otro ejemplo es &lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis-CI&lt;/a&gt;. En este caso, nos venden el servicio, ya que no resulta sencillo encontrar información sobre cómo instalárnoslo. Aún así, es software libre y el código está disponible.&lt;/p&gt;
&lt;p&gt;Como véis, todas estas sólo las mencionaré, ya que nunca las he utilizado. Hay muchas otras. Tan sólo tenéis que elegir una y comenzar a usarla.&lt;/p&gt;
&lt;h2 id=&#34;en-producción&#34;&gt;En producción&lt;/h2&gt;
&lt;p&gt;Y como no hay nada mejor que un ejemplo, podéis visitar los &lt;em&gt;waterfall&lt;/em&gt; de gente que ya lo está usando:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://builder.blender.org/waterfall&#34;&gt;Blender&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chromium-build.appspot.com/p/chromium/console&#34;&gt;Chromium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://build.gnome.org/&#34;&gt;Gnome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://buildbot.python.org/all/waterfall&#34;&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;y-fin&#34;&gt;Y fin&lt;/h2&gt;
&lt;p&gt;Realmente las condiciones para utilizar cualquier sistema de integración contínua son las mismas: &lt;strong&gt;deben existir pruebas&lt;/strong&gt; y &lt;strong&gt;debe ser fácil de desplegar&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;La elección de un buen servidor de integración contínua es importante. Al principio será más un estorbo que otra cosa, pero poco a poco termina transformándose en un servicio crítico que, cuando está parado, la empresa no avanza.&lt;/p&gt;
&lt;p&gt;Puede parecer exagerado, pero la dependencia con el mismo es importante: termina siendo el &lt;em&gt;juez supremo&lt;/em&gt; de nuestros cambios. Si el servidor de CI no lo aprueba, nuestros cambios no se aplican. Da igual cómo nos defendamos o cómo queramos interpretarlo: si no hay verde, nuestro trabajo no está terminado.&lt;/p&gt;
&lt;p&gt;Además, un buen servidor de CI nos permitirá recoger estadísticas de uso, de manera que podamos optimizar el proceso. Será interesante evaluar la posibilidad de lanzar varios hilos, comprar más hardware (más esclavos), evaluar el impacto de un cambio, comprobar el estilo de nuestro código, etc.&lt;/p&gt;
&lt;p&gt;Elegid uno, y usadlo.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Integración continua: Jenkins</title>
      <link>https://magmax.org/blog/jenkins/</link>
      <pubDate>Sat, 21 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/jenkins/</guid>
      <description>
        
          &lt;p&gt;Ahora está de moda eso de la integración continua (en adelante, &lt;em&gt;CI&lt;/em&gt;. de &lt;em&gt;Continuous Integration&lt;/em&gt;). Pero&amp;hellip; ¿Qué es eso de la &lt;em&gt;CI&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;Contaré a grandes rasgos algunos aspectos y después me centraré en la configuración de un trabajo con jenkins.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/jenkins.png&#34;
         alt=&#34;Jenkins&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;qué-es-ci&#34;&gt;¿Qué es CI?&lt;/h2&gt;
&lt;p&gt;Asumamos que tenéis una aplicación terminada; sin embargo, descubrís un pequeño defecto que no os lleva más de 5 minutos arreglar. Desde el mismo momento en el que lo corregís, guardáis y queréis hacer el cambio definitivo, &lt;em&gt;¿cuánto tiempo pasa?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;En ese momento es cuando comienza el infierno:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vuestro cambio se &lt;em&gt;mezcla con otros cambios&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Dependencias&lt;/em&gt; con librerías que ya no existen&lt;/li&gt;
&lt;li&gt;Hay que volver a &lt;em&gt;desplegar&lt;/em&gt;, &lt;em&gt;configurar&lt;/em&gt;,&amp;hellip; el producto para poder probarlo&lt;/li&gt;
&lt;li&gt;Con suerte, otro departamento necesitará que le echéis una mano para &lt;em&gt;probarlo&lt;/em&gt;. Con mala suerte, no se realizan pruebas en absoluto.&lt;/li&gt;
&lt;li&gt;Se vuelven a abrir incidencias con problemas que ya tenía la versión anterior&lt;/li&gt;
&lt;li&gt;Hay que actualizar la &lt;em&gt;documentación&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Posiblemente os pregunten si hay algo nuevo para &lt;em&gt;traducir&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Hay que &lt;em&gt;empaquetar&lt;/em&gt; el producto&lt;/li&gt;
&lt;li&gt;Además, tenemos que &lt;em&gt;probar&lt;/em&gt; el nuevo paquete del producto&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Todos estos puntos y otros dependen de cada empresa, pero siempre es un dolor. Pensadlo en serio: ¿cuánto tiempo puede pasar? ¿Un mes?&lt;/p&gt;
&lt;p&gt;Pues bien&amp;hellip; &lt;em&gt;La integración continua consiste, idealmente, en que en el momento en el que metes tu cambio en el repositorio, se desencadena un proceso automático que termina con la publicación/denegación de la nueva versión y un mail en tu cuenta de correo con el resultado&lt;/em&gt;. Así de simple. Idealmente. Y, de nuevo idealmente, se trata de un proceso de minutos.&lt;/p&gt;
&lt;p&gt;Claro, entre un caso y el otro hay miles de grises, pero conviene saber cuál es el objetivo real de la &lt;em&gt;CI&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Por definición, en un proceso automático no intervienen las personas. Así que tenéis dos opciones: o bien confiais en lo buenísimos programadores que sois, ya que nunca rompéis nada, o bien asumís que no somos perfectos y que necesitáis probar el producto. Lo que nos da la&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;primera-condición-necesitamos-pruebas-automáticas&#34;&gt;Primera condición: Necesitamos pruebas automáticas&lt;/h3&gt;
&lt;p&gt;Si no hay pruebas automáticas, apaga y vámonos. Y éstas deben desencadenarse con un único comando o con un conjunto de comandos suficientemente pequeño. Y deben cumplir las condiciones de las buenas pruebas (FIRST):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Fast&lt;/em&gt;: Más rápidas que Usain Bolt. La idea es que una rama que intenta entrar en la rama principal, si pasa las pruebas, se &lt;em&gt;mergea&lt;/em&gt; automáticamente.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Independant&lt;/em&gt;: No importa el orden. De hecho, es mejor que se ordenen de forma aleatoria (pero dejen constancia del orden, para que puedan cumplir la siguiente condición).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Repeatable&lt;/em&gt;: Todo esto no sirve si no podéis reproducir el problema si se produce.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Small&lt;/em&gt;: Pequeñines sí, gracias. Así acotarán más la zona problemática.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Transparent&lt;/em&gt;: Que se vea claramente la intención de la prueba.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;segunda-condición-fácil-de-desplegar&#34;&gt;Segunda condición: Fácil de desplegar&lt;/h3&gt;
&lt;p&gt;También necesitamos que se pueda desplegar de forma automática. Si no es así, ya
hemos terminado. No sirve de nada tener que estar hackeando mogollón de ficheros
en el sistema. Con un poquito de suerte, podéis utilizar &lt;a href=&#34;https://puppetlabs.com&#34;&gt;puppet&lt;/a&gt;  o &lt;a href=&#34;https://www.opscode.com/chef&#34;&gt;chef&lt;/a&gt;  [yo
mismo escribí un &amp;ldquo;tutorial sobre puppet] no hace mucho) para hacer todas las ñapas que sean necesarias.&lt;/p&gt;
&lt;h3 id=&#34;tercera-condición-servidor-de-integración-contínua&#34;&gt;Tercera condición: Servidor de integración contínua&lt;/h3&gt;
&lt;p&gt;Es importante tener un programa que detecte el cambio y lance todas estas pruebas.&lt;/p&gt;
&lt;p&gt;Aunque es posible que necesitéis más cosas, como un servidor de artefactos/librerías, bases de datos, licencias, gestión de documentación, gestión de traducciones, publicación del artefacto resultante, servidores de mail, &amp;hellip;&lt;/p&gt;
&lt;p&gt;En este caso vamos a utilizar &lt;a href=&#34;https://jenkins-ci.org&#34;&gt;Jenkins&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;instalando-jenkins&#34;&gt;Instalando Jenkins&lt;/h2&gt;
&lt;p&gt;Lo siento, no me voy a extender. Os lo descargáis y ejecutáis:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ java -jar jenkins.war
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y comenzará a soltar guarrería javera por la pantalla. No os preocupéis por eso.&lt;/p&gt;
&lt;p&gt;Por lo demás, ya está. Podéis abrir un navegador en la dirección
&lt;a href=&#34;https://localhost:8080&#34;&gt;https://localhost:8080&lt;/a&gt; .&lt;/p&gt;
&lt;h2 id=&#34;configurando-un-proyecto-pydoubles&#34;&gt;Configurando un proyecto: pyDoubles&lt;/h2&gt;
&lt;p&gt;He elegido &lt;a href=&#34;https://www.pydoubles.org/&#34;&gt;pyDoubles&lt;/a&gt;  para el ejemplo, ya que es pequeñín y tiene pruebas.&lt;/p&gt;
&lt;p&gt;El primer problema es que está en un &lt;a href=&#34;https://bitbucket.org/carlosble/pydoubles/src&#34;&gt;repositorio mercurial&lt;/a&gt; , así que tendremos que añadir el plugin de mercurial a Jenkins:&lt;/p&gt;
&lt;h3 id=&#34;añadir-el-plugin-de-mercurial-a-jenkins&#34;&gt;Añadir el plugin de mercurial a Jenkins&lt;/h3&gt;
&lt;p&gt;Desde la ventana principal, pulsamos en &lt;em&gt;&amp;ldquo;Administrar Jenkins&amp;rdquo;&lt;/em&gt;, y después en &lt;em&gt;&amp;ldquo;Administrar Plugins&amp;rdquo;&lt;/em&gt;. Antes deberíamos pasar por &lt;em&gt;&amp;ldquo;configurar el sistema&amp;rdquo;&lt;/em&gt;, pero esa parte no es imprescindible y os la dejo a vosotros.&lt;/p&gt;
&lt;p&gt;Ahora, en la pestaña de &lt;em&gt;&amp;ldquo;Todos los plugins&amp;rdquo;&lt;/em&gt; buscáis el de mercurial, lo marcáis y le dais al botón de instalar. No tiene pérdida.&lt;/p&gt;
&lt;p&gt;Tras unos segundines os dirá que está todo listo para usarse.&lt;/p&gt;
&lt;h3 id=&#34;crear-el-proyecto&#34;&gt;Crear el proyecto&lt;/h3&gt;
&lt;p&gt;Volvemos a la ventana inicial y pulsamos en &lt;code&gt;Nueva Tarea&lt;/code&gt;. Indicamos que es un &lt;code&gt;Proyecto libre&lt;/code&gt; y le ponemos un nombre, algo imaginativo&amp;hellip; No sé&amp;hellip; &lt;em&gt;&amp;ldquo;pyDoubles&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Ahora vamos a lo básico:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;origen del código fuente&lt;/em&gt;: &lt;code&gt;mercurial&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;repository URL&lt;/em&gt;: &lt;code&gt;ssh://hg@bitbucket.org/carlosble/pydoubles&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;branch&lt;/em&gt;: &lt;code&gt;default&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Ejecutar&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&amp;ldquo;Añadir un nuevo paso&amp;rdquo;-&amp;gt;&amp;ldquo;Ejecutar línea de comandos (shell)&amp;quot;&lt;/em&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;mkdir $WORKSPACE/log &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; true
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;nosetests --with-xunit --xunit-file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WORKSPACE/log/unit.xml pyDoublesTests/unit.py
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;nosetests --with-xunit --xunit-file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WORKSPACE/log/hamcrest.xml pyDoublesTests/hamcrest_integration.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;Acciones para ejecutar después&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&amp;ldquo;Publicar los resultados de los tests JUnit&amp;rdquo;&lt;/em&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;**/log/*.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y ya está.&lt;/p&gt;
&lt;p&gt;Algunos comentarios: si en lugar de un único script hacéis varios, la diferencia será que parará en el primer error. Eso mismo puede hacerse ejecutando &amp;ldquo;set -e&amp;rdquo;, que es más cómodo.&lt;/p&gt;
&lt;p&gt;No he configurado el &lt;em&gt;polling&lt;/em&gt; ni ningún tipo de planificación. Sólo podremos ejecutarlo a mano. Creo que para el ejemplo es más que suficiente, y que la documentación os dará el resto.&lt;/p&gt;
&lt;h3 id=&#34;ejecutar&#34;&gt;Ejecutar&lt;/h3&gt;
&lt;p&gt;Es el momento en el que pulsáis sobre &lt;em&gt;&amp;ldquo;Ejecutar ahora&amp;rdquo;&lt;/em&gt;. Al poco tiempo os llamará la atención una barrita de progreso en la sección &lt;em&gt;&amp;ldquo;Estado de los nodos&amp;rdquo;&lt;/em&gt;. Voy a contar un poco más de esto.&lt;/p&gt;
&lt;p&gt;Jenkins consta de dos partes: el &lt;em&gt;maestro&lt;/em&gt; y los &lt;em&gt;esclavos&lt;/em&gt;. El &lt;em&gt;maestro&lt;/em&gt; es lo que hemos visto hasta ahora; los &lt;em&gt;esclavos&lt;/em&gt; son programas más pequeños que Jenkins instala en otras máquinas y que son los que ejecutarán todo el proyecto en sí. Dado que Jenkins consume bastantes recursos, es normal dejarlo apartado en un único servidor y configurar los workers en otras máquinas. Por defecto vemos que ha configurado dos esclavos en la máquina actual. En un entorno real, eso es un suicidio, pero para nuestro ejemplo es más que suficiente. Cuantos más esclavos tengamos, más trabajo se podrá realizar en paralelo.&lt;/p&gt;
&lt;p&gt;Una vez que haya terminado (no le llevará mucho tiempo), podréis navegar por la información de la build. Os recomiendo las secciones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&amp;ldquo;Salida de Consola&amp;rdquo;&lt;/em&gt;, donde podréis ver cómo fue la ejecución&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&amp;ldquo;Resultados de los tests&amp;rdquo;&lt;/em&gt;, donde se renderizan los tests en formato molón.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;conclusiones&#34;&gt;Conclusiones&lt;/h2&gt;
&lt;p&gt;Como podéis observar, resulta tremendamente sencillo crear un proyecto en Jenkins, siempre y cuando se cumplan las dos primeras condiciones: que haya pruebas automáticas y que resulte sencillo de desplegar.&lt;/p&gt;
&lt;p&gt;Aunque hacer cosas sencillas con Jenkins es tremendamente sencillo, hacer cosas un poco más difíciles es un infierno. No os emocionéis todavía creando proyectos a mansalva, ya que en el siguiente artículo comentaré otro servidor de &lt;em&gt;CI&lt;/em&gt; que puede gustaros aún más. Cada cual tiene sus ventajas y sus inconvenientes, claro está.&lt;/p&gt;
&lt;p&gt;Si, finalmente, termináis adoptando Jenkins como vuestro &lt;em&gt;CI&lt;/em&gt; habitual, os recomiendo que hagáis backup de los proyectos, que son archivos XML que se encontrarán, probablemente, en &lt;code&gt;$HOME/.jenkins&lt;/code&gt;. Tened cuidado, porque ese directorio tiende a crecer desmesuradamente (Jenkins tiene mecanismos para controlarlo, investigad las opciones del proyecto).&lt;/p&gt;
&lt;p&gt;En caso de que queráis esperar a ver la otra opción que quiero presentar, podéis ir adaptando vuestros proyectos para que se puedan probar y desplegar fácilmente. ¡Eso nunca está de más!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Programar sin condicionales</title>
      <link>https://magmax.org/blog/programarsinifs/</link>
      <pubDate>Sat, 05 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/programarsinifs/</guid>
      <description>
        
          &lt;p&gt;Desde el momento en el que comenzamos a programar, nos enseñan a utilizar el &lt;em&gt;IF&lt;/em&gt;. Eso es porque utilizar condiciones es fácil.&lt;/p&gt;
&lt;p&gt;Lo difícil es &lt;em&gt;no usarlas&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Y eso es lo que quiero ver aquí.&lt;/p&gt;
&lt;p&gt;NOTA: Voy a utilizar Python, pero podría utilizarse cualquier lenguaje. No es necesario tener conocimientos previos de Python.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Actualización 2012-05-12&lt;/em&gt;: Transformo referencias en links y añado el apartado de &amp;ldquo;reflexiones&amp;rdquo;.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/programming.jpg&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;por-qué&#34;&gt;¿Por qué?&lt;/h2&gt;
&lt;p&gt;Pero&amp;hellip; ¿Por qué molestarnos? Ya somos felices utilizando condicionales. Y nos va bien. ¿Merece la pena un sobreesfuerzo?&lt;/p&gt;
&lt;p&gt;A medida que vayamos descubriéndolo, mencionaré las razones.&lt;/p&gt;
&lt;h3 id=&#34;estética&#34;&gt;Estética&lt;/h3&gt;
&lt;p&gt;Aunque cuando lo estamos programando parece obvio, cuando de verdad queremos utilizarlo, los condicionales ensucian nuestro código. Veamos un ejemplo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; condicion1:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; condicion2:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;    accion1
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; condicion3:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;    accion3
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt;    accion4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;expresividad&#34;&gt;Expresividad&lt;/h3&gt;
&lt;p&gt;Resulta confuso, ¿no? Y, además resulta que he olvidado, a propósito un &lt;em&gt;else&lt;/em&gt;. Así que si se cumple la &lt;em&gt;condicion1&lt;/em&gt; pero no la &lt;em&gt;condicion2&lt;/em&gt;&amp;hellip; ¿qué? ¿Es un error? ¿Es como debe funcionar?&lt;/p&gt;
&lt;p&gt;Una posible solución es añadir un comentario. Puede parecer una buena solución, pero&amp;hellip;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Los comentarios no se prueban.&lt;/li&gt;
&lt;li&gt;Los comentarios no son formales y pueden resultar más difíciles de comprender que el propio código.&lt;/li&gt;
&lt;li&gt;Si alguien realiza un cambio, hay que confiar en que modificará el comentario.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Esto nos lleva a pensar que no debemos tener dos niveles de condicionales. Y eso es bueno.&lt;/p&gt;
&lt;h3 id=&#34;dificultad-para-pruebas&#34;&gt;Dificultad para pruebas&lt;/h3&gt;
&lt;p&gt;No somos conscientes de ello, pero cada condicional duplica el número de pruebas necesarias en nuestro código para mantener el mismo porcentaje de cobertura. Cada condicional anidado, los eleva al cuadrado.&lt;/p&gt;
&lt;p&gt;Tener un código largo con numerosas condiciones anidadas hace que el código sea &lt;em&gt;imposible&lt;/em&gt; de probar e &lt;em&gt;imposible&lt;/em&gt; de seguir. Siempre se nos escapará algún caso de uso.&lt;/p&gt;
&lt;p&gt;Para probar el código de arriba, necesitaré las siguientes pruebas:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Condicion1&lt;/th&gt;
&lt;th&gt;Condicion2&lt;/th&gt;
&lt;th&gt;Condicion3&lt;/th&gt;
&lt;th&gt;Esperado&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;accion1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;accion1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;&amp;ndash;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;&amp;ndash;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;accion3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;accion4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;accion3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;accion4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Y alguien puede decir: Bueno, puedes ahorrarte el caso &amp;ldquo;True True False&amp;rdquo;, ya que es igual que el &amp;ldquo;True True True&amp;rdquo;&amp;hellip; Sí, puedo. Pero estoy saltándome pruebas. Al fin y al cabo, el condicional está en el código.&lt;/p&gt;
&lt;p&gt;Mi opinión es que 8 casos de uso sólo para 2 condiciones&amp;hellip; es demasiado.&lt;/p&gt;
&lt;h2 id=&#34;condicionales-encubiertos&#34;&gt;Condicionales encubiertos&lt;/h2&gt;
&lt;p&gt;Hay que tener cuidado: no sólo los &lt;em&gt;IFs&lt;/em&gt; son condicionales; también lo son los &amp;ldquo;&lt;em&gt;FOR&lt;/em&gt;&amp;rdquo; y &amp;ldquo;&lt;em&gt;WHILE&lt;/em&gt;&amp;rdquo;, que incluyen una condición para el bucle. Todos ellos entran dentro de la misma categoría: condicionales.&lt;/p&gt;
&lt;h2 id=&#34;soluciones&#34;&gt;Soluciones&lt;/h2&gt;
&lt;p&gt;Así que puede que no esté tan mal evitar los condicionales, después de todo. Pero&amp;hellip; ¿cómo lo hacemos?&lt;/p&gt;
&lt;p&gt;Siguiendo una técnica de &lt;em&gt;divide y vencerás&lt;/em&gt;. Resulta más sencillo de lo que parece, y el código resultará mucho más expresivo.&lt;/p&gt;
&lt;h3 id=&#34;aislando&#34;&gt;Aislando&lt;/h3&gt;
&lt;p&gt;La primera acción será mandar nuestro código a una función propia. Así que, a partir de ahora, puedo asumir que no hay código ni antes ni después de nuestro bloque.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;funcion&lt;/span&gt;():
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; condicion1:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; condicion2:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;      accion1
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; condicion3:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;      accion3
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9&lt;/span&gt;      accion4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;evitando-elses&#34;&gt;Evitando &amp;ldquo;ELSEs&amp;rdquo;&lt;/h3&gt;
&lt;p&gt;Una vez aislado, evitaremos los &lt;em&gt;ELSE&lt;/em&gt;. La mejor manera es abandonar la función cuando ya no nos interesa nada más:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;funcion1&lt;/span&gt;():
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; condicion1:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; condicion2:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;      accion1
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; condicion3:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;    accion3
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;  accion4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Solo con esta acción habremos mejorado la legibilidad de nuestro código.&lt;/p&gt;
&lt;h3 id=&#34;buscando-contratos&#34;&gt;Buscando contratos&lt;/h3&gt;
&lt;p&gt;En muchas ocasiones hay condiciones que hacen que nuestra función no haga nada. En esos casos, decimos que &amp;ldquo;no se cumple el contrato&amp;rdquo;. Lo mejor es dejar claros esos casos al comienzo de las funciones:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;funcion1&lt;/span&gt;():
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; condicion1 &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; condicion2:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; condicion1 &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; condicion2:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;    accion1
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; condicion3:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;    accion3
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;  accion4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Vemos en este caso que, además, hemos podido reducir una de las condiciones, ya que el otro caso no puede darse.&lt;/p&gt;
&lt;h3 id=&#34;simplificar-condiciones&#34;&gt;Simplificar condiciones&lt;/h3&gt;
&lt;p&gt;Pero eso ha implicado crear condiciones más complejas. Podemos evitarlas creando funciones:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;funcion1&lt;/span&gt;():
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; shouldExit():
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; shouldApplyAction1():
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;    accion1
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; condicion3:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;    accion3
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;  accion4
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shouldExit&lt;/span&gt;():
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; condicion1 &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; condicion2
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shouldApplyAction1&lt;/span&gt;():
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; condicion1 &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; condicion2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Si los nombres de las funciones están bien elegidos, habremos eliminado también algunos comentarios. Resulta interesante evitar que las funciones que sólo comprueban la condición contentan el nombre de la condición en su propio nombre. Ah, y es indispensable &lt;strong&gt;evitar&lt;/strong&gt; por todos los medios, los &amp;ldquo;AND&amp;rdquo; en los nombres de las funciones. Parece una tontería, pero a veces éste es el paso más difícil.&lt;/p&gt;
&lt;h2 id=&#34;ejemplo&#34;&gt;Ejemplo&lt;/h2&gt;
&lt;p&gt;Veamos un ejemplo: FizzBuzz. Es un ejemplo tremendamente sencillo que se puede implementar en menos de 100 caracteres, pero vamos a intentar que quede algo legible. Consiste en imprimir números, pero sustituiremos los múltiplos de 3 por &amp;ldquo;FIZZ&amp;rdquo;, los de 5 por &amp;ldquo;BUZZ&amp;rdquo; y los de ambos por &amp;ldquo;FIZZBUZZ&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fizzbuzz&lt;/span&gt;(n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; xrange(n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;FIZZBUZZ&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;FIZZ&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; (i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BUZZ&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;No se ven, pero tenemos 3 condiciones anidadas, así que dividimos funciones:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fizzbuzz&lt;/span&gt;(n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; xrange(n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;    printNumber(i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;printNumber&lt;/span&gt;(n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;FIZZBUZZ&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;FIZZ&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BUZZ&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Como veis, esta simple acción me ha permitido reducir todos los &amp;ldquo;i+1&amp;rdquo; que tenía. Eliminemos los ELSEs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fizzbuzz&lt;/span&gt;(n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; xrange(n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;    printNumber(i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;printNumber&lt;/span&gt;(n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;FIZZBUZZ&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;FIZZ&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BUZZ&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Esto ya va pareciendo otra cosa&amp;hellip; Pero tengo demasiados &amp;ldquo;&lt;em&gt;prints&lt;/em&gt;&amp;rdquo;. Como véis, el proceso no es automático o no lo contaría: haría un script. Así que voy a redicir un poco todo ese mejunje:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fizzbuzz&lt;/span&gt;(n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; xrange(n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; solveNumber(i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;solveNumber&lt;/span&gt;(n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;FIZZBUZZ&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;FIZZ&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BUZZ&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Busco contratos:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fizzbuzz&lt;/span&gt;(n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; xrange(n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; solveNumber(i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;solveNumber&lt;/span&gt;(n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;FIZZBUZZ&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;FIZZ&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BUZZ&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y ahora voy a quitarme las condiciones del medio. Acordaos de que no puedo utilizar &lt;em&gt;AND&lt;/em&gt; y que no puedo usar cosas como &amp;ldquo;isMultiploOf5&amp;rdquo;, ya que incluiría la condición en el nombre de mi función. Es mucho mejor &lt;em&gt;usar la acción que voy a aplicar&lt;/em&gt; para describir la función:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fizzbuzz&lt;/span&gt;(n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; xrange(n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; solveNumber(i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;solveNumber&lt;/span&gt;(n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isFizzBuzz(n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;FIZZBUZZ&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isFizz(n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;FIZZ&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isBuzz(n) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BUZZ&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; n
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isFizzBuzz&lt;/span&gt;(n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isFizz&lt;/span&gt;(n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isBuzz&lt;/span&gt;(n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y, como véis, el código resultante es mucho más sencillo y no necesito comentar nada, porque queda perfectamente explicado.&lt;/p&gt;
&lt;p&gt;Comparadlo con el código inicial:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fizzbuzz&lt;/span&gt;(n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; xrange(n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;FIZZBUZZ&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;FIZZ&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; (i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BUZZ&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ventajas&#34;&gt;Ventajas&lt;/h2&gt;
&lt;p&gt;A parte de la más obvia, que es la estética, podemos ver otra serie de ventajas.&lt;/p&gt;
&lt;p&gt;Como he podido reducirlo tanto, al realizar las pruebas puedo probar cada función por separado y, después probar la función principal. Resultará mucho más fiable, y me será más sencillo identificar los posibles caminos.&lt;/p&gt;
&lt;p&gt;Además, con un poco de suerte encuentro código que puedo reutilizar. En el mejunje inicial, hacer esto no era difícil: &lt;em&gt;era imposible&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;reflexiones&#34;&gt;Reflexiones&lt;/h2&gt;
&lt;p&gt;Hay quien puede criticarme diciendo que no merece la pena dedicar tanto tiempo a un programa que ya funcionaba. Y tienen razón. A medias.&lt;/p&gt;
&lt;p&gt;Claro, hay quien dirá que soy un fanático del &lt;em&gt;agilismo&lt;/em&gt; y que presto demasiada atención al código. &amp;ldquo;El código no es lo importante, sino la arquitectura&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Tan solo veamos lo que ocurriría en un entorno real, en el que el cliente se replantea las cosas a medida que el desarrollador va programando. Suponeros que, en este punto, el cliente dice que quiere que los múltiplos de 7 se reemplacen por &amp;ldquo;TOZZ&amp;rdquo;, los de 3 y 7 por &amp;ldquo;FIZZTOZZ&amp;rdquo;, los de 5 y 7 por &amp;ldquo;BUZZTOZZ&amp;rdquo; y los de 3, 5 y 7 por &amp;ldquo;FIZZBUZZTOZZ&amp;rdquo;. ¿Cómo os sentiríais si tenéis que modificar cada uno de los códigos?&lt;/p&gt;
&lt;p&gt;Este supuesto no me lo he sacado de la manga. Es la razón de fracaso de la mayor parte de los proyectos software.&lt;/p&gt;
&lt;p&gt;El ejemplo sirve también para demostrar por qué &lt;em&gt;hay que hacer pruebas&lt;/em&gt;. Todo lo expuesto en este artículo es &lt;em&gt;irrealizable&lt;/em&gt; sin una batería de pruebas. Si no, ¿quién me asegura que, ante una modificación sencilla, el código sigue comportándose de la misma manera? Fijáos en el nuevo entorno, en el que el cliente ha solicitado el &amp;ldquo;TOZZ&amp;rdquo;. ¿Quién me asegura que el algoritmo inicial sigue funcionando? Pues &lt;em&gt;únicamente mis tests&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Y hay quien puede criticarme diciendo que hay soluciones mejores. Y tienen razón. No sé quién dijo que &amp;ldquo;todo es posible con tiempo infinito y recursos ilimitados&amp;rdquo;. En el punto en el que lo he dejado considero que es suficientemente aceptable como para poder parar.&lt;/p&gt;
&lt;p&gt;Y también hay quien puede decirme que, después de todo, sigo usando condicionales. Sí, elegí mal el título del artículo :D pero la intención de deshacerme de estos condicionales es la que me ha llevado a dejar el código más limpio.&lt;/p&gt;
&lt;h2 id=&#34;quiero-más&#34;&gt;¡Quiero más!&lt;/h2&gt;
&lt;p&gt;Llegar hasta aquí ya es un éxito. Ahí arriba había mucho código y entiendo que puede resultar difícil de seguir. Si lo has conseguido, ¡enhorabuena!&lt;/p&gt;
&lt;p&gt;Si te has quedado diciendo: &amp;ldquo;Joder, cómo mola. ¡Quiero más!&amp;rdquo;, debo decir que no tengo ningún mérito. Todo está en el &lt;a href=&#34;https://www.amazon.es/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&#34;&gt;Clean Code&lt;/a&gt; , de &lt;a href=&#34;https://cleancoder.posterous.com/&#34;&gt;Robert C. Martin&lt;/a&gt;  (AKA &lt;a href=&#34;https://twitter.com/#!/unclebobmartin&#34;&gt;@unclebobmartin&lt;/a&gt;  o en el &lt;a href=&#34;https://www.dirigidoportests.com/el-libro&#34;&gt;&amp;lsquo;Diseño Ágil con TDD&amp;rsquo;&lt;/a&gt; , de &lt;a href=&#34;https://www.carlosble.com/&#34;&gt;Carlos Blé&lt;/a&gt;  (AKA &lt;a href=&#34;https://twitter.com/#!/carlosble&#34;&gt;@carlosble&lt;/a&gt; ). Te recomiendo que comiences por ahí y continúes por sus propias bibliografías.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>No lo llames &#39;util&#39;, llámalo &#39;helper</title>
      <link>https://magmax.org/blog/no-lo-llames-helper/</link>
      <pubDate>Mon, 23 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/no-lo-llames-helper/</guid>
      <description>
        
          &lt;p&gt;Cuando estamos programando, es muy fácil encontrar situaciones en las que necesitamos una pequeña función que vamos a utilizar en muchas partes. Esta función no encaja en nungún sitio y encaja en todos, así que no sabemos muy bien dónde dejarla.&lt;/p&gt;
&lt;p&gt;Este tipo de situaciones suele terminar con un método estático en algún fichero con otras funciones similares, aunque no tengan mucho que ver entre ellas.&lt;/p&gt;
&lt;p&gt;Me gustaría analizar este tipo de situaciones.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/engineering.jpg&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;cuestión-de-nomenclatura&#34;&gt;Cuestión de nomenclatura&lt;/h2&gt;
&lt;p&gt;A menudo, encontrar nombres adecuados cuando estamos programando es una tarea más compleja de lo que parece. Dar un buen nombre es difícil. Un buen ejemplo de esto es ver a los padres tratando de encontrar un buen nombre para sus hijos; da igual que otros padres ya lo hayan hecho, ya que cada nombre &lt;em&gt;define&lt;/em&gt; a la persona. Y para complicarlo más, algunos nombres tienen &lt;em&gt;significados subjetivos&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;De la misma manera, cada función, cada método, cada variable, cada clase, necesita un nombre. Y estos nombres van a definir su esencia, su razón de existir, su motivo para cambiar, su todo.&lt;/p&gt;
&lt;p&gt;¿Cuál es el motivo para cambiar una función que se llama &amp;ldquo;helper&amp;rdquo;? ¿Hay que cambiarla cada vez que se necesite ayuda?&lt;/p&gt;
&lt;p&gt;Muchos programadores creen que no merece la pena dedicar tanto tiempo a encontrar un nombre a una variable. A menudo, utilizan excusas como que no van a dedicar 15 minutos para nombrar un iterador. Claro que no. La importancia de un nombre es directamente proporcionar a su tiempo de vida. Llamar a un iterador &amp;ldquo;&lt;em&gt;i&lt;/em&gt;&amp;rdquo; o &amp;ldquo;&lt;em&gt;j&lt;/em&gt;&amp;rdquo; es un estándar &lt;em&gt;de facto&lt;/em&gt;, y si no se va a usar más que como contador, es más que suficiente. Sin embargo, encontrarte un &amp;ldquo;@return i@&amp;rdquo; en un método es algo horrible que no aporta ningún tipo de información.&lt;/p&gt;
&lt;p&gt;De la misma manera no es lo mismo encontrar un nombre para un método privado que para uno público. Aun así, es importante que el nombre del método defina lo que hace éste, de la manera más eficiente posible.&lt;/p&gt;
&lt;h3 id=&#34;pura-perrería&#34;&gt;Pura perrería&lt;/h3&gt;
&lt;p&gt;En otras ocasiones, nos vence el desánimo y queremos quitarnos la cuestión del nombrado lo antes posible. En estos casos, decidimos meter la función en un &amp;ldquo;helper&amp;rdquo; o &amp;ldquo;util&amp;rdquo; y quitarnos el problema.&lt;/p&gt;
&lt;p&gt;Este tipo de actitudes están incurriendo en una &lt;em&gt;deuda técnica&lt;/em&gt; menor. Como todas las deudas, una pequeña puede hacerse muy grande poco a poco.&lt;/p&gt;
&lt;p&gt;Otras ocasiones no nos damos cuenta de lo importante que es el nombre para una variable, método o clase. O, como vamos apurados de tiempo, &lt;em&gt;decidimos&lt;/em&gt; que no tenemos tiempo para mejorar el nombre de la variable.&lt;/p&gt;
&lt;h2 id=&#34;nombres-prohibidos&#34;&gt;Nombres prohibidos&lt;/h2&gt;
&lt;p&gt;La mejor manera de evitar este tipo de situaciones es &lt;em&gt;prohibir&lt;/em&gt; ciertas palabras en los nombres de las funciones. La verdad es que se trata de un método personal y difícilmente automatizable, ya que los programadores buscar la &amp;ldquo;&lt;em&gt;programación clever&lt;/em&gt;&amp;rdquo;, encontrando huecos en todas las defensas. De esta manera, si prohibimos &lt;code&gt;manager&lt;/code&gt;, no tardarán en llamarlo &lt;code&gt;mgr&lt;/code&gt;, &lt;code&gt;Mgr&lt;/code&gt; o &lt;code&gt;controller&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Sin embargo, hay ciertos nombres que deberían estar prohibidos por redundantes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Manager&lt;/em&gt;, &lt;em&gt;Controller&lt;/em&gt;,&amp;hellip; Un método siempre controla o maneja algo. No tiene sentido usarlo en un nombre.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Util&lt;/em&gt;, &lt;em&gt;Helper&lt;/em&gt;,&amp;hellip; ¿Qué sentido tiene una función que no ayuda o no es útil?&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Tool&lt;/em&gt;,&amp;hellip; Una función es una herramienta, así que no es necesario enfatizarlo más.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hay otros nombres cuyo uso debería estar restringidos, como son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Factory&lt;/em&gt;: debería utilizarse sólo en métodos que fabrican objetos.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Toolbox&lt;/em&gt;: sólo en clases que mantienen grupos de singletons.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Controller&lt;/em&gt;: sólo en &lt;em&gt;paquetes&lt;/em&gt; (no métodos o clases) que contienen el Controlador de un MVC.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Wrapper&lt;/em&gt;: puede llevar a confusión si se usa en toda la herencia.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Y también hay nombres que advierten de problemas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;And&lt;/em&gt;, &lt;em&gt;Or&lt;/em&gt;: El método ya hace dos cosas. Seguramente se pueda dividir.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;muchos-más&#34;&gt;Muchos más&lt;/h2&gt;
&lt;p&gt;Hay muchos otros nombres que no deberían utilizarse cuando se crean funciones. Hoy estoy particularmente poco inspirado. Sin embargo, espero que esto genere en una discusión sobre nombres buenos y malos. ¡Para eso están los comentarios!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Agile ha muerto. ¡Viva post-agile!</title>
      <link>https://magmax.org/blog/post-agile/</link>
      <pubDate>Mon, 16 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/post-agile/</guid>
      <description>
        
          &lt;p&gt;El tema del agilismo en España está de moda ahora. En el resto del mundo ya lo llevan usando 10 años, pero aquí comenzamos ahora.&lt;/p&gt;
&lt;p&gt;Comienza a aparecer un nuevo término: &amp;ldquo;post-agile&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Y mi visión personal, claro.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/agile.png&#34;
         alt=&#34;Ciclo Agile&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;qué-es-post-agile&#34;&gt;¿Qué es post-agile?&lt;/h2&gt;
&lt;p&gt;Según &lt;a href=&#34;https://www.kohl.ca/2007/post-agilism-frequently-asked-questions/&#34;&gt;Jonathan Kohl&lt;/a&gt; , el post-agilismo es:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Un movimiento creciente de agilistas convencidos que ha superado los métodos Ágiles, usando gran variedad de herramientas de desarrollo y metodologías en su trabajo.
Una Era emergente. Ahora que el movimiento Ágil se ha establecido, ¿qué nos espera?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;El post-agilismo no tiene un manifiesto detrás. No hay un grupo organizado.&lt;/p&gt;
&lt;h2 id=&#34;qué-no-es-post-agile&#34;&gt;¿Qué NO es post-agile?&lt;/h2&gt;
&lt;p&gt;El post-agilismo no es un intento de destruir al agilismo, sino de darle una nueva vitalidad. No se trata de encontrar nuevas técnicas, metodologías, herramientas, etc., sino de &lt;em&gt;hacer lo que te funciona&lt;/em&gt;, es decir: si tienes una forma de trabajar que funciona, no la cambies por otra que promete ser mejor.&lt;/p&gt;
&lt;p&gt;El post-agilismo no ataca a TDD, no va a acabar con hacer pruebas, sistemas de integración contínua ni nada por el estilo. El post-agilismo no va contra Scrum, Kanban, Cascade,&amp;hellip; Si usas alguna de estas metodologías, te va bien, y quieres seguir con ella, entonces eres &amp;ldquo;post-ágil&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;cuidado&#34;&gt;Cuidado&amp;hellip;&lt;/h2&gt;
&lt;p&gt;Hay blogs por ahí en los que han leído el titular &amp;ldquo;post-agile&amp;rdquo; y se han puesto como locos a escribir cosas como que &amp;ldquo;post-agile&amp;rdquo; va contra &amp;ldquo;agile&amp;rdquo; y esas cosas&amp;hellip; Sed críticos con los blogs en este sentido.&lt;/p&gt;
&lt;h2 id=&#34;mi-opinión-personal&#34;&gt;Mi opinión personal&lt;/h2&gt;
&lt;h3 id=&#34;aclaraciones&#34;&gt;Aclaraciones&lt;/h3&gt;
&lt;p&gt;Llegado a este punto, me gustaría indicar dónde está el problema.&lt;/p&gt;
&lt;p&gt;El problema es que se ha asociado &amp;ldquo;Agile&amp;rdquo; con frameworks como Scrum y Kanban. Se han confundido estos frameworks como metodologías de trabajo. Se ha fanatizado el término de TDD y se ha asociado a Agile. Se ha monetizado el término scrum-máster.&lt;/p&gt;
&lt;p&gt;Se ha asociado a &amp;ldquo;Agile&amp;rdquo; la pasión por el código, olvidando al cliente y el producto. &lt;em&gt;Agile se entiende hoy como todo lo que no es Agile&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Así que el problema no es Agile, Post-Agile o cómo quieras llamarlo. El problema somos nosotros.&lt;/p&gt;
&lt;h3 id=&#34;qué-es-agile&#34;&gt;¿Qué es Agile?&lt;/h3&gt;
&lt;p&gt;No entiendo las confusiones, cuando las cosas están muy claras:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Agile es dar prioridad a las personas y sus relaciones frente a procesos y herramientas&lt;/em&gt;. Es comprobar que los miembros del equipo se encuentran cómodos trabajando, y no que siguen el proceso al dedillo y que usan Jira como campeones.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Agile es mostrar una demo, y no enseñarte un PPT&lt;/em&gt;. Es hacer cosas funcionales, lo antes posible.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Agile es diálogo, no engaño&lt;/em&gt;. Si tienes una duda, preguntas a tu cliente, no vas a comprobar lo que se firmó.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Agile es aceptar que los planes salen mal&lt;/em&gt;, y que es necesario saber reaccionar.&lt;/p&gt;
&lt;p&gt;Y no me estoy inventando nada: todo eso es la base del agilismo. Todo eso es el &lt;a href=&#34;https://agilemanifesto.org/iso/es/&#34;&gt;manifiesto ágil&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Para describir Agile, no necesito hablar de TDD, Scrum, Kanban, CI, Hudson, Jenkins, Git, Mercurial, ramas, Jira, Confluence, revisiones de código, patrones, control de incidencias, seguimiento, flexibilidad horaria, jerarquías,&amp;hellip; Porque nada de todo eso es Agile.&lt;/p&gt;
&lt;p&gt;Para mí, Agile es un intento por mejorar. &lt;em&gt;Agile es ofrecer un trabajo de calidad, que satisfaga al cliente, sin exigirme sobreesfuerzos constantes&lt;/em&gt;. Nada más. Y nada menos.&lt;/p&gt;
&lt;p&gt;No importa la técnica que uses: he visto a gente usar mejor un Excel que a otros sus maravillosas herramientas ágiles. Pero es que &amp;ldquo;Agile&amp;rdquo; no es una herramienta: es una forma de pensar.&lt;/p&gt;
&lt;p&gt;Cuando tratas de atar una filosofía a un estándar ISO, lo deformas, lo maltratas, lo perviertes. Cuando lo atas, ya sea herramientas o metodologías, lo matas.&lt;/p&gt;
&lt;h3 id=&#34;cambiando-términos&#34;&gt;Cambiando términos&lt;/h3&gt;
&lt;p&gt;Eso es lo que creo. Claro, que puedo estar equivocado. Si tú me dices que eso no es Agile, sino que es &amp;ldquo;Post-Agile&amp;rdquo;, pues vale. Entonces quiero ser &amp;ldquo;Post-agilista&amp;rdquo;. Si dices que se llama &amp;ldquo;Falifancito Verde&amp;rdquo;, pues estupendo también. Y es que me da igual el término: me quedo con lo que significa.&lt;/p&gt;
&lt;p&gt;Todo el tema del &amp;ldquo;post-agilismo&amp;rdquo; me suena a un &amp;ldquo;ya hemos deformado el término agile, así que pongo otro término para defender lo que era Agile&amp;rdquo;. Es más fácil que luchar por devolverle su verdadero significado.&lt;/p&gt;
&lt;p&gt;Ya existía otra rama: &lt;a href=&#34;https://manifesto.softwarecraftsmanship.org/&#34;&gt;la artesanía de software&lt;/a&gt; , que pretende llegar más lejos del agilismo. Yo nunca me he definido como artesano de software, ya que creo que no es necesario nada más; con el &lt;a href=&#34;https://agilemanifesto.org/&#34;&gt;agile-manifesto&lt;/a&gt;  es más que suficiente.&lt;/p&gt;
&lt;p&gt;Así que, por favor, llamadlo como queráis. A mí dejadme llamarlo &amp;ldquo;agile&amp;rdquo;. Pero no me importa el nombre: &lt;em&gt;yo lo llamo tratar de hacer mi trabajo mejor cada día&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Y dejad de pelearos por los términos y poneos a trabajar por hacer las cosas bien hechas.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Estadística</title>
      <link>https://magmax.org/blog/estadistica/</link>
      <pubDate>Sat, 31 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/estadistica/</guid>
      <description>
        
          &lt;p&gt;Nunca me ha gustado la estadística. Bueno, vale: esas gráficas llenas de líneas que no sabes qué significan siempre me han resultado hipnóticas.&lt;/p&gt;
&lt;p&gt;Sin embargo, últimamente me han enseñado la importancia de la estadística en la informática, y me gustaría compartirlo con vosotros.&lt;/p&gt;
&lt;p&gt;Resumiéndolo mucho: la estadística puede ser la diferencia entre el éxito y el fracaso.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/maths.jpg&#34;
         alt=&#34;Las matemáticas están en todas partes&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;para-qué&#34;&gt;Para qué&lt;/h2&gt;
&lt;p&gt;La primera pregunta que surge en la mente de cualquiera es: &lt;em&gt;¿y para qué quiero yo usar la estadística?&lt;/em&gt; Y se me ocurren distintas respuestas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Para comprobar el &lt;em&gt;progreso&lt;/em&gt; del proyecto.&lt;/li&gt;
&lt;li&gt;Para &lt;em&gt;evaluar&lt;/em&gt; las implicaciones de los últimos cambios&lt;/li&gt;
&lt;li&gt;Para &lt;em&gt;planificar&lt;/em&gt; los pasos siguientes&lt;/li&gt;
&lt;li&gt;Para &lt;em&gt;identificar&lt;/em&gt; posibles problemas con antelación.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cómo&#34;&gt;Cómo&lt;/h2&gt;
&lt;p&gt;Pues de la manera más sencilla: primero se recogen los datos y luego se analizan. En la recogida de datos suele ser importante guardar la fecha (algo que siempre olvido :D). En el análisis&amp;hellip; pues depende de lo que estéis analizando.&lt;/p&gt;
&lt;h2 id=&#34;qué&#34;&gt;Qué&lt;/h2&gt;
&lt;p&gt;Pues todo.&lt;/p&gt;
&lt;p&gt;O eso es lo ideal. Claro, que no es posible :D Pero sí es posible llegar a cosas como tiempos de ejecución, tiempos de pruebas, tiempos de inicialización,&amp;hellip; Este tipo de cosas son importantes, ya que pueden mostrarnos que lo que que hoy es asumible, en un año es inviable.&lt;/p&gt;
&lt;h2 id=&#34;entre-el-éxito-y-el-fracaso&#34;&gt;Entre el éxito y el fracaso&lt;/h2&gt;
&lt;p&gt;Veámoslo con un ejemplo. Por un lado tendremos la empresa &lt;em&gt;&amp;ldquo;Perdedores S.A.&amp;quot;&lt;/em&gt;, que no realiza ningún tipo de estadística. Y por otro, la empresa &lt;em&gt;&amp;ldquo;Ganadores S.A.&amp;quot;&lt;/em&gt;, que trata de hacerlo lo mejor que saben.&lt;/p&gt;
&lt;p&gt;Ambas empresas comienzan a la vez, se conocen y se dedican a lo mismo.&lt;/p&gt;
&lt;p&gt;Pasado un mes, los &lt;em&gt;Ganadores&lt;/em&gt; deciden comenzar a guardar los tiempos de ejecución y pruebas.&lt;/p&gt;
&lt;p&gt;A los dos meses, los &lt;em&gt;Ganadores&lt;/em&gt; se dan cuenta de que su aplicación es cada día más lenta. Deciden prestar atención a ese punto y mejorar la velocidad.&lt;/p&gt;
&lt;p&gt;A los tres meses, los &lt;em&gt;Ganadores&lt;/em&gt; se dan cuenta de que las pruebas llevan demasiado tiempo. Dedican parte de su tiempo a optimizar este paso de su proceso.&lt;/p&gt;
&lt;p&gt;A los cuatro meses, los &lt;em&gt;Ganadores&lt;/em&gt; descubren que la aplicación está teniendo más errores cada día. Deciden pararse, arreglar los más importantes, y continuar después. La mayor parte de estos problemas eran de diseño o de arquitectura (lo que ya daban por terminado).&lt;/p&gt;
&lt;p&gt;Como los &lt;em&gt;Ganadores&lt;/em&gt; están perdiendo el tiempo revisando sus estadísticas, los &lt;em&gt;Perdedores&lt;/em&gt; avanzan más deprisa.&lt;/p&gt;
&lt;p&gt;A los cinco meses, los &lt;em&gt;Ganadores&lt;/em&gt; llevan el mismo ritmo que los &lt;em&gt;Perdedores&lt;/em&gt;. Estos últimos no se lo pueden explicar, ya que los &lt;em&gt;Ganadores&lt;/em&gt; se pasan el día mirando gráficas en lugar de programar.&lt;/p&gt;
&lt;p&gt;Llega el momento de la entrega: Los &lt;em&gt;Perdedores&lt;/em&gt; tienen un proyecto estupendo. Sus programadores dejaron de hacer pruebas hace meses, ya que la ejecución de éstas requería demasiado tiempo y no podían permitírselo. Saben que tienen muchos errores, pero ya los irán arreglando cuando el cliente los descubra. Los &lt;em&gt;Ganadores&lt;/em&gt;, por su parte, no han sufrido problemas con sus pruebas, ya que los corrigieron a tiempo, y están seguros de que disponen de efectivos suficientes para abordar los problemas que puedan surgir.&lt;/p&gt;
&lt;p&gt;El cliente ejecuta ambos y&amp;hellip; Los &lt;em&gt;Ganadores&lt;/em&gt; tienen una aplicación mucho más rápida. Gracias a sus estadísticas, descubrieron los problemas de rendimiento y los corrigieron en cuanto aparecieron. Además, es una aplicación más fiable, ya que corrigieron a tiempo su cantida de errores.&lt;/p&gt;
&lt;h3 id=&#34;y-hay-más&#34;&gt;Y hay más&lt;/h3&gt;
&lt;p&gt;Gracias a estas gráficas, los &lt;em&gt;Ganadores&lt;/em&gt; deciden establecer los valores que quieren dentro de un año. Y cada mes revisan si se van a a cercar a estos valores. Es decir: las gráficas les siven como &lt;em&gt;objetivos de proyecto&lt;/em&gt;. Es un valor mesurable, claro y evidente de la &lt;em&gt;evolución&lt;/em&gt; del proyecto.&lt;/p&gt;
&lt;h2 id=&#34;difícil&#34;&gt;Difícil&lt;/h2&gt;
&lt;p&gt;Aunque aquí lo he contado todo muy bonito, debo admitir que estos temas de estadísticas son muy difíciles. Es difícil decidir qué datos hay que guardar, es difícil implementarlo y es aún más difícil saber interpretarlos correctamente.&lt;/p&gt;
&lt;p&gt;Sin embargo, ésta es una herramienta de la que no debemos olvidarnos cuando abordamos proyectos de gran embergadura.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Sistemas de Control de Versiones (Subversion y Mercurial)</title>
      <link>https://magmax.org/blog/mercurial-subversion/</link>
      <pubDate>Mon, 30 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/mercurial-subversion/</guid>
      <description>
        
          &lt;p&gt;En esta ocasión vamos a ver qué es un Sistema de Control de Versiones y cómo se utiliza.&lt;/p&gt;
&lt;p&gt;Voy a dividir la entrada en 4 partes bien diferenciadas. Primero una breve introducción, explicando qué son y qué tipos hay. A continuación, una descripción del uso de VCS, seguida por una descripción de DVCS. Finalmente, una entrada avanzada de cómo utilizar DVCS. Si ya eres un usuario de DVCS, a lo mejor te interesa saltarte las dos primeras partes.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/hgvssvn.jpg&#34;
         alt=&#34;Mercurial y Subversion&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;introducción&#34;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Un &lt;em&gt;Sistema de Control de Versiones&lt;/em&gt; (SCV o, en inglés, VCS o &amp;ldquo;Version Control System&amp;rdquo;) tiene una estructura similar a un sistema de archivos. La diferencia está en que se puede acceder a distintas versiones de los archivos y operar con estas versiones. Es decir: &lt;em&gt;Es un sistema de ficheros con versionado&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Hay distintos tipos. Los más sencillos son los sistemas locales, útiles para un único usuario. En la era de la nube, no tiene sentido en pensar en sistemas de este tipo y ya no se mantiene ninguno de éstos. Hace tiempo trabajé con PVCS y era un verdadero infierno (una persona estaba encargada del PVCS y era la única que accedía al mismo). Los ignoraremos.&lt;/p&gt;
&lt;p&gt;Un poco más complejos son los denominados VCS (&amp;ldquo;Version Control System&amp;rdquo;). Éstos diferencian entre el sistema central y la copia local (&lt;em&gt;working copy&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Los más utilizados actualmente son los DVCS (&amp;quot;&lt;em&gt;Distributed Version Control System&lt;/em&gt;&amp;quot;), en los que puede haber más de una copia remota y éstas se pueden sincronizar entre ellas.&lt;/p&gt;
&lt;p&gt;Echémosle un vistazo rápido a todos ellos.&lt;/p&gt;
&lt;h2 id=&#34;vcs&#34;&gt;VCS&lt;/h2&gt;
&lt;p&gt;Aunque las empresas están abandonándolos, aún siguen siendo muy utilizados.&lt;/p&gt;
&lt;p&gt;El sistema consiste, básicamente, en una copia local y un servidor remoto. Las modificaciones se realizan sobre la copia local y luego se envían al servidor. Cada máquina que tiene una copia local se sincroniza bajo demanda con el servidor remoto.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://subversion.tigris.org/&#34;&gt;Subversion&lt;/a&gt; , &lt;a href=&#34;https://cvs.nongnu.org/&#34;&gt;CVS&lt;/a&gt; , &amp;hellip; Han sido los más utilizados. Vamos a ver un poquito de &lt;em&gt;Subversion&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;init&lt;/em&gt;: permite inicializar un repositorio.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;checkout&lt;/em&gt;: descarga un repositorio remoto en una carpeta local (&lt;em&gt;working copy&lt;/em&gt;), desde la que podemos manipular los archivos.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;update&lt;/em&gt;: comprueba si hay actualizaciones en el servidor y se las descarga a la copia local. Si hay conflictos (hemos tocado un archivo que alguien ya ha modificado en el servidor), tratará de resolverlos. Si no puede, dejará los archivos marcados como &amp;ldquo;conflicto&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;add&lt;/em&gt;: mientras que no hagamos &lt;em&gt;add&lt;/em&gt; a un archivo, éste será ignorado.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;commit&lt;/em&gt;: crea una nueva versión, enviando al servidor las modificaciones desde la última vez que se utilizó esta orden.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;remove&lt;/em&gt;: el archivo deja de estar gestionado. Hay que tener en cuenta que las versiones que subimos con el archivo seguirán estando ahí, pero a partir de ese momento, las nuevas versiones no lo mostrarán.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;diff&lt;/em&gt;: permite ver las diferencias existentes entre las distintas versiones de un mismo fichero.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;log&lt;/em&gt;: muestra los cambios ocurridos en el repositorio.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El uso típico de este tipo de repositorios es:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;El administrador crea el repositorio (&lt;em&gt;init&lt;/em&gt;) y publica la dirección en la que se encuentra (https, ssh, &amp;hellip;).&lt;/li&gt;
&lt;li&gt;El usuario se descarga el repositorio a su copia local (&lt;em&gt;checkout&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;El usuario comienza un ciclo de iteraciones sucesivas de las órdenes siguientes, aunque usará el resto de forma ocasional:
&lt;ol&gt;
&lt;li&gt;Modificar el código&lt;/li&gt;
&lt;li&gt;Subir cambios (&lt;em&gt;commit&lt;/em&gt;). En este punto se realiza un &lt;em&gt;update&lt;/em&gt; automático y, si hay conflictos, se exige su resolución antes de permitir el &lt;em&gt;commit&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Los sistemas de este tipo tienen un problema: si no hay conexión, no se puede hacer nada con el repositorio, ya que la mayor parte de la lógica está en el servidor.&lt;/p&gt;
&lt;h2 id=&#34;dvcs&#34;&gt;DVCS&lt;/h2&gt;
&lt;p&gt;En este caso entra en juego un componente más: un servidor local. Este servidor local puede ser una copia local del servidor remoto. Esta característica permite trabajar con el servidor aunque no exista conexión a la red. Cuando se desee, se puede sincronizar el servidor local con el servidor remoto.&lt;/p&gt;
&lt;p&gt;La manera de trabajar con el servidor local es muy similar a la utilizada por los &lt;em&gt;VCS&lt;/em&gt;, aunque pueden cambiar los nombres de las órdenes. Por ejemplo, la orden &amp;ldquo;&lt;em&gt;clone&lt;/em&gt;&amp;rdquo; de &lt;em&gt;Mercurial&lt;/em&gt; equivaldría al &amp;ldquo;&lt;em&gt;checkout&lt;/em&gt;&amp;rdquo; de subversion.&lt;/p&gt;
&lt;p&gt;Evidentemente, hay una serie de instrucciones adicionales que nos permiten trabajar con el servidor remoto. Dado que esto no es un tutorial de &lt;em&gt;mercurial&lt;/em&gt;, obviaré estas órdenes comunes y me centraré en las nuevas operaciones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;pull&lt;/em&gt;: permite traerse los cambios del repositorio remoto al repositorio local.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;push&lt;/em&gt;: Envía los cambios del repositorio local (ojo, no la copia de trabajo) al repositorio remoto.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;branch&lt;/em&gt;: Permite crear ramas nuevas. De esto hablaremos en el siguiente punto.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;branches&lt;/em&gt;: Muestra la lista de ramas existentes.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;merge&lt;/em&gt;: Mezcla dos colas.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;out&lt;/em&gt;: Muestra la lista de &lt;em&gt;changesets&lt;/em&gt; (commits) que están en el servidor local pero no en el servidor remoto.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No hay un ciclo habitual con los DVCS. Sin embargo, podríamos poner como &amp;ldquo;ciclo sencillo&amp;rdquo; la intercalación entre:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pull&lt;/li&gt;
&lt;li&gt;Ciclos de tipo VCS&lt;/li&gt;
&lt;li&gt;push&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Algunos ejemplos de DVCS son &lt;a href=&#34;https://mercurial.selenic.com/&#34;&gt;Mercurial&lt;/a&gt; , &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; , &lt;a href=&#34;https://bazaar.canonical.com/en/&#34;&gt;Bazaar&lt;/a&gt; , &lt;a href=&#34;https://veracity-scm.com/&#34;&gt;Veracity&lt;/a&gt;  o
&lt;a href=&#34;https://www.plasticscm.com/&#34;&gt;Plastic SCM&lt;/a&gt; .&lt;/p&gt;
&lt;h2 id=&#34;dvcs-avanzado&#34;&gt;DVCS Avanzado&lt;/h2&gt;
&lt;p&gt;Vamos a ver aquí tres niveles. El primero se tratará del manejo de ramas (&amp;ldquo;branches&amp;rdquo;); el segundo, de &lt;em&gt;hooks&lt;/em&gt; y el tercer, del manejo de repositorios remotos.&lt;/p&gt;
&lt;h3 id=&#34;branches&#34;&gt;Branches&lt;/h3&gt;
&lt;p&gt;El manejo de ramas permite realizar un trabajo paralelo sin afectar a la rama principal. Las ramas principales suelen llamarse algo como &amp;ldquo;&lt;em&gt;trunk&lt;/em&gt;&amp;rdquo;, &amp;ldquo;&lt;em&gt;default&lt;/em&gt;&amp;rdquo;, &amp;hellip; y suelen ser las más importantes.&lt;/p&gt;
&lt;p&gt;Existe una corriente que defiende el &amp;ldquo;&lt;em&gt;Un cambio, una rama&lt;/em&gt;&amp;rdquo;, de manera que antes de comenzar a hacer cambios, debes crearte una rama y, posteriormente, mezclar con la rama principal. Este planteamiento permite pasar varios días trabajando en la rama sin afectar al trabajo de los demás. No es necesario esperar al último momento para aplicar todos los cambios, ya que se puede mezclar una rama con la rama principal en cualquier momento, facilitando así el poder actualizarse o reduciendo los posibles conflictos.&lt;/p&gt;
&lt;p&gt;Existe también la posibilidad de crear ramas de ramas o de mezclarlas entre ellas, complicando así el grafo generado.&lt;/p&gt;
&lt;p&gt;Hay que tener en cuenta que, durante la mezcla de código, es posible que el algoritmo de mezclado falle, así que es buena idea combinar estas técnicas con robustas baterías de pruebas.&lt;/p&gt;
&lt;h3 id=&#34;hooks&#34;&gt;Hooks&lt;/h3&gt;
&lt;p&gt;Los repositorios pueden lanzar acciones automáticas cuando se producen ciertos eventos. Por ejemplo, podrían enviarnos un e-mail cuando una rama se mezcla con la rama principal, o comprobar que el código cumple ciertos criterios de calidad.&lt;/p&gt;
&lt;p&gt;Este tipo de técnicas pueden ser muy provechosas, aunque puede requerir tanto mantenimiento como para dedicar parte del personal a manejarlas.&lt;/p&gt;
&lt;h3 id=&#34;múltiples-repositorios&#34;&gt;Múltiples repositorios&lt;/h3&gt;
&lt;p&gt;Finalmente, llegamos a los múltiples repositorios. Existe la opción de tener repositorios remotos réplica. Esto significa que podemos sincronizar nuestros cambios contra una de estas réplicas y ésta se sincronizará tarde o temprano con otra de las réplicas.&lt;/p&gt;
&lt;p&gt;La sincronización entre repositorios puede ser manual o automática, y puede dar lugar a un &lt;em&gt;flujo de trabajo&lt;/em&gt; distinto según se necesite. Por ejemplo, puede utilizarse esta técnica para mantener repositorios remotos, de manera que se incremente la velocidad entre los &lt;em&gt;working copies&lt;/em&gt; y el servidor central o, lo que puede resultar más provechoso, definir unas calidades para cada uno de los repositorios.&lt;/p&gt;
&lt;p&gt;Veamos un ejemplo&amp;hellip; Podemos tener el repositorio de uso habitual, donde &amp;ldquo;cabe todo&amp;rdquo;, llamándole &amp;ldquo;&lt;em&gt;Development&lt;/em&gt;&amp;quot;; otro repositorio del que se realizan pruebas unitarias automáticas, llamado &amp;ldquo;&lt;em&gt;testing&lt;/em&gt;&amp;quot;; si las pruebas automáticas pasan, podríamos tener otro con las pruebas de integración &amp;ldquo;&lt;em&gt;integration&lt;/em&gt;&amp;quot;; si estas pasan, otro con las pruebas de calidad &amp;ldquo;&lt;em&gt;QA&lt;/em&gt;&amp;rdquo; y, si estas pasan, otro con el código definitivo &amp;ldquo;&lt;em&gt;Release&lt;/em&gt;&amp;rdquo;. Cuando hay una nueva rama en este repositorio, podríamos sincronizarlo con &amp;ldquo;&lt;em&gt;Development&lt;/em&gt;&amp;rdquo; y, así, cerramos el círculo.&lt;/p&gt;
&lt;p&gt;No he leído nada aún al respecto, pero supongo que a esto es a lo que hace referencia la &amp;ldquo;&lt;em&gt;Integración contínua&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Con el fin de no hacer crecer disparatadamente todos los repositorios, se pueden mezclar sólo ciertas ramas de un repositorio a otro, simplificando las mezclas y reduciendo la historia.&lt;/p&gt;
&lt;h2 id=&#34;conclusión&#34;&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;El uso de todas las técnicas avanzadas puede provocar flujos de trabajo muy diferentes, pero todos ellos útiles para el desarrollo de software. Cualquier empresa de más de 5 desarrolladores que trate de hacer software sin utilizar un VCS o un DVCS está destinada al fracaso; no podrá obtener una calidad competitiva ni unos plazos aceptables.&lt;/p&gt;
&lt;h2 id=&#34;más-información&#34;&gt;Más información&lt;/h2&gt;
&lt;p&gt;Hoy día es raro no haber oído hablar de los sistemas de control de versiones. De
todas maneras, os recomiendo apuntaros al blog de mis amigos de `Codice
Software]  donde, entre muchas cosas interesantes, explican más a fondo &lt;a href=&#34;https://www.plasticscm.com/infocenter/quick-start/task-cycle-in-plastic-scm.aspx&#34;&gt;un
flujo de trabajo&lt;/a&gt;  con su propia herramienta.&lt;/p&gt;
&lt;p&gt;En breve voy a comenzar la lectura de un libro que promete ser interesante,
&lt;a href=&#34;https://www.ericsink.com/&#34;&gt;Version Control by Example&lt;/a&gt;, propuesto por Eric Sink, que os podéis descargar
gratuítamente o, si tenéis suerte como yo, &lt;a href=&#34;https://www.ericsink.com/entries/vcbe_print_edition_free.html&#34;&gt;conseguirlo de forma gratuita en
papel&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;También os propongo echar un ojo a la &lt;a href=&#34;https://en.wikipedia.org/wiki/Revision_control&#34;&gt;Wikipedia&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Y, por si fuera poco, existe la posibilidad de utilizar algunos de ellos de
forma remota, utilizando &lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt; , &lt;a href=&#34;https://bitbucket.org/&#34;&gt;Bitbucket&lt;/a&gt; , &lt;a href=&#34;https://launchpad.net/&#34;&gt;Launchpad&lt;/a&gt; , &lt;a href=&#34;https://savannah.gnu.org/&#34;&gt;Savannah&lt;/a&gt; ,
&lt;a href=&#34;https://gna.org/&#34;&gt;Gna!&lt;/a&gt; , &amp;hellip; Para gustos, los -colores- sistemas de control de versiones :D&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Estático vs Dinámico</title>
      <link>https://magmax.org/blog/estatico-vs-dinamico/</link>
      <pubDate>Mon, 02 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/estatico-vs-dinamico/</guid>
      <description>
        
          &lt;p&gt;A menudo escribo tutoriales. Realmente, estos tutoriales son artículos de opinión: Alguien puede estar en desacuerdo conmigo. Siempre hay otra manera de hacer las cosas y es más que probable que yo no la conozca. En este caso va a ser más patente.&lt;/p&gt;
&lt;p&gt;En este caso vamos a ver las diferencias que hay entre hacer las cosas de manera estática y hacerlas dinámica. Y veremos también cómo hay más cosas estáticas de las que creemos.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/programming.jpg&#34;
         alt=&#34;En este caso, no importa el lenguaje&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Primero vamos a definir las cosas: algo es &lt;em&gt;estático&lt;/em&gt; cuando se impide su crecimiento. Algo es &lt;em&gt;dinámico&lt;/em&gt; si es permite el crecimiento sin grandes consecuencias para sus colaboradores.&lt;/p&gt;
&lt;p&gt;Es obvio pensar que un &lt;em&gt;tipo básico&lt;/em&gt; (números y cadenas) es &lt;em&gt;estático&lt;/em&gt;. Tenemos el valor de la variable y nada más. No existe la posibilidad de agregar nada a un tipo básico.&lt;/p&gt;
&lt;p&gt;Alguien puede decirme que en &lt;em&gt;Ruby&lt;/em&gt; sí se pueden añadir métodos a los &amp;ldquo;tipos básicos&amp;rdquo;. Por definición, si se pueden añadir métodos, no es un tipo básico. Es&amp;hellip; otra cosa.&lt;/p&gt;
&lt;p&gt;También es obvio que un &lt;em&gt;array&lt;/em&gt; es &lt;em&gt;estático&lt;/em&gt;, ya que su tamaño es constante y cambiarlo implica una gestión algo ineficiente de la memoria.&lt;/p&gt;
&lt;p&gt;Pero&amp;hellip; ¿Qué ocurre con los &lt;em&gt;vectores&lt;/em&gt;, &lt;em&gt;tablas hash&lt;/em&gt;, &lt;em&gt;sets&lt;/em&gt;, &amp;hellip;?&lt;/p&gt;
&lt;p&gt;Pues a primera vista son dinámicos, ya que permiten modificar su tamaño. Sin embargo, desde otro punto de vista, &lt;em&gt;son completamente estáticos&lt;/em&gt;, ya que es una solución genérica a un problema y no admite su especialización.&lt;/p&gt;
&lt;h2 id=&#34;consecuencias&#34;&gt;Consecuencias&lt;/h2&gt;
&lt;p&gt;Darse cuenta de esto tiene consecuencias. La primera y más obvia es descubrir que no deberíamos usar estos tipos de forma automática. Es mejor &lt;em&gt;encapsularlos&lt;/em&gt; en clases específicas que los utilicen. De esta manera sí podremos especializarlos, adaptándolos a cada problema.&lt;/p&gt;
&lt;p&gt;Pondremos un ejemplo: en uno de nuestros objetos necesitamos varias &lt;em&gt;tablas
hash&lt;/em&gt;. A primera vista, estas tablas son todas iguales. Pero si fueran iguales,
sería una sola tabla. Es decir: ya existe un elemento diferenciador. Sin
embargo, desde nuestra clase estamos manejando las tres. Esto es, claramente,
una violación del &lt;a href=&#34;https://en.wikipedia.org/wiki/Single_responsibility_principle*&#34;&gt;principio de única responsabilidad&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;¿Significa esto que tengo que pasar cada tabla a un objeto que la maneja? Sí, claramente.&lt;/p&gt;
&lt;p&gt;Esto tiene su utilidad. Supongamos que esas tres tablas evolucionan de forma diferente. Por ejemplo, su tamaño es diferente. De pronto, descubrimos que una de las tablas se ha vuelto terriblemente grande. En el caso de tener un único objeto con todas las hashes, tenemos un problema. Si hemos aislado su manejo, podemos cambiar la implementación de una tabla hash por el de una &lt;em&gt;caché&lt;/em&gt;, guardando a disco los elementos menos utilizados, o incluso cambiarlo por una base de datos.&lt;/p&gt;
&lt;p&gt;De esta manera, se demuestra que una lista o una tabla hash es &lt;em&gt;estática&lt;/em&gt;, ya que no admite cambios de implementación. No son objetos en sí mismos, sino que debemos considerarlos útiles cuando se encapsulan dentro de objetos que les aportan significado. Son herramientas, no objetos finales.&lt;/p&gt;
&lt;h3 id=&#34;sacrificios&#34;&gt;Sacrificios&lt;/h3&gt;
&lt;p&gt;A menudo sacrificamos la buena programación por terminar antes. Es lógico: programar bien lleva mucho tiempo. Sin embargo, hay que tratar de llegar a un compromiso entre el tiempo dedicado y la calidad del código. Eso es lo que diferencia a un programador de un profesional.&lt;/p&gt;
&lt;p&gt;Un programador resuelve el problema. Un profesional aporta la mejor solución que conoce en cada momento.&lt;/p&gt;
&lt;p&gt;Estos sacrificios pueden realizarse esporádicamente cuando los colaboradores de nuestra clase son otras clases privadas. Sin embargo, &lt;em&gt;compartir tipos básicos, una lista o una tabla hash por medio de una API puede ser el mayor de los errores&lt;/em&gt;, ya que estamos limitando su utilización. Probablemente sea siempre una mejor solución utilizar un objeto hecho a propósito.&lt;/p&gt;
&lt;p&gt;Un ejemplo de esto puede verse en la autenticación. Tenemos nuestra preciosa función &amp;ldquo;autenticate(String user, String password)&amp;rdquo;. Sin embargo, ahora resulta que queremos autenticar un &lt;em&gt;OpenId&lt;/em&gt;. Nuestra función no ofrece suficiente versatilidad. Sin embargo, si hubiéramos encapsulado los datos en un objeto, tendríamos: &amp;ldquo;autenticate(Credentials credentials)&amp;rdquo;, lo que sí es suficientemente versátil.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Scrum para Proyectos Fin de Carrera</title>
      <link>https://magmax.org/blog/scrum-pfc/</link>
      <pubDate>Fri, 28 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/scrum-pfc/</guid>
      <description>
        
          &lt;p&gt;El otro día, hablando con un compañero de trabajo, surgió la duda de si se puede aplicar &lt;a href=&#34;https://es.wikipedia.org/wiki/Scrum&#34;&gt;Scrum&lt;/a&gt;  en un proyecto con una única persona, como puede ocurrir en un Proyecto Fin de Carrera.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/melee.jpg&#34;/&gt; 
&lt;/figure&gt;

¿Se puede?&lt;/p&gt;
&lt;p&gt;No soy un experto en Scrum, pero voy a intentar determinar si es posible o no. Agradeceré vuestros comentarios al respecto.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/agile.png&#34;
         alt=&#34;Ciclo Agile&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;roles&#34;&gt;Roles&lt;/h2&gt;
&lt;p&gt;Scrum define una serie de roles, como son: Product Owner, Scrum Master o facilitador, Usuarios y Clientes, principalmente.&lt;/p&gt;
&lt;p&gt;En un entorno en el que el grupo consta de 1 persona tenemos muy difícil repartir 4 roles&amp;hellip; Bueno, podríamos incluir también a otras personas en la ecuación para que nos salgan un poco las cuentas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Product Owner&lt;/em&gt;: Podría ser el director del proyecto, ya que se encarga de controlar que el trabajo va en la dirección adecuada.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Scrum Máster o facilitador&lt;/em&gt;: Este rol podría dividirse entre el director del proyecto y el propio proyectando, aunque la mayor parte de los problemas tendrá que solucionarlos este último.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Usuarios&lt;/em&gt;: Técnicamente, el producto final de un proyecto fin de carrera es sólo la documentación, y el destino final es para el Tribunal. Podría considerarse que éstos son los usuarios de nuestro &amp;ldquo;sistema&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Clientes, proveedores, &amp;hellip;&lt;/em&gt;: Muy a mi pesar, nos hemos quedado sin gente que ocupe este puesto. ¿El director de proyecto, tal vez?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;actividades&#34;&gt;Actividades&lt;/h2&gt;
&lt;h3 id=&#34;scrum-diario&#34;&gt;Scrum diario&lt;/h3&gt;
&lt;p&gt;Es muy dificil que un director de proyecto esté dispuesto a realizar la reunión diaria. Los miembros del tribunal, probablemente, sean desconocidos hasta que el proyecto esté terminado. ¿Con quién puede el pobre proyectando reunirse entonces? Temo que esté solo ante el peligro.&lt;/p&gt;
&lt;p&gt;No hay asignaciones de trabajo: el proyectando se lo guisa y se lo come. Tan solo hay un seguimiento por parte del director, que se realizará, con mucha suerte, una vez a la semana.&lt;/p&gt;
&lt;p&gt;Nos hemos ganado un punto negativo.&lt;/p&gt;
&lt;h3 id=&#34;planificación-de-sprint&#34;&gt;Planificación de Sprint&lt;/h3&gt;
&lt;p&gt;Por suerte para nosotros, sí que existe la posibilidad de quedar con el Director con el fin de establecer qué tareas son las más urgentes y establecer los &lt;em&gt;Sprints&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Como sí podemos tener Sprints, podemos decir que nos anotamos un tanto.&lt;/p&gt;
&lt;h3 id=&#34;product-backlog&#34;&gt;Product Backlog&lt;/h3&gt;
&lt;p&gt;Pensándolo fríamente, el &lt;em&gt;Product Backlog&lt;/em&gt; no es más que una declaración de intenciones. Un &lt;strong&gt;ToDo List&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Está el problema de las estimaciones, pero podemos asumir que el proyectando es suficientemente capaz.&lt;/p&gt;
&lt;p&gt;Vamos a dejarlo en un empate, porque lo veo demasiado forzado.&lt;/p&gt;
&lt;h3 id=&#34;burndown&#34;&gt;Burndown&lt;/h3&gt;
&lt;p&gt;Aquí tenemos el gráfico de evolución de las tareas del &lt;em&gt;Product Backlog&lt;/em&gt;. Si te gusta pintar, es perfectamente viable.&lt;/p&gt;
&lt;p&gt;Esto no es ni fácil ni difícil: es trivial. Un &lt;em&gt;gallifante&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;retrospectiva&#34;&gt;Retrospectiva&lt;/h3&gt;
&lt;p&gt;Hace mucho tiempo me enseñaron que &amp;ldquo;&lt;em&gt;Lo que no se evalúa se devalúa&lt;/em&gt;&amp;rdquo;. Las técnicas ágiles siempre tienen una fase de evaluación, para mejorar en el futuro.&lt;/p&gt;
&lt;p&gt;Esto es de cajón, aunque sea tan difícil de conseguir.&lt;/p&gt;
&lt;h2 id=&#34;conclusiones&#34;&gt;Conclusiones&lt;/h2&gt;
&lt;p&gt;Mi primera impresión fue que no es posible realizar &lt;em&gt;Scrum&lt;/em&gt; una única persona, y así se lo he manifestado a dos personas que se han encontrado en esta situación.&lt;/p&gt;
&lt;p&gt;Tras realizar esta evaluación, mi conclusión es que &lt;em&gt;NO ES POSIBLE&lt;/em&gt; realizar &lt;em&gt;Scrum&lt;/em&gt; una única persona. Si sumamos los puntos, gana el sí, pero temo que esto no es una democracia. Es todo o nada. En cualquier caso, cualquier aproximación realizada será un &amp;ldquo;&lt;em&gt;aberra-scrum&lt;/em&gt;&amp;rdquo; (sí, sí, de &amp;ldquo;aberración&amp;rdquo;).&lt;/p&gt;
&lt;p&gt;Veo interesante aplicar ciertos valores de &lt;em&gt;Scrum&lt;/em&gt;, como son los &lt;em&gt;Sprints&lt;/em&gt;, el &lt;em&gt;Product Backlog&lt;/em&gt; y, si eres artista, el &lt;em&gt;Burndown&lt;/em&gt;. Estas cosas dan mucho juego luego en la documentación.&lt;/p&gt;
&lt;p&gt;Algo sí está claro: se trata de un equipo &amp;ldquo;autoorganizado&amp;rdquo;&amp;hellip; ¡¡ Qué remedio !!&lt;/p&gt;
&lt;h3 id=&#34;alternativas&#34;&gt;Alternativas&lt;/h3&gt;
&lt;p&gt;No me gusta ser negativo, así que veamos las opciones de que dispone un proyectando.&lt;/p&gt;
&lt;p&gt;En mi opinión, la mejor baza que puede jugar es utilizar la técnica &lt;a href=&#34;https://www.pomodorotechnique.com/&#34;&gt;Pomodoro&lt;/a&gt;. Explicada en dos palabras: Haces una lista con las cosas que quieres hacer (similar al &lt;em&gt;Product Backlog&lt;/em&gt;), seleccionas un conjunto de ellas y tratas de llevarlas a cabo durante el día. Para ello, eliges una, y te concentras con todas tus fuerzas en terminarla en 25 minutos. No debes distraerte con ninguna otra cosa. Si lo consigues, una tarea menos; si no, le pones un asterisco para contabilizar cuánto has tardado en hacer la tarea.&lt;/p&gt;
&lt;p&gt;Si eres muy artista, puedes dedicar un &lt;em&gt;Pomodoro&lt;/em&gt; (espacio de 25 minutos de total concentración) a pintar tus hazañas del día y obtener tu &lt;em&gt;Product Backlog&lt;/em&gt; :-).&lt;/p&gt;
&lt;h2 id=&#34;y-tú&#34;&gt;¿Y tú?&lt;/h2&gt;
&lt;p&gt;¿Cuál es tu opinión?&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Artesanía de Software: De qué va todo esto</title>
      <link>https://magmax.org/blog/artesania-software/</link>
      <pubDate>Sat, 13 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/artesania-software/</guid>
      <description>
        
          &lt;p&gt;Hace poco leí una entrada en el blog de &lt;a href=&#34;https://cleancoder.posterous.com/&#34;&gt;UncleBob Martin&lt;/a&gt;  que me pareció que definía estupendamente la situación actual del software.&lt;/p&gt;
&lt;p&gt;En la lista &lt;a href=&#34;https://groups.google.com/group/agile-spain&#34;&gt;Agile-Spain&lt;/a&gt; , &lt;a href=&#34;https://twitter.com/jmbeas&#34;&gt;@jmbeas&lt;/a&gt;  propuso una traducción.&lt;/p&gt;
&lt;p&gt;Como era corta, decidí practicar un poco y traducirla por mi cuenta. Se agradecerán comentarios sobre la traducción.&lt;/p&gt;
&lt;p&gt;Podéis visitar el original, titulado &lt;a href=&#34;https://cleancoder.posterous.com/software-craftsmanship-things-wars-commandmen&#34;&gt;Software Craftsmanship: What it&amp;rsquo;s all
about&lt;/a&gt; . Por &lt;a href=&#34;https://cleancoder.posterous.com/&#34;&gt;UncleBob Martin&lt;/a&gt; , por supuesto.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/poetry.jpg&#34;/&gt; 
&lt;/figure&gt;

&lt;hr&gt;
&lt;p&gt;He visitado los posts de &lt;a href=&#34;https://dannorth.net/2011/01/11/programming-is-not-a-craft/&#34;&gt;Dan North&lt;/a&gt; , los de &lt;a href=&#34;https://www.gilzilberfeld.com/2011/01/path-already-taken.html&#34;&gt;Gil Zilberfeld&lt;/a&gt; , los de &lt;a href=&#34;https://michaelfeathers.typepad.com/michael_feathers_blog/2011/01/the-thing-of-software-development.html&#34;&gt;Michael
Feather&lt;/a&gt; , los de &lt;a href=&#34;https://parlezuml.com/blog/?postid=992&#34;&gt;Jason Gorman&lt;/a&gt; . Daría la impresión de que nosotros, los del
movimiento del artesano de software, no hemos sido claros. Espero que este blog
aclare un par de cosas.&lt;/p&gt;
&lt;p&gt;¿Por qué existe el movimiento del artesano de software? ¿Qué lo ha motivado?
¿Qué lo impulsa ahora? &lt;em&gt;Una&lt;/em&gt; cosa; y &lt;em&gt;una única&lt;/em&gt; cosa.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Estamos hartos de escribir mierda.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Eso es. Cantó la gorda. Buenas noches, Gracy. Corto y cierro.&lt;/p&gt;
&lt;p&gt;Estamos hartos de escribir mierda. Estamos hartos de avergonzarnos a nosotros
mismos y a nuestros empleadores distribuyendo software de mala calidad. Ya hemos
pedido a nuestros clientes que reinicien los servidores a media noche demasiadas
veces. No queremos listas de errores de miles de páginas. No queremos código que
se hace más ininteligible y corrupto con el paso del tiempo. Estamos hartos de
hacer un trabajo malo. Queremos comenzar a hacer un trabajo bueno.&lt;/p&gt;
&lt;p&gt;Eso&amp;hellip; es&amp;hellip; de&amp;hellip; lo&amp;hellip; que&amp;hellip; va&amp;hellip; esto. Nada más.&lt;/p&gt;
&lt;p&gt;Lo que &lt;em&gt;no&lt;/em&gt; hacemos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No&lt;/em&gt; ponemos el código por encima de todo.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;No&lt;/em&gt; nos centramos en nosotros ignorando el negocio y al cliente.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;No&lt;/em&gt; nos miramos el ombligo.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;No&lt;/em&gt; ofrecemos certificaciones baratas.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;No&lt;/em&gt; olvidamos que nuestro trabajo consiste en deleitar al cliente.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lo que &lt;em&gt;no volveremos a hacer&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;No&lt;/em&gt; haremos chapuzas para cumplir una planificación.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;No&lt;/em&gt; aceptaremos la vieja y estúpida mentira de limpiar las cosas después.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;No&lt;/em&gt; creeremos el rezo de que rápido significa sucio.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;No&lt;/em&gt; aceptaremos la opción de hacerlo mal.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;No&lt;/em&gt; permitiremos a nadie que nos fuerce a comportarnos de forma no profesional.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lo que &lt;em&gt;haremos&lt;/em&gt; de ahora en adelante:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Cumpliremos&lt;/em&gt; las planificaciones teniendo en cuenta que la única manera de ir rápido es hacerlo bien.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Deleitaremos&lt;/em&gt; a nuestros clientes escribiendo el mejor código que podamos.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Honraremos&lt;/em&gt; a nuestros empleadores creando el mejor diseño que podamos.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Seremos&lt;/em&gt; suficientemente humildes como para escribir primero esos tests.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Practicaremos&lt;/em&gt; de manera que mejoremos en nuestra artesanía.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Recordaremos lo que nuestros abuelos y abuelas nos dijeron:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lo bien hecho bien parece.&lt;/li&gt;
&lt;li&gt;Paso a paso se llega lejos.&lt;/li&gt;
&lt;li&gt;Quien mide dos veces corta sólo una.&lt;/li&gt;
&lt;li&gt;Practica, Practica, Practica.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Supongo que algunos podrían desaprobar nuestros katas y retos de código, así como nuestras sesiones de práctica. Pueden pensarse que estamos centrándonos en nosotros e ignorando a nuestros clientes. Pueden pensar que hemos abandonado el mundo real y caído en la tentación de entretenernos. Puedo ver cómo alguien podría llegar a esta conclusión.&lt;/p&gt;
&lt;p&gt;Pero están tan equivocados como largo es el día. Hacemos esto porque nos preocupamos por el cliente. Estamos dedicando tiempo y esfuerzo a ser &lt;em&gt;tan buenos como podamos&lt;/em&gt; para que nuestros empleadores obtengan el máximo valor de nosotros.&lt;/p&gt;
&lt;p&gt;¿Creéis que el único momento en el que los músicos tocan sus instrumentos es cuando están en el escenario? ¿Creéis que el único momento en el que los bateadores golpean bolas es en el partido? ¿Creéis que el único momento en el que los abogados dan su conclusión es en un juicio? Claro que no. Esta gente son profesionales; y los &lt;em&gt;profesionales practican&lt;/em&gt;! Los profesionales estudian el más mínimo detalle de sus disciplinas. Los profesionales lo saben todo sobre los pequeños trucos y rarezas. Conocen las historias, las teorías, las anécdotas. Conocen técnicas y métodos. Conocen buenas y malas opciones y cómo distinguirlas. Y saben todo esto porque &lt;em&gt;practican&lt;/em&gt;, &lt;em&gt;practican&lt;/em&gt;, &lt;em&gt;practican&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Así que cuando veáis que alguien lleva una pulsera verde que dice &amp;ldquo;Código limpio&amp;rdquo; (&amp;ldquo;Clean Code&amp;rdquo;) o &amp;ldquo;La Prueba Primero&amp;rdquo; o &amp;ldquo;Prueba Adicto&amp;rdquo;, no es porque se hayan unido a un movimiento, o firmado un manifiesto, o que de alguna manera se sientan superiores a otros. No son los participantes de ninguna guerra santa. No intentan unirse a una tribu y juntarse alrededor de las hogueras. La pulsera verde es una cosa &lt;em&gt;personal&lt;/em&gt;. Es una promesa hecha para sí mismos: &amp;ldquo;Haré un buen trabajo. No correré. Escribiré pruebas. Lo haré rápido haciéndolo bien. &lt;em&gt;No escribiré mierda. Y practicaré, practicaré, practicaré&lt;/em&gt; de forma que pueda ser un profesional.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Original: &lt;a href=&#34;https://cleancoder.posterous.com/software-craftsmanship-things-wars-commandmen&#34;&gt;Software Craftsmanship: What it&#39;&amp;rsquo;s all about&lt;/a&gt; . By &lt;a href=&#34;https://cleancoder.posterous.com/&#34;&gt;Robert C. Martin&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Traducción: &lt;a href=&#34;https://magmax.org/blog/artesania-software/&#34;&gt;Artesanía de Software: De qué va todo esto&lt;/a&gt;, by &lt;a href=&#34;https://twitter.com/magmax_en&#34;&gt;@magmax_en&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Objetivo de cobertura de código: ¡el 80% y no menos!</title>
      <link>https://magmax.org/blog/cobertura-80/</link>
      <pubDate>Mon, 21 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/cobertura-80/</guid>
      <description>
        
          &lt;p&gt;Siguiendo con las traducciones de artículos realmente interesantes con los que
me he cruzado, llego a uno bastante curioso. Yo lo leí de la web de
&lt;a href=&#34;https://googletesting.blogspot.com/&#34;&gt;googletesting&lt;/a&gt;  y es el que procedo a traducir.&lt;/p&gt;
&lt;p&gt;El autor original es Alberto Savoia, y el artículo original se titulaba
&lt;a href=&#34;https://googletesting.blogspot.com/2010/07/code-coverage-goal-80-and-no-less.html&#34;&gt;Code coverage goal: 80% and no less!&lt;/a&gt;.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/poetry.jpg&#34;/&gt; 
&lt;/figure&gt;

&lt;hr&gt;
&lt;p&gt;Inicialmente posteé (Alberto Savoia) este artículo hace unos cuantos años la web
de &lt;a href=&#34;https://www.artima.com/weblogs/viewpost.jsp?thread=204677&#34;&gt;Artima Developer&lt;/a&gt;; pero la pregunta de cuál es la cobertura de código
apropiada sigue surgiendo, así que pensé que era hora de volver a publicar &lt;a href=&#34;https://www.scribd.com/doc/69769/TheWayOfTestivus&#34;&gt;la
sabiduría de Testivus&lt;/a&gt; sobre el tema.&lt;/p&gt;
&lt;h2 id=&#34;testivus-y-la-cobertura-de-código&#34;&gt;Testivus y la Cobertura de Código&lt;/h2&gt;
&lt;p&gt;Una mañana temprano, un joven programador preguntó al gran maestro:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Estoy preparado para escribir algunas pruebas unitarias. ¿Qué cobertura de código debo conseguir?&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;El gran maestro respondió:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;No te preocupes de la cobertura, tan sólo escribe algunas buenas pruebas.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;El joven programador sonrió, saludó, y se fue.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Ese mismo día más tarde, una segunda programadora realizó la misma pregunta.&lt;/p&gt;
&lt;p&gt;El gran maestro señaló una cazuela de agua hiviendo y preguntó:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;¿Cuántos granos de arroz debería poner en esa cazuela?&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;La programadora, perpleja, replicó:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;¿Cómo podría decirlo? Depende de cuánta gente tengas que alimentar, cómo estén de hambrientos, qué otra comida vayas a servir, cuánto arroz tengas disponible, y otras cosas.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Exacto&amp;rdquo;, dijo el gran maestro.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;La segunda programadora sonrió, saludó, y se fue.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Hacia el final del día, un tercer programador llegó y realizó la misma pregunta sobre la cobertura de código.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;¡El ochenta porciento y no menos!&amp;rdquo; Replicó el maestro con voz severa, golpeando con el puño en la mesa.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;El tercer programador sonrió, saludó y se fue.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Después de todo esto, un joven aprendiz se acercó al gran maestro:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Gran maestro, hoy le he oído responder la misma pregunta sobre la cobertura de código con tres repuestas diferentes. ¿Por qué?&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;El gran maestro se levantó de su silla:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Tómate algo de té fresco conmigo y hablemos de ello&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Después de rellenar sus tazas con humeante té verde caliente, el gran maestro comenzó:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;El primer programador era novato y acaba de empezar con las pruebas. Ahora mismo tiene mucho código pero ninguna prueba. Tiene un largo camino que recorrer; centrarse en la cobertura de código en este momento sería deprimente y totalmente inútil. Es mejor que se vaya acostumbrando a escribir y ejecutar algunas pruebas. Ya se preocupará de la cobertura más adelante.&lt;/p&gt;
&lt;p&gt;La segunda programadora, por otro lado, está muy experimentada tanto en programación como en pruebas. Cuando le respondí preguntándole cuántos granos de arroz debería poner en la cazuela, le ayudé a que se diera cuenta de que la cantidad de pruebas necesaria depende de cierto número de factores, y ella sabe esos factores mejor que yo mismo -al fin y al cabo es su código. No hay una respuesta única, simple, y ella es lo suficientemente inteligente como para manejar la verdad y trabajar con eso.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Ya veo&amp;rdquo;, dijo el joven aprendiz, &amp;ldquo;pero si no hay una respuesta simple, entonces porqué le dijo al tercer programador que &amp;lsquo;El ochenta porciento y no menos&amp;rsquo;?&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;El gran maestro se rió tan fuerte y alto que su barriga, evidencia de que había bebido algo más que el té verde, se agitó arriba y abajo.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;El tercer programador sólo quería respuestas simples - incluso cuando no hay respuestas simples&amp;hellip; y al fin y al cabo no va a seguirlas de ninguna manera.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;El joven aprendiz y el canoso gran maestro terminaron de beber su té en contemplativo silencio.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Original: &lt;a href=&#34;https://googletesting.blogspot.com/2010/07/code-coverage-goal-80-and-no-less.html&#34;&gt;&amp;ldquo;Code coverage goal: 80% and no less!&amp;quot;&lt;/a&gt;, de Alberto Savoia.&lt;/p&gt;
&lt;p&gt;Traducción: &lt;a href=&#34;https://magmax.org/blog/cobertura-80/&#34;&gt;&amp;ldquo;Objetivo de cobertura de código: ¡el 80% y no menos!&amp;quot;&lt;/a&gt;, por Miguel Ángel García&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
