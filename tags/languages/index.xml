<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>languages on El blog de MagMax</title>
    <link>https://magmax.org/tags/languages/</link>
    <description>Recent content in languages on El blog de MagMax</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Feb 2013 00:00:00 +0000</lastBuildDate><atom:link href="https://magmax.org/tags/languages/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Por qué make mola</title>
      <link>https://magmax.org/blog/porque-make-mola/</link>
      <pubDate>Wed, 06 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/porque-make-mola/</guid>
      <description>
        
          &lt;p&gt;Siguiendo con los lenguajes que suelo utilizar, he llegado al que utilizo para compilar y automatizar cosas.&lt;/p&gt;
&lt;p&gt;Es cierto que existen muchas herramientas de este estilo: &lt;a href=&#34;http://rake.rubyforge.org/&#34;&gt;rake&lt;/a&gt;, &lt;a href=&#34;http://miller.emu.id.au/pmiller/software/cook/&#34;&gt;cook&lt;/a&gt;, &lt;a href=&#34;http://www.scons.org/&#34;&gt;scons&lt;/a&gt;, &lt;a href=&#34;http://ant.apache.org/&#34;&gt;Ant&lt;/a&gt;, &lt;a href=&#34;http://ant.apache.org/ivy/&#34;&gt;Ivy&lt;/a&gt;, &amp;hellip; Y algunas mucho más complejas, como &lt;a href=&#34;http://fabfile.org/&#34;&gt;Fabric&lt;/a&gt;, &lt;a href=&#34;https://github.com/capistrano/capistrano&#34;&gt;Capistrano&lt;/a&gt; o incluso &lt;a href=&#34;http://maven.apache.org/&#34;&gt;Maven&lt;/a&gt;. Sin embargo, sigo utilizando &lt;em&gt;Make&lt;/em&gt;. &lt;a href=&#34;http://www.gnu.org/software/make/&#34;&gt;GNU/Make&lt;/a&gt; en concreto, ya que trae algunas mejoras sobre el &lt;em&gt;Make&lt;/em&gt; estándar.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/gnu.png&#34;
         alt=&#34;GNU&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;make-mola&#34;&gt;Make mola&lt;/h2&gt;
&lt;h3 id=&#34;simple&#34;&gt;Simple&lt;/h3&gt;
&lt;p&gt;Es un lenguaje muy simple. Tan solo admite variables y reglas. Las variables sólo constan del nombre y el valor. Las reglas, del objetivo, las dependencias y el cuerpo que permite generar el objetivo a partir de las dependencias.&lt;/p&gt;
&lt;p&gt;Hay algunos añadidos, como las instrucciones &lt;strong&gt;for&lt;/strong&gt; e &lt;strong&gt;if&lt;/strong&gt;, pero trato de evitarlas todo lo posible. Al final sólo dan problemas.&lt;/p&gt;
&lt;h3 id=&#34;declarativo&#34;&gt;Declarativo&lt;/h3&gt;
&lt;p&gt;En el &lt;em&gt;Makefile&lt;/em&gt; sólo indicas lo que quieres hacer y él ya se encargará de organizar todo el invento. Buscará dependencias, generará el árbol de compilación y lo ejecutará. Así de simple.&lt;/p&gt;
&lt;h3 id=&#34;reglas-automáticas&#34;&gt;Reglas automáticas&lt;/h3&gt;
&lt;p&gt;Además, &lt;em&gt;GNU/Make&lt;/em&gt; ya tiene algunas reglas implícitas que nos facilitan aún más la vida. Por ejemplo, ya sabe cómo generar un ejecutable a partir de varios archivos &lt;strong&gt;.c&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;entorno&#34;&gt;Entorno&lt;/h3&gt;
&lt;p&gt;Puedes utilizar todas las variables de entorno como si fuera un programa bash, o definir algunas que sólo existirán durante la ejecución. Si un &lt;em&gt;Makefile&lt;/em&gt; llama a otro, las variables seguirán definidas.&lt;/p&gt;
&lt;h3 id=&#34;rápido&#34;&gt;Rápido&lt;/h3&gt;
&lt;p&gt;Es muy difícil encontrar un programa de automatización tan rápido como &lt;em&gt;Make&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;evita-repetirse&#34;&gt;Evita repetirse&lt;/h3&gt;
&lt;p&gt;Cuando las dependencias están correctamente especificadas, no realiza un trabajo innecesario. Si un archivo ya existe y sus dependencias no han cambiado, ¿por qué volver a generarlo? &lt;em&gt;Make&lt;/em&gt; se encarga de comprobar estas dependencias y de evitar perder el tiempo con tareas innecesarias.&lt;/p&gt;
&lt;h3 id=&#34;funciones&#34;&gt;Funciones&lt;/h3&gt;
&lt;p&gt;Dispone de distintas funciones que permiten una gestión sencilla del entorno, como sustitución en cadenas, obtener la lista de archivos en un directorio, etc.&lt;/p&gt;
&lt;h3 id=&#34;comodines&#34;&gt;Comodines&lt;/h3&gt;
&lt;p&gt;Dispone de comodines y variables automáticas que nos permiten generar reglas genéricas que se ajustarán a distintos patrones, ahorrándonos mucho código.&lt;/p&gt;
&lt;h3 id=&#34;distintos-objetivos&#34;&gt;Distintos objetivos&lt;/h3&gt;
&lt;p&gt;Se puede lanzar cualquiera de sus objetivos de manera individual.&lt;/p&gt;
&lt;h3 id=&#34;genérico&#34;&gt;Genérico&lt;/h3&gt;
&lt;p&gt;No se ata a nada. Permite automatizar cualquier tarea, desde la generación de código hasta la creación de directorios, ficheros, etc.&lt;/p&gt;
&lt;h2 id=&#34;make-no-mola&#34;&gt;Make no mola&lt;/h2&gt;
&lt;h3 id=&#34;difícil-depuración&#34;&gt;Difícil depuración&lt;/h3&gt;
&lt;p&gt;Al ser un lenguaje declarativo, a menudo resulta muy dificil encontrar un error cuando se produce.&lt;/p&gt;
&lt;h3 id=&#34;muy-quejica&#34;&gt;Muy quejica&lt;/h3&gt;
&lt;p&gt;Es tremendamente exigente con el formato del &lt;em&gt;Makefile&lt;/em&gt;. Por ejemplo, si las reglas de generación del objetivo se separan utilizando espacios en lugar de tabuladores, &lt;em&gt;Make&lt;/em&gt; fallará.&lt;/p&gt;
&lt;p&gt;Por suerte contamos con editores como &lt;em&gt;Emacs&lt;/em&gt; que nos avisan de este tipo de problemas cuando estamos guardando.&lt;/p&gt;
&lt;h3 id=&#34;difícil-de-manejar&#34;&gt;Difícil de manejar&lt;/h3&gt;
&lt;p&gt;Cuando el &lt;em&gt;Makefile&lt;/em&gt; es pequeño, resulta bastante intuitivo; pero cuando comienza a crecer, seguir la línea de ejecución se va complicando. A menudo llega a unos resultados terribles, ya que suele mezclar distintas reglas para distintos objetivos.&lt;/p&gt;
&lt;h3 id=&#34;conexión-por-red&#34;&gt;Conexión por red&lt;/h3&gt;
&lt;p&gt;Realizar tareas en remoto resulta tedioso y difícil. Para eso es mejor utilizar herramientas como &lt;a href=&#34;https://github.com/capistrano/capistrano&#34;&gt;Capistrano&lt;/a&gt; o &lt;a href=&#34;http://fabfile.org/&#34;&gt;Fabric&lt;/a&gt;. Claro, que siempre es una opción utilizar Fabric para copiar el proyecto y lanzar el &lt;em&gt;Make&lt;/em&gt; en remoto.&lt;/p&gt;
&lt;h2 id=&#34;conclusiones&#34;&gt;Conclusiones&lt;/h2&gt;
&lt;p&gt;Ésta es una de esas grandes herramientas que han facilitado el despliegue, compilación y gestión en general de aplicaciones, así como el trabajo en grupo. En muchas ocasiones me ha ahorrado el problema de &amp;ldquo;en mi casa funciona&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Hay gente que cree que es una herramienta antigua y que ya hay otras herramientas mejores. Yo he tratado de encontrar herramientas que me resuelvan los mismos problemas de una manera más sencilla, pero aún no he encontrado ninguno.&lt;/p&gt;
&lt;p&gt;Entiendo que es más complejo autogenerar un Makefile válido que un script Ant, por ejemplo. Pero eso es cuando se está generando automáticamente el archivo. Salvo contadas excepciones, la edición manual de XML debería considerarse un crimen contra la humanidad.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Por qué LaTeX mola</title>
      <link>https://magmax.org/blog/porque_latex_mola/</link>
      <pubDate>Thu, 10 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/porque_latex_mola/</guid>
      <description>
        
          &lt;p&gt;Siguiendo con la saga de por qué me gustan unos y otros lenguajes, he llegado a uno que no es propiamente un lenguaje de programación, sino un lenguaje de maquetación.&lt;/p&gt;
&lt;p&gt;A menudo conocido como un lenguaje de geeks, apenas utilizado fuera del ambiente universitario, &lt;a href=&#34;http://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt; es uno de los lenguajes más curiosos que conozco.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/latex.png&#34;
         alt=&#34;LaTeX&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;qué-es-latex&#34;&gt;Qué es LaTeX&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt; es un lenguaje de maquetación. Eso significa que me permite indicar cómo quiero que quede un documento. Así, a &lt;em&gt;grosso modo&lt;/em&gt;, es como el Writter de LibreOffice pero todo en texto.&lt;/p&gt;
&lt;p&gt;Una vez escrito un proyecto, es necesario compilarlo para obtener el documento final.&lt;/p&gt;
&lt;p&gt;A nivel más técnico, &lt;a href=&#34;http://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt; es un conjunto de macros escritas sobre &lt;a href=&#34;http://es.wikipedia.org/wiki/TeX&#34;&gt;TeX&lt;/a&gt;. Así que si algo no se puede hacer con &lt;a href=&#34;http://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt;&amp;hellip; seguro que sí que se puede hacer con &lt;a href=&#34;http://es.wikipedia.org/wiki/TeX&#34;&gt;TeX&lt;/a&gt;. Aunque el precio a pagar puede ser excesivo en tiempo&amp;hellip;&lt;/p&gt;
&lt;p&gt;Y una breve reseña histórico-anecdótica: &lt;a href=&#34;http://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt; fue ideado por &lt;a href=&#34;http://es.wikipedia.org/wiki/Leslie_Lamport&#34;&gt;Leslie Lamport&lt;/a&gt; y &lt;a href=&#34;http://es.wikipedia.org/wiki/TeX&#34;&gt;TeX&lt;/a&gt; por &lt;a href=&#34;http://es.wikipedia.org/wiki/Donald_E._Knuth&#34;&gt;Donald Knuth&lt;/a&gt;. Donald Knuth quería escribir una enciclopedia sobre el análisis de algoritmos, titulada &amp;lsquo;&lt;a href=&#34;http://es.wikipedia.org/wiki/The_Art_of_Computer_Programming&#34;&gt;The Art of Computer Programming&lt;/a&gt;&amp;rsquo;, y no encontraba ningún sistema de maquetación que se adecuara a sus necesidades. Así que escribió &lt;a href=&#34;http://es.wikipedia.org/wiki/Metafont&#34;&gt;MetaFont&lt;/a&gt; para definir las fuentes y &lt;a href=&#34;http://es.wikipedia.org/wiki/TeX&#34;&gt;TeX&lt;/a&gt; para maquetar los libros. Y como tiene el humor peculiar de los matemáticos, las versiones de MetaFont y &lt;a href=&#34;http://es.wikipedia.org/wiki/TeX&#34;&gt;TeX&lt;/a&gt; crecen de forma asintótica al número &amp;ldquo;e&amp;rdquo; y &amp;ldquo;pi&amp;rdquo;; actualmente la versión de MetaFont es la 2.718281 y la de &lt;a href=&#34;http://es.wikipedia.org/wiki/TeX&#34;&gt;TeX&lt;/a&gt;, la 3.141592.&lt;/p&gt;
&lt;h2 id=&#34;por-qué-latex-mola&#34;&gt;Por qué LaTeX mola&lt;/h2&gt;
&lt;h3 id=&#34;sólo-texto&#34;&gt;Sólo texto&lt;/h3&gt;
&lt;p&gt;Cuando escribimos un documento &lt;a href=&#34;http://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt;, utilizamos exclusivamente archivos de texto plano. Esto permite escribirlos desde cualquier editor y plataforma. Basta abrir el archivo y comenzar a escribir.&lt;/p&gt;
&lt;h3 id=&#34;se-puede-guardar-en-un-dvcs&#34;&gt;Se puede guardar en un DVCS&lt;/h3&gt;
&lt;p&gt;Dado que sólo es texto, se puede guardar en un sistema de control de versiones, pudiendo comparar versiones, realizar &lt;em&gt;backups&lt;/em&gt;, comprobando quién realizó qué cambio, mezclar cambios en edición colaborativa, etc.&lt;/p&gt;
&lt;h3 id=&#34;modular&#34;&gt;Modular&lt;/h3&gt;
&lt;p&gt;Un proyecto &lt;a href=&#34;http://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt; se puede dividir en distintos ficheros e ir importándolos. Así alguien puede estar editando uno de los archivos y otra persona puede editar otro, se pueden reutilizar archivos en distintos proyectos, etc.&lt;/p&gt;
&lt;h3 id=&#34;compartible&#34;&gt;Compartible&lt;/h3&gt;
&lt;p&gt;Además, al ser archivos de texto plano, resulta sencillo compartirlos y enviarlos por internet. Y son baratos de almacenar. Cualquiera puede volver a generar el documento, tanto original como con otro estilo diferente.&lt;/p&gt;
&lt;h3 id=&#34;separación-de-capas&#34;&gt;Separación de capas&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt; separa el diseño del contenido. De esta manera puedes centrarte en lo que estás haciendo: si estás escribiendo, no tienes que preocuparte del diseño y viceversa.&lt;/p&gt;
&lt;p&gt;Además, esta separación permite la reutilización del estilo y/o del contenido.&lt;/p&gt;
&lt;p&gt;Y una ventaja más de la separación: como el contenido y el estilo no están ligados, el resultado final será mucho más homogéneo que con otro tipo de herramientas.&lt;/p&gt;
&lt;p&gt;Y otra más: Si escribes primero el contenido, puedes cederlo a los revisores para que realicen su trabajo mientras que te dedicas a maquetar. El estilo por defecto de &lt;a href=&#34;http://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt; es suficientemente elegante como para usarse.&lt;/p&gt;
&lt;h3 id=&#34;versatilidad&#34;&gt;Versatilidad&lt;/h3&gt;
&lt;p&gt;No hay ninguna característica de un documento que no soporte:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;marcas de corte&lt;/li&gt;
&lt;li&gt;espaciado para encuadernación&lt;/li&gt;
&lt;li&gt;escalado de las páginas&lt;/li&gt;
&lt;li&gt;hipenación (separación de palabras al llegar al final de línea)&lt;/li&gt;
&lt;li&gt;cualquier conjunto de caracteres (chino, ruso, griego, árabe, &amp;hellip;)&lt;/li&gt;
&lt;li&gt;escritura de música&lt;/li&gt;
&lt;li&gt;fórmulas matemáticas (y puedo decir que es especialmente eficiente en esto)&lt;/li&gt;
&lt;li&gt;¡Hasta hay módulos para describir partidas de ajedrez!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;formatos&#34;&gt;Formatos&lt;/h3&gt;
&lt;p&gt;Dado que hasta el final no decides en qué formato lo quieres, puedes generar distintos formatos: PDF, PS, PCL, HTML, &amp;hellip; &lt;a href=&#34;http://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt; es independiente del formato final.&lt;/p&gt;
&lt;h3 id=&#34;compatible&#34;&gt;Compatible&lt;/h3&gt;
&lt;p&gt;Todas las versiones son compatibles con lo anterior. Y si hay alguna incompatibilidad, el compilador te dirá dónde está el problema y resulta relativamente sencillo adaptarlo para que compile&amp;hellip; aunque perdamos alguna característica o no quede exactamente igual que el original. Pero al menos tendremos la base del documento.&lt;/p&gt;
&lt;h3 id=&#34;dispuesto-a-ayudarte&#34;&gt;Dispuesto a ayudarte&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt; te quita tareas repetitivas. Cuando yo entregaba mis trabajos de Universidad escritos en &lt;em&gt;Word&lt;/em&gt;, siempre tenía que pelearme con las imágenes: desaparecían, no se imprimían, se movían, &amp;hellip;&lt;/p&gt;
&lt;p&gt;Con &lt;a href=&#34;http://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt; no ocurre eso. Tú le indicas las características más esenciales de las imágenes y &lt;a href=&#34;http://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt; decidirá la posición más correcta para la imagen dentro del documento, en función de dónde se referencie a la misma. ¿No os parece horrible leer un documento que tiene demasiado espacio al pie de la página porque ahí va una imagen y Word ha decidido mandarla a la página siguiente? Pues eso no pasa con &lt;a href=&#34;http://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt; (a no ser que lo fuerces, claro).&lt;/p&gt;
&lt;p&gt;Además, permite la generación automática de lo que te dé la gana: índice, índice de imágenes, índice de tablas, índice de código, bibliografía referenciada en el documento, palabras clave del documento,&amp;hellip; Y todas con referencias a las apariciones. Olvídate de esos índices que no están actualizados o de hacerlo tú a mano.&lt;/p&gt;
&lt;p&gt;Tiene diccionarios para facilitarnos la separación de palabras cuando es necesario dividir una palabra, pero nos permite definir nuestras propias palabras por si el diccionario falla. Por experiencia diré que esto no suele ocurrir, salvo cuando utilizas términos en otro lenguaje distinto del original.&lt;/p&gt;
&lt;h3 id=&#34;elegante&#34;&gt;Elegante&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt; realiza numerosas optimizaciones para que el resultado final sea agradable a la vista: un espaciado diferente para los puntos suspensivos, una separación entre letras y palabras ligeramente distinta para que no se note cuando el texto está justificado, menos espacio en los puntos de las siglas que en los de puntos y seguido, conjuntos de caracteres vectorizados que permiten cualquier tamaño de letra sin pixelarse,&amp;hellip;&lt;/p&gt;
&lt;p&gt;Evitará automáticamente que un título quede aislado en una página, separado del resto del código. La cantidad de texto que debe utilizarse también se elegirá automáticamente.&lt;/p&gt;
&lt;h3 id=&#34;gratis&#34;&gt;Gratis&lt;/h3&gt;
&lt;p&gt;Pues sí, y toda esta maravilla es completamente gratuíta.&lt;/p&gt;
&lt;h3 id=&#34;libre&#34;&gt;Libre&lt;/h3&gt;
&lt;p&gt;Salvo por un pequeño detalle&amp;hellip; Es decisión de Donald Knuth que cuando muera, la versión de &lt;a href=&#34;http://es.wikipedia.org/wiki/TeX&#34;&gt;TeX&lt;/a&gt; pasará a ser la &amp;ldquo;pi&amp;rdquo; y no se podrá realizar ninguna modificación adicional utilizando el mismo nombre.&lt;/p&gt;
&lt;p&gt;Así que, si quieres colaborar o &lt;em&gt;forkearlo&lt;/em&gt;, no es un problema.&lt;/p&gt;
&lt;h3 id=&#34;cualquier-tipo-de-documento&#34;&gt;Cualquier tipo de documento&lt;/h3&gt;
&lt;p&gt;Soporta cualquier tipo de documento: artículos, libros, transparencias,&amp;hellip; Y no funcionará peor si el resultado es terriblemente grande. Es evidente que tardará algo más en compilar, pero este problema se puede solucionar fácilmente con trucos tan simples como no importar (temporalmente) algunas secciones, ignorar índices o crear borradores.&lt;/p&gt;
&lt;h3 id=&#34;edición-on-line&#34;&gt;Edición on-line&lt;/h3&gt;
&lt;p&gt;No hace mucho descubrí una web que permite escribir &lt;a href=&#34;http://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt; colaborativamente: &lt;a href=&#34;https://www.sharelatex.com/&#34;&gt;ShareLaTeX&lt;/a&gt;. Apesar de la existencia de este editor on-line, yo sigo prefiriendo editar &lt;a href=&#34;http://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt; con GNU/Emacs, ya que me ofrece un montón de &lt;em&gt;shortcuts&lt;/em&gt; que ya me conozco XD.&lt;/p&gt;
&lt;h3 id=&#34;estructuras-de-control-y-bucles&#34;&gt;Estructuras de control y bucles&lt;/h3&gt;
&lt;p&gt;Como todo lenguaje, &lt;a href=&#34;http://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt; tiene estructuras de control y bucles. De esta manera puedes evitarte escribir código repetitivo. Por supuesto, también tiene variables.&lt;/p&gt;
&lt;h3 id=&#34;generable&#34;&gt;Generable&lt;/h3&gt;
&lt;p&gt;Al ser texto plano, es fácil crear plantillas en cualquier lenguaje y utilizarlas para crear documentos. No es necesario ningún tipo de API ni servicio en segundo plano: sólo simples plantillas.&lt;/p&gt;
&lt;h2 id=&#34;por-qué-latex-no-mola&#34;&gt;Por qué LaTeX no mola&lt;/h2&gt;
&lt;h3 id=&#34;no-es-wysiwyg&#34;&gt;No es WYSIWYG&lt;/h3&gt;
&lt;p&gt;Al tener separada la apariencia del contenido, mientras escribimos el contenido no veremos cómo va a quedar el resultado final.&lt;/p&gt;
&lt;p&gt;Lo he puesto entre las desventajas, ya que es lo más criticado de &lt;a href=&#34;http://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt;, pero también lo he puesto cerca de las ventajas porque, para mí, es una de las mayores ventajas. Por mucho que me esmere en centrarme en el contenido, cuando veo el resultado final, me es imposible no editar este o aquel estilo. Al ver sólo el contenido, esto no pasa, y me centro más en escribir sin distraerme con minucias del estilo que ya revisaré al final.&lt;/p&gt;
&lt;h3 id=&#34;curva-de-aprendizaje&#34;&gt;Curva de aprendizaje&lt;/h3&gt;
&lt;p&gt;Es terrible. La lista de órdenes que se pueden utilizar es interminable y puede llevar más de un dolor de cabeza. Pero no se podía tener una maravilla semejante sin algún precio a pagar.&lt;/p&gt;
&lt;h2 id=&#34;conclusiones&#34;&gt;Conclusiones&lt;/h2&gt;
&lt;p&gt;Apesar de tener pocas cosas en contra, hay que admitir que son factores de peso.&lt;/p&gt;
&lt;p&gt;Yo llegué a &lt;a href=&#34;http://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt; rebotado de Word, y me costó mucho comenzar a hacer algo medianamente decente. Poco a poco fui adentrándome en los entresijos hasta manejarme con soltura gracias a mi Proyecto Fin de Carrera.&lt;/p&gt;
&lt;p&gt;Lo más complejo que he hecho en &lt;a href=&#34;http://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt; es mi propio currículum. Consiste en un archivo con muchas variables que me permiten activar o desactivar opciones y, en función de éstas, se genera el currículum: idioma, con descripciones cortas o detalladas, con todos los cursos o sólo los más importantes,&amp;hellip; He intentado hacer este tipo de cosas con otros editores diferentes y el resultado ha sido desastroso. Sin embargo con &lt;a href=&#34;http://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt; apenas requiere esfuerzo extra.&lt;/p&gt;
&lt;p&gt;Conseguir una plantilla más o menos decente suele ser algo complejo, aunque para eso está internet, claro. Una vez se tiene el documento base, sólo te tienes que dedicar a escribir. Y esa parte es realmente sencilla. Conozco un caso en el que le dejaron todo preparado para escribir a una amiga que estudiaba magisterio; pues la chica escribió todo el documento y, a la hora de compilar, no hubo ni un sólo fallo. Tal cual se compiló, se entregó. Y le gustó.&lt;/p&gt;
&lt;p&gt;Si algo tengo claro es que cuando quiero hacer un documento gualdrapa, uso HTML, pero si quiero hacer algo chulo, usaré &lt;a href=&#34;http://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Por qué Ruby mola</title>
      <link>https://magmax.org/blog/porque-ruby-mola/</link>
      <pubDate>Fri, 07 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/porque-ruby-mola/</guid>
      <description>
        
          &lt;p&gt;Este artículo me resulta muy complejo. Así como en el resto de la saga de los &amp;ldquo;&lt;em&gt;por qué UN LENGUAJE mola&lt;/em&gt;&amp;rdquo; he tratado de ser todo lo imparcial que he podido, temo que en este caso me sea imposible.&lt;/p&gt;
&lt;p&gt;Y la causa es muy sencilla: mi propia ignorancia.&lt;/p&gt;
&lt;p&gt;Nunca he hecho nada en &lt;a href=&#34;http://www.ruby-lang.org/&#34;&gt;Ruby&lt;/a&gt;, salvo algún &lt;em&gt;kata&lt;/em&gt; que otro. Pero me estoy leyendo el libro &amp;ldquo;&lt;em&gt;7 languages in 7 weeks&lt;/em&gt;&amp;rdquo; (libro muy recomendable) y he aprovechado para tomar algunas notas.&lt;/p&gt;
&lt;p&gt;Así que éste es el artículo: &amp;ldquo;Por qué ruby mola, en mi opinión&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Admitiré todo tipo de críticas y sugerencias&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/ruby.png&#34;
         alt=&#34;Ruby&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;por-qué-ruby-me-mola&#34;&gt;Por qué Ruby me mola&lt;/h2&gt;
&lt;h3 id=&#34;toda-expresión-devuelve-algo&#34;&gt;Toda expresión devuelve algo&lt;/h3&gt;
&lt;p&gt;Creo que es una cosa que me gusta mucho. No tienes que preguntarte si un método devuelve algo, ya que &lt;em&gt;todos&lt;/em&gt; lo hacen. Aunque no quieran.&lt;/p&gt;
&lt;p&gt;Como azúcar sintáctico es algo genial. Pero mejor no hablaremos de los posibles problemas de cambio de API simplemente por añadir una instrucción más, sobreescritura de un &lt;strong&gt;return&lt;/strong&gt; implícito o del coste en rendimiento de apilar/desapilar muchos valores que nunca se utilizarán.&lt;/p&gt;
&lt;p&gt;Aún así, me gusta.&lt;/p&gt;
&lt;h3 id=&#34;condiciones-inline&#34;&gt;Condiciones inline&lt;/h3&gt;
&lt;p&gt;Tener la posibilidad de escribir una condición en una línea facilita la lectura de código. Eso es algo que me gusta del lenguaje.&lt;/p&gt;
&lt;p&gt;Por si alguien tiene dudas, me refiero a esto:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;erroneous filename&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exists?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;nombres-de-funciones-con-los-decoradores--y-&#34;&gt;Nombres de funciones con los decoradores ? y !&lt;/h3&gt;
&lt;p&gt;Venga, va: Me encanta eso de preguntar cosas y que el lenguaje quede legible. Sin embargo creo que debería ser más restrictivo, y prohibir que este tipo de funciones admita parámetros. ¿Por qué? Fijaos:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exists? &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;  file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;remove!
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Queda claro dónde estamos preguntando y que vamos a realizar una operación que modifica el objeto actual.&lt;/p&gt;
&lt;p&gt;Sin embargo, si añadimos parámetros a estas funciones la cosa cambia mucho:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; fs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exists? filename &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;  fs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;remove! filename
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Creo que queda claro a lo que me refiero :D&lt;/p&gt;
&lt;h3 id=&#34;duck-typing&#34;&gt;Duck typing&lt;/h3&gt;
&lt;p&gt;Si algo parece un pato y hace &amp;ldquo;cuac&amp;rdquo; como un pato, es un pato. Ni qué decir tiene que, si me gusta en Python, me tiene que gustar también en Ruby.&lt;/p&gt;
&lt;p&gt;Con esto se hace referencia a que es innecesario indicar qué interfaces se implementan en una clase, ya que basta con que implemente la funcionalidad adecuada.&lt;/p&gt;
&lt;h3 id=&#34;tipado-dinámico&#34;&gt;Tipado dinámico&lt;/h3&gt;
&lt;p&gt;Nuevamente una característica que también tiene Python y que también me gusta.&lt;/p&gt;
&lt;h3 id=&#34;symbols&#34;&gt;Symbols&lt;/h3&gt;
&lt;p&gt;La posibilidad de definir constantes invaluadas me gusta. No son pocas las veces que necesito una constante sólo a modo de documentación, y a veces necesito que sean valores únicos.&lt;/p&gt;
&lt;p&gt;Ya que estoy comparando con Python&amp;hellip; ¡Python &lt;strong&gt;no&lt;/strong&gt; lo tiene!&lt;/p&gt;
&lt;h3 id=&#34;bloques-de-código&#34;&gt;Bloques de código&lt;/h3&gt;
&lt;p&gt;Apesar de que tienen sus problemas potenciales, me gustan los bloques de código. Evitan la creación de funciones innecesarias porque se va a realizar una tarea simple. Me viene a la cabeza el ejemplo de ordenar un vector de objetos. En Java necesitaría una clase que implemente una interfaz &lt;strong&gt;Comparable&lt;/strong&gt;, de manera que pueda compararme dos objetos&amp;hellip; En ruby puedo hacer lo mismo en una línea.&lt;/p&gt;
&lt;p&gt;Quizá tienen demasiada potencia y pueden dar lugar a código duplicado. Aquí entra en juego la experiencia y habilidad del programador.&lt;/p&gt;
&lt;p&gt;En Python existe algo parecido aunque más limitado, que es el &lt;strong&gt;lambda&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;clases-abiertas&#34;&gt;Clases abiertas&lt;/h3&gt;
&lt;p&gt;Aunque vuelve a ser una espada de Damocles, me gustan las clases abiertas. No son pocas las veces que he deseado añadir una pequeña funcionalidad a una clase existente con el fin de ajustarla a mis necesidades, en lugar de tener que crear todo un wrapper por encima.&lt;/p&gt;
&lt;h2 id=&#34;por-qué-ruby-no-me-mola&#34;&gt;Por qué Ruby no me mola&lt;/h2&gt;
&lt;h3 id=&#34;cláusula-unless&#34;&gt;Cláusula Unless&lt;/h3&gt;
&lt;p&gt;Cada vez que me encuentro esta cláusula tengo que releer la expresión 3 veces para estar seguro de lo que hace. Y eso que es un simple &amp;ldquo;&lt;strong&gt;if not&lt;/strong&gt;&amp;rdquo;. Además, puede dar lugar a código difícil de leer, si se mezcla con condiciones habituales:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exists? &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; another_file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exists? &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; file &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; another_file &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# some stuff&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;cero-es-true&#34;&gt;Cero es True&lt;/h3&gt;
&lt;p&gt;A mí me resulta poco intuitivo. Será porque he sido programador de Ansi C durante mucho tiempo. Me resulta más sencillo pensar que algo que devuelve cero, es Falso.&lt;/p&gt;
&lt;h3 id=&#34;paréntesis-opcionales-al-llamar-a-una-función&#34;&gt;Paréntesis opcionales al llamar a una función&lt;/h3&gt;
&lt;p&gt;Aunque en muchas ocasiones permite una mayor legibilidad del código, yo prefiero que las cosas se hagan siempre de la misma manera. Si la manera de invocar a una función es mediante paréntesis, pues se ponen.&lt;/p&gt;
&lt;h3 id=&#34;los-tres-puntos&#34;&gt;Los tres puntos&lt;/h3&gt;
&lt;p&gt;Me parece demasiado afinar la diferencia entre &lt;em&gt;..&lt;/em&gt; y &lt;em&gt;&amp;hellip;&lt;/em&gt;, ya que resulta fácil confundirlos visualmente.&lt;/p&gt;
&lt;h3 id=&#34;parámetros-nombrados&#34;&gt;Parámetros nombrados&lt;/h3&gt;
&lt;p&gt;A mí me parecen muy interesantes los parámetros nombrados, ya que pueden ofrecer mucha semántica al código, sobre todo cuando algo deja de ser lo que es para ser otra cosa (python):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;create_output(output_filename&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;current_path)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ruby carece de esta característica, aunque podéis encontrar ejemplos en los que se pasa una hash como parámetro a la función. Horrible.&lt;/p&gt;
&lt;h3 id=&#34;hay-dos-maneras-de-crear-bloques&#34;&gt;Hay dos maneras de crear bloques&lt;/h3&gt;
&lt;p&gt;La sintaxis debería ser más simple, y la manera de hacerlo es reducir las formas de hacer las cosas. En Ruby podemos utilizar el &lt;strong&gt;do/end&lt;/strong&gt; o bien el &lt;strong&gt;{/}&lt;/strong&gt; para hacer lo mismo. Si una manera es buena, ¿por qué ofrecer una alternativa?&lt;/p&gt;
&lt;h2 id=&#34;no-sé-si-me-mola-en-ruby&#34;&gt;No sé si me mola en Ruby&lt;/h2&gt;
&lt;p&gt;No me gustan las evaluaciones automáticas de Strings. No sé si será porque me recuerda a PHP, pero el caso es que me parece muy arriesgado que por cambiar el tipo de comillas se pierda rendimiento.&lt;/p&gt;
&lt;p&gt;Sinceramente, me gusta cómo hace esto mismo Python, utilizando Templates. Si necesito una plantilla, ya usaré plantillas.&lt;/p&gt;
&lt;h2 id=&#34;conclusiones&#34;&gt;Conclusiones&lt;/h2&gt;
&lt;p&gt;Cuando comencé leerme el libro, Ruby me parecía un lenguaje muy curioso. Tiene muchas cosas muy molonas.&lt;/p&gt;
&lt;p&gt;Tras leerme el capítulo de Ruby, mi opinión ha cambiado drásticamente. No me gusta el lenguaje. Me parece innecesariamente complejo y, contra lo que defienden sus seguidores, me parece ofuscado.&lt;/p&gt;
&lt;h3 id=&#34;comparativa-ruby-python&#34;&gt;Comparativa Ruby-Python&lt;/h3&gt;
&lt;p&gt;Con el fin de explicar por qué me parece ofuscado, aquí tenéis una comparativa entre un código en Ruby y uno en Python. Se trata de un &amp;ldquo;&lt;em&gt;grep&lt;/em&gt;&amp;rdquo; pequeñito. Por favor, si algún programador de algún lenguaje quiere mejorarlo, se aceptan sugerencias, siempre y cuando haga exactamente lo mismo.&lt;/p&gt;
&lt;p&gt;Lo que hará es buscar una expresión regular en el directorio actual (&lt;em&gt;no&lt;/em&gt; es recursivo), mostrando el nombre del archivo, dos puntos, línea donde se encontró.&lt;/p&gt;
&lt;p&gt;Ruby:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/ruby&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;expression &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Regexp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#66d9ef&#34;&gt;ARGV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Dir&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;foreach(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;filename&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;  file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(filename)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;file? &lt;span style=&#34;color:#e6db74&#34;&gt;filename&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;foreach(filename) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;line&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;expression&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;        puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;filename&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;line&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Python:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; re
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;expression &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; filename &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;listdir(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isfile(filename):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(filename) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; content:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; content:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;        line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rstrip()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;match(expression, line):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{filename}:{line}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(filename&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;filename, line&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;line)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://gist.github.com/3706670&#34;&gt;Solución Ruby&lt;/a&gt; aportada por Juan F. Pérez, con una pequeña modificación:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/ruby&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;expression &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Regexp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#66d9ef&#34;&gt;ARGV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Dir&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;foreach(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;filename&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;file? filename
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;open(filename)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;line&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;    puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;filename&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;line&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; expression
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sed sinceros y pensad cuál resulta más legible.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Por qué C mola</title>
      <link>https://magmax.org/blog/porque_c_mola/</link>
      <pubDate>Mon, 20 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/porque_c_mola/</guid>
      <description>
        
          &lt;p&gt;No he podido evitar darme cuenta de que se me había pasado escribir el artículo del lenguaje que quizá más domino. Así que tenía que arreglarlo :D&lt;/p&gt;
&lt;p&gt;C es un lenguaje antiguo. Se escribió con un objetivo muy concreto: la creación de sistemas operativos; y aún más concretamente, para la creación de Unix. No solo se ideó antes de que existieran los patrones de programación, sino que ha sido gracias a C que muchos de éstos han sido inventados.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/ansic.jpg&#34;
         alt=&#34;Ansi C&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;por-qué-c-mola&#34;&gt;Por qué C mola&lt;/h2&gt;
&lt;h3 id=&#34;velocidad&#34;&gt;Velocidad&lt;/h3&gt;
&lt;p&gt;Por mucho que lo intentéis, no conseguiréis mejorar la velocidad de un programa C compilado y optimizado con ningún lenguaje interpretado. Un programa C siempre será entre 10 y 100 veces más rápido.&lt;/p&gt;
&lt;p&gt;Eso es algo que saben perfectamente los creadores de lenguajes interpretados. En Python, las librerías más usadas se han reprogramado en C para mejorar su eficiencia. El propio intérprete Python está escrito en C.&lt;/p&gt;
&lt;h3 id=&#34;compilado&#34;&gt;Compilado&lt;/h3&gt;
&lt;p&gt;Los compiladores suelen utilizar técnicas de optimización que aumentan la velocidad de ejecución del programa, aunque en ocasiones pueden incrementar su tamaño. Estas técnicas pueden ser locales o globales, y permiten que el programador se centre en escribir código legible, ya que será el compilador quien realice estas mejoras a posteriori.&lt;/p&gt;
&lt;h3 id=&#34;fuertemente-tipado&#34;&gt;Fuertemente tipado&lt;/h3&gt;
&lt;p&gt;C es fuertemente tipado, por lo que podemos ahorrarnos muchas comprobaciones a lo largo de nuestro programa.&lt;/p&gt;
&lt;h3 id=&#34;acceso-directo-a-memoria&#34;&gt;Acceso directo a memoria&lt;/h3&gt;
&lt;p&gt;El acceso a memoria es directo, por lo que podemos hacer cosas realmente interesantes, como copiar grandes bloques de memoria a otra posición; cambiar un puntero, lo que producirá un cambio en todos los siguientes accesos; recorrerlos, &amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;si-se-puede-hacer-se-puede-hacer-en-c&#34;&gt;Si se puede hacer, se puede hacer en C&lt;/h3&gt;
&lt;p&gt;Cualquier cosa que se pueda programar, se puede hacer en C de forma eficiente. El problema puede ser el tiempo que lleve programarlo, pero se puede hacer.&lt;/p&gt;
&lt;h3 id=&#34;tads&#34;&gt;TADs&lt;/h3&gt;
&lt;p&gt;La diferencia entre un programador bueno y uno malo en C suelen ser los TADs (Tipos Abstractos de Datos). Es el equivalente a los objetos de otros lenguajes. Permiten embeber funcionalidad en una sola variable y, cuando es necesario, se puede ocultar el contenido de ésta mediante variables opacas.&lt;/p&gt;
&lt;h2 id=&#34;por-qué-c-no-mola&#34;&gt;Por qué C no mola&lt;/h2&gt;
&lt;h3 id=&#34;espacio-de-nombres-único&#34;&gt;Espacio de nombres único&lt;/h3&gt;
&lt;p&gt;Sin duda, la peor característica de C es que no dispone de espacios de nombres. Si le añadimos que no tiene objetos, el resultado es nombres de funciones terriblemente largos.&lt;/p&gt;
&lt;h3 id=&#34;páginas-de-códigos&#34;&gt;Páginas de códigos&lt;/h3&gt;
&lt;p&gt;C se inventó en una época en la que la memoria era cara, carísima. Por lo tanto no estaban para derrochar espacio pensando en las letras raras de cada idioma ni de hacerlo ampliable: la Ñ española, el símbolo del euro, caracteres rusos, chinos, árabes,&amp;hellip; Por eso se centraron en la lengua inglesa y describieron 256 caracteres, que podían direccionarse con un único byte. Esto es lo que se conoce como &lt;strong&gt;código ASCII&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Como las multinacionales, en concreto IBM, creían que siendo incompatibles se aseguraban la lealtad de sus clientes, decidieron crear otra distinta, que consistía en repartir de forma diferente los mismos 256 caracteres. Esto es lo que se conoce como &lt;strong&gt;código EBCDIC&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Después se dieron cuenta que cada idioma tiene sus peculiaridades, así que decidieron que ninguna persona iba a necesitar un ordenador en un idioma para escribir en otro idioma, y reutilizaron algunos símbolos, creando distintas páginas de códigos ASCII y sus homólogos EBCDIC.&lt;/p&gt;
&lt;p&gt;Para complicarlo más, los ficheros no tienen ninguna característica que indiquen en qué página de códigos se encuentran escritos (salvo en AS400, que sí dispone de esta propiedad), así que&amp;hellip; Bueno, suerte con ellos.&lt;/p&gt;
&lt;p&gt;C no tiene soporte para páginas de códigos multibyte. Es necesario utilizar librerías externas para este tipo de operaciones.&lt;/p&gt;
&lt;h3 id=&#34;gestión-de-memoria&#34;&gt;Gestión de memoria&lt;/h3&gt;
&lt;p&gt;La gestión de memoria es algo que recae en el programador. Aunque en ocasiones es algo bueno, en la mayoría de las veces puede producir &lt;em&gt;leaks&lt;/em&gt; de memoria, &lt;em&gt;buffer overflows&lt;/em&gt;, y otro tipo de accesos a memoria fuera de tiesto.&lt;/p&gt;
&lt;h3 id=&#34;goto&#34;&gt;Goto&lt;/h3&gt;
&lt;p&gt;Dado que no hay excepciones, algunos programadores utilizan el &lt;em&gt;goto&lt;/em&gt; de la muerte para saltar al final de las funciones y asegurar la liberación de la memoria. Éste es un &amp;ldquo;buen uso&amp;rdquo; del &lt;em&gt;goto&lt;/em&gt;, si no sabes hacerlo mejor.&lt;/p&gt;
&lt;p&gt;Yo siempre digo que el &lt;em&gt;goto&lt;/em&gt; es una herramienta más y que es muy útil cuando tienes una función de 500 líneas de código. En estos casos, el &lt;em&gt;goto&lt;/em&gt; no es tu mayor problema.&lt;/p&gt;
&lt;h3 id=&#34;strtok&#34;&gt;Strtok&lt;/h3&gt;
&lt;p&gt;La instrucción &lt;strong&gt;strtok&lt;/strong&gt; es la mancha negra en un lenguaje muy bien diseñado. La idea de esta función es permitir un párser de lenguajes de forma sencilla.&lt;/p&gt;
&lt;p&gt;El problema es que la instrucción tiene estado, y resulta terriblemente sencillo anidar llamadas a la función, que provocarán lecturas incorrectas.&lt;/p&gt;
&lt;p&gt;Se ganó la fama el &lt;em&gt;goto&lt;/em&gt;, pero puedo aseguraros que el mayor enemigo del programador es el &lt;em&gt;strtok&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;casting&#34;&gt;Casting&lt;/h3&gt;
&lt;p&gt;Cuando se cambia el tipo de una variable, se conoce como &amp;ldquo;&lt;strong&gt;cast&lt;/strong&gt;&amp;rdquo;. Esta técnica resulta muy útil para implementar patrones como el de variables opacas, pero es una espada de Damocles: se salta las comprobaciones de tipo del sistema, pudiendo producir errores (chungos) en tiempo de ejecución.&lt;/p&gt;
&lt;h3 id=&#34;portabilidad&#34;&gt;Portabilidad&lt;/h3&gt;
&lt;p&gt;Uno de los objetivos de C era la portabilidad del código. Se ideó precisamente en una época en la que cada máquina tenía un sistema operativo en ensamblador a medida, y su propósito era unificar la creación del sistema operativo, de manera que un compilador generara el código máquina necesario para cada familia de computadoras.&lt;/p&gt;
&lt;p&gt;La idea era buena, pero C tenía sus deficiencias y cada empresa decidió subsanarlas como le vino en gana. Como la cosa se iba de madre, decidieron sacar el estándar POSIX, de manera que se unificaran las cosas que hace el sistema operativo para utilizarse de la misma manera desde C.&lt;/p&gt;
&lt;p&gt;Sin embargo, las empresas hicieron lo que les vino en gana: IBM lo soporta perfectamente en algunas máquinas, parcialmente en otras y&amp;hellip; bueno, nada en otras. Y Microsoft, que sacó su propio &amp;ldquo;des-estándar&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;¿Queréis ejemplos? La llamada al sistema &amp;ldquo;fork&amp;rdquo;, en solaris es &amp;ldquo;fork1&amp;rdquo;, ya que &amp;ldquo;fork&amp;rdquo; hace algo ligeramente diferente apesar de tener exactamente los mismos parámetros. Resultado: &lt;em&gt;leaks&lt;/em&gt;, procesos &lt;em&gt;zombies&lt;/em&gt;, &amp;hellip;&lt;/p&gt;
&lt;p&gt;El resultado es un código que no puede usarse sin más en los distintos sistemas operativos, sino que requiere mucho tiempo de adaptación.&lt;/p&gt;
&lt;h3 id=&#34;poco-eficiente-de-programar&#34;&gt;Poco eficiente de programar&lt;/h3&gt;
&lt;p&gt;A menudo requiere mucho tiempo hacer cualquier cosa. Resulta indispensable el uso de librerías externas, tales como la libglib para poder realizar programas en tiempos aceptables.&lt;/p&gt;
&lt;p&gt;La funcionalidad que otorga la API estándar es bastante reducida.&lt;/p&gt;
&lt;h3 id=&#34;malos-sistemas-de-pruebas&#34;&gt;Malos sistemas de pruebas&lt;/h3&gt;
&lt;p&gt;Las propias características del lenguaje hacen que sea dificil realizar sistemas de pruebas unitarias eficientes. No es fácil crear &lt;strong&gt;mocks&lt;/strong&gt; ni hacer &lt;em&gt;tests&lt;/em&gt; que se encuentren automáticamente. Además, hay que compilar el código, y una vez compilado se suelen ocultar las características. Una vez compilado, no es posible acceder a las funciones de forma individual (si las opciones de compilación son correctas).&lt;/p&gt;
&lt;p&gt;Existen buenos depuradores, pero la depuración es un proceso manual que requiere mucho tiempo. Es más agradable trabajar con sistemas de pruebas que ya realizan esa depuración por nosotros.&lt;/p&gt;
&lt;h3 id=&#34;pequeño-es-mejor&#34;&gt;Pequeño es mejor&lt;/h3&gt;
&lt;p&gt;Bueno, esto no es una desventaja, sino una característica: escribir funciones pequeñas permite tener más controlada la gestión de memoria y resulta más sencillo entender el código. Esto es algo que los programadores C de verdad saben y usan.&lt;/p&gt;
&lt;p&gt;A menudo, las funciones C tienden a crecer debido a la necesidad de varias líneas de código para realizar cualquier tipo de operación compleja: acceso a variables opacas, comprobación de errores, gestión de memoria,&amp;hellip; Por lo que resulta complejo conseguir funciones de 2-3 líneas. Sin embargo, marcarse un límite de 20 líneas por función puede ser un buen ejercicio de autocontrol.&lt;/p&gt;
&lt;h2 id=&#34;conclusión&#34;&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;El lenguaje de programación C provocó un antes y un después. Hay gente que lo odia y gente que lo ama, aunque abundan más los primeros que los segundos.&lt;/p&gt;
&lt;p&gt;En mi opinión, C es un lenguaje para conocer y respetar, de la misma manera que se respeta a un anciano: por muy rápido y listo que te creas, él cuenta con la experiencia.&lt;/p&gt;
&lt;p&gt;Saber C siempre es útil, aunque no tenga objetos y parezca completamente distinto de tu lenguaje favorito.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Por qué PHP mola</title>
      <link>https://magmax.org/blog/porque-php-mola/</link>
      <pubDate>Thu, 28 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/porque-php-mola/</guid>
      <description>
        
          &lt;p&gt;Puedo asegurar que lo he intentado. He buscado las razones por las que PHP mola. Temo haber encontrado pocas.&lt;/p&gt;
&lt;p&gt;Aún así, espero que este artículo ayude a conocer mejor el lenguaje. Quien sabe&amp;hellip; A lo mejor vosotros podéis ayudarme!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Actualización 2012-07-10:&lt;/em&gt; Aunque no es una lista exhaustiva, me ha parecido interesante añadir al &amp;ldquo;no-mola&amp;rdquo; la ausencia de hilos.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/php.png&#34;
         alt=&#34;PHP&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;php-mola&#34;&gt;PHP mola&lt;/h2&gt;
&lt;h3 id=&#34;tipado-dinámico&#34;&gt;Tipado dinámico&lt;/h3&gt;
&lt;p&gt;Puedes utilizar una variable para almacenar cualquier valor, sin importar el tipo de la variable.&lt;/p&gt;
&lt;h3 id=&#34;barato&#34;&gt;Barato&lt;/h3&gt;
&lt;p&gt;Habitualmente puede costar hasta 50 veces menos que un servidor Java.&lt;/p&gt;
&lt;h3 id=&#34;extendido&#34;&gt;Extendido&lt;/h3&gt;
&lt;p&gt;Funciona en todas partes. Raro es el servidor que no lo soporta. Además, su despliegue suele ser poco doloroso: simplemente funciona.&lt;/p&gt;
&lt;h3 id=&#34;poco-más-que-html&#34;&gt;Poco más que HTML&lt;/h3&gt;
&lt;p&gt;Comenzar en PHP es lo mismo que utilizar HTML y añadir alguna pequeña funcionalidad. Poco a poco, se termina creando un programa más complejo donde ya se separan las capas MVC y demás, pero comenzar a programar en PHP puede empezar por, simplemente, un acceso a base de datos desde HTML (sí, un horror).&lt;/p&gt;
&lt;h3 id=&#34;muchas-librerías&#34;&gt;Muchas librerías&lt;/h3&gt;
&lt;p&gt;Hay muchísimo código escrito en PHP y resulta tremendamente sencillo encontrar una librería que te resuelva un problema.&lt;/p&gt;
&lt;h2 id=&#34;php-no-mola&#34;&gt;PHP no mola&lt;/h2&gt;
&lt;h3 id=&#34;una-función-para-cada-cosa&#34;&gt;Una función para cada cosa&lt;/h3&gt;
&lt;p&gt;Tengo una teoría: Si el API de PHP tuviera 4 veces más funciones, no sería posible encontrar ningún nombre de función de menos de 10 caracteres que fuera medianamente legible.&lt;/p&gt;
&lt;p&gt;PHP tiene funciones muy similares que se diferencian en matices. Y tiene muchos matices.&lt;/p&gt;
&lt;p&gt;La API estándar es tan amplia, que resulta casi imposible hacer algo sin tener que consultarla. Sin embargo, no incluye a penas más funcionalidad que la API básica de C, ni grandes diferencias de utilización.&lt;/p&gt;
&lt;h3 id=&#34;espacios-de-nombres&#34;&gt;Espacios de nombres&lt;/h3&gt;
&lt;p&gt;Hasta la última versión no ha tenido espacios de nombres. No está mal, tener algo básico en la versión 5.3.0.&lt;/p&gt;
&lt;h3 id=&#34;no-homogéneo&#34;&gt;No homogéneo&lt;/h3&gt;
&lt;p&gt;Las reglas de nombrado de las funciones de la API no siguen ningún estándar, y puede que encuentres funciones similares que tienen los parámetros en distinto orden o cuyo nombre tiene distinta raíz.&lt;/p&gt;
&lt;h3 id=&#34;mezcla-de-capas&#34;&gt;Mezcla de capas&lt;/h3&gt;
&lt;p&gt;Al poder embeber PHP dentro de nuestro HTML, resulta demasiado sencillo mezclar capas. A veces esta separación es necesaria para ayudarnos a no hacer cosas mal hechas.&lt;/p&gt;
&lt;h3 id=&#34;mezcla-los-conceptos-de-array-y-hash&#34;&gt;Mezcla los conceptos de Array y Hash&lt;/h3&gt;
&lt;p&gt;En PHP, una hash y un array es lo mismo. Esto puede dar lugar a distintas situaciones caóticas.&lt;/p&gt;
&lt;h3 id=&#34;malos-entornos-de-pruebas&#34;&gt;Malos entornos de pruebas&lt;/h3&gt;
&lt;p&gt;La librería PHPUnit es la más extendida, pero tiene carencias importantes. No hay una buena librería de dobles de prueba.&lt;/p&gt;
&lt;p&gt;Esta situación provoca que la mayor parte de las librerías que se pueden obtener no están convenientemente probadas y son propensas a errores.&lt;/p&gt;
&lt;h3 id=&#34;apenas-usado-fuera-de-la-web&#34;&gt;Apenas usado fuera de la web&lt;/h3&gt;
&lt;p&gt;Sin embargo, es un lenguaje que apenas se usa fuera del entorno web.&lt;/p&gt;
&lt;h3 id=&#34;orientación-a-objetos&#34;&gt;Orientación a objetos&lt;/h3&gt;
&lt;p&gt;La orientación a objetos de PHP está metida con calzador. La propia API evita a toda costa la utilización de objetos.&lt;/p&gt;
&lt;h3 id=&#34;poco-intuitivo&#34;&gt;Poco intuitivo&lt;/h3&gt;
&lt;p&gt;Si se te ocurren tres maneras de hacer las cosas, ninguna funcionará. Habrá otra rebuscada que será la buena.&lt;/p&gt;
&lt;h3 id=&#34;nombres-mal-escogidos&#34;&gt;Nombres mal escogidos&lt;/h3&gt;
&lt;p&gt;Veamos un ejemplo relacionado con DOMDocument. ¿Qué hace la función @saveXML@? Contrariamente a lo que el lector pueda pensar, no guarda nada. Tan solo devuelve la serialización del DOM (es decir, que es un @toString@, pero como la API no usa objetos&amp;hellip;).&lt;/p&gt;
&lt;h3 id=&#34;no-tiene-hilos&#34;&gt;No tiene hilos&lt;/h3&gt;
&lt;p&gt;PHP no es multihilo. A menudo esto se simula mediante procesos, lo que es más lento y tiene problemas para compartir datos.&lt;/p&gt;
&lt;h2 id=&#34;conclusión&#34;&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;Aunque me ha costado encontrar razones por las que PHP mola, resulta tremendamente sencillo encontrar razones por las que no mola (hay muchas páginas que lo demuestran, como &lt;a href=&#34;http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/&#34;&gt;PHP: a fractal of bad design&lt;/a&gt; , que no tiene desperdicio). Sin embargo, es uno de los lenguajes más utilizados hoy en día, ¿cómo es posible?&lt;/p&gt;
&lt;p&gt;La razón es muy sencilla: &amp;ldquo;Protoduction&amp;rdquo;, es decir, un prototipo que termina en producción (sacado de &lt;a href=&#34;http://www.dodgycoder.net/2011/11/yoda-conditions-pokemon-exception.html&#34;&gt;&amp;lsquo;Yoda Conditions&amp;rsquo;, &amp;lsquo;Pokémon Exception Handling&amp;rsquo; and other programming classics&lt;/a&gt; ).&lt;/p&gt;
&lt;p&gt;Hoy en día hay fabulosos frameworks de desarrollo en PHP: &lt;a href=&#34;http://www.symfony-project.org/&#34;&gt;symfony&lt;/a&gt; , &lt;a href=&#34;http://kohanaframework.org/&#34;&gt;kohana&lt;/a&gt; , &lt;a href=&#34;http://codeigniter.com/&#34;&gt;CodeIgniter&lt;/a&gt; , &lt;a href=&#34;http://cakephp.org/&#34;&gt;CakePHP&lt;/a&gt; , &lt;a href=&#34;http://www.zend.com/en/&#34;&gt;Zend&lt;/a&gt; ,&amp;hellip; . Sin embargo, todos ellos requieren una gran pericia por parte del desarrollador para no terminar mezclando capas o creando un agujero de seguridad.&lt;/p&gt;
&lt;p&gt;La gran ventaja de PHP sigue siendo la misma que hace años: sencillez de despliegue de la aplicación. ¿Su peor defecto? Lo sencillo que resulta crear un sitio inseguro.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Por qué Java mola</title>
      <link>https://magmax.org/blog/porque-java-mola/</link>
      <pubDate>Mon, 11 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/porque-java-mola/</guid>
      <description>
        
          &lt;p&gt;El otro día estuve viendo una presentación de Kinisoftware en la que dijo que &amp;ldquo;Java mola&amp;rdquo;. Al final no explica por qué &lt;em&gt;Java mola&lt;/em&gt;, así que he decidido hacerlo yo.&lt;/p&gt;
&lt;p&gt;Claro, que al final también diré por qué Java &lt;strong&gt;no&lt;/strong&gt; mola.&lt;/p&gt;
&lt;p&gt;Espero que Kinisoftware pueda leer esto y criticarlo con todas sus ganas. Kini: ¡va por ti!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Actualización 2012-06-28:&lt;/em&gt; Dándole la razón a Alejandro, confundí el polimorfismo con la sobrecarga de métodos. Corregido.
&lt;em&gt;Actualización 2012-06-20:&lt;/em&gt; Añado ejemplos de aplicaciones Java que utilizan XML como base, y mejoro la definición de Polimorfismo. También añado la desventaja de que no permite sobrecarga de operadores.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/java.png&#34;
         alt=&#34;Java&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;java-mola&#34;&gt;Java mola&lt;/h2&gt;
&lt;h3 id=&#34;tipado-estático&#34;&gt;Tipado estático&lt;/h3&gt;
&lt;p&gt;Lo primero que llama la atención de Java es que tiene tipado estático. Este tipado tiene sus ventajas: es más difícil romper algo y sirve como documentación.&lt;/p&gt;
&lt;p&gt;El tipado estático permite cosas como la:&lt;/p&gt;
&lt;h3 id=&#34;sobrecarga-de-métodos&#34;&gt;Sobrecarga de métodos&lt;/h3&gt;
&lt;p&gt;Ya que dos funciones con distintos parámetros de entrada pueden distinguirse por sus argumentos, ya sea en tipo o en número. De esta manera, la llamada se ajustará al método que se ajuste a los parámetros con los que se está llamando.&lt;/p&gt;
&lt;p&gt;El hecho de utilizar distintos parámetros para seleccionar el método a llamar evita el uso de condiciones innecesarias y facilita el principio de única responsabilidad: un método trabaja con un tipo de datos y otro método, con otro.&lt;/p&gt;
&lt;h3 id=&#34;polimorfismo&#34;&gt;Polimorfismo&lt;/h3&gt;
&lt;p&gt;Podemos sobreescribir un método en una clase hija, de manera que se comporte de forma diferente al padre.&lt;/p&gt;
&lt;h3 id=&#34;compilado&#34;&gt;Compilado&lt;/h3&gt;
&lt;p&gt;Al estar compilado, ya se han realizado una serie de comprobaciones que no es necesario realizar en tiempo de ejecución, como la validez de los argumentos. Esto debería redundar en un código más fiable y rápido.&lt;/p&gt;
&lt;h3 id=&#34;binario-y-empaquetado&#34;&gt;Binario y empaquetado&lt;/h3&gt;
&lt;p&gt;El código compilado es binario, lo que facilita la distribución del programa. Además, se puede empaquetar en JARs o WARs, que facilitan aún más su distribución.&lt;/p&gt;
&lt;h3 id=&#34;distribución&#34;&gt;Distribución&lt;/h3&gt;
&lt;p&gt;Existen numerosas herramientas para distribuir los paquetes, entre las que destacan Maven e Ivy. Así no es necesario tener que subir binarios ea nuestros repositorios.&lt;/p&gt;
&lt;p&gt;Estas mismas herramientas facilitan la organización del código.&lt;/p&gt;
&lt;h3 id=&#34;ides&#34;&gt;IDEs&lt;/h3&gt;
&lt;p&gt;Los IDEs existentes son de gran calidad. Además, el tipado estático facilita que los IDEs acierten con sus pronósticos.&lt;/p&gt;
&lt;h3 id=&#34;checkers&#34;&gt;Checkers&lt;/h3&gt;
&lt;p&gt;Hay una multitud de programas que permiten comprobar la bondad del código, ofreciéndonos alternativas óptimas.&lt;/p&gt;
&lt;h3 id=&#34;librerías&#34;&gt;Librerías&lt;/h3&gt;
&lt;p&gt;La librería estándar es muy amplia, pero hay numerosas librerías que permiten ampliarla aún más, como Apache Commons.&lt;/p&gt;
&lt;h3 id=&#34;orientado-a-web&#34;&gt;Orientado a web&lt;/h3&gt;
&lt;p&gt;Existen numerosos &lt;em&gt;frameworks&lt;/em&gt; para orientarlo a la web: struts, spring, JSF,&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;documentación&#34;&gt;Documentación&lt;/h3&gt;
&lt;p&gt;La documentación suele ser muy buena y, además, puede embeberse dentro del propio IDE.&lt;/p&gt;
&lt;h3 id=&#34;velocidad&#34;&gt;Velocidad&lt;/h3&gt;
&lt;p&gt;Contrariamente a lo que siempre se ha dicho de Java, es rápido. Muy rápido. Lo único que, a menudo, resulta algo más lento es la carga de la JVM.&lt;/p&gt;
&lt;p&gt;La versión 1.4 era terrible, pero utilizarla en las comparativas es como comparar cualquier otra cosa funcionando en un 386.&lt;/p&gt;
&lt;h3 id=&#34;sublenguajes&#34;&gt;Sublenguajes&lt;/h3&gt;
&lt;p&gt;Resulta facilísimo añadir otros lenguajes interpretados en nuestros programas Java. De hecho, Java tiene una API para permitir esto.&lt;/p&gt;
&lt;p&gt;Por esa razón proliferan tanto los intérpretes: IronPython, Groovy, Clojure,&amp;hellip; Java estándar incorpora un intérprete de JavaScript (Rinho).&lt;/p&gt;
&lt;h3 id=&#34;gestión-de-la-memoria&#34;&gt;Gestión de la memoria&lt;/h3&gt;
&lt;p&gt;Java realiza una eficiente recolección de memoria, con detección de ciclos y todo tipo de optimizaciones.&lt;/p&gt;
&lt;h2 id=&#34;java-no-mola&#34;&gt;Java no mola&lt;/h2&gt;
&lt;h3 id=&#34;tipado-estático-1&#34;&gt;Tipado estático&lt;/h3&gt;
&lt;p&gt;El tipado estático complica la generalidad. Para hacer una función genérica, necesitas crearte una clase por cada tipo de dato y una interfaz común a todo ello.&lt;/p&gt;
&lt;p&gt;Además, como sólo se permite una clase pública por fichero, esto supone a menudo la creación de, al menos, 4 ficheros (el principal, la interfaz y las dos especializaciones).&lt;/p&gt;
&lt;h3 id=&#34;sobrecarga-de-métodos-1&#34;&gt;Sobrecarga de métodos&lt;/h3&gt;
&lt;p&gt;Apesar de la posibilidad de sobrecargar métodos, ésta a veces falla, ya que se puede estar utilizando un objeto que encaja en distintos prototipos. Por ejemplo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Integer i&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;caller&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;   Object o &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Integer&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;5&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;   method&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;o&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// el compilador no sabrá decidir a cuál de los métodos llamar.
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;sobrecarga-de-operadores&#34;&gt;Sobrecarga de operadores&lt;/h3&gt;
&lt;p&gt;Sin embargo, Java no permite sobrecargar operadores. Esto es una lástima, ya que resulta mucho más gráfico ver un operador que una llamada a una función:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; b
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; b
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;intérprete&#34;&gt;Intérprete&lt;/h3&gt;
&lt;p&gt;No tiene un intérprete en línea. El intérprete en línea disponible, &lt;a href=&#34;http://beanshell.org/&#34;&gt;beanshell&lt;/a&gt;, no forma parte de la distribución de Java estándar. A menudo resulta muy útil para realizar ciertas pruebas o ejecutar pequeños programas.&lt;/p&gt;
&lt;h3 id=&#34;complejidad-inicial&#34;&gt;Complejidad inicial&lt;/h3&gt;
&lt;p&gt;Un programa mínimo tiene cierta complejidad: Necesitas una clase pública, un método estático, público, con una estructura y nombres fijos, que recibe por argumentos un array estático. Ésta es una de las razones por las que se critica tanto a Java como lenguaje para aprender a programar.&lt;/p&gt;
&lt;h3 id=&#34;ides-1&#34;&gt;IDEs&lt;/h3&gt;
&lt;p&gt;Resulta demasiado fácil caer en la trampa de los IDEs y utilizar la gran capacidad de éstos para todo. Así, a menudo olvidamos que estamos importando demasiadas clases, o complicando la arquitectura en exceso.&lt;/p&gt;
&lt;h3 id=&#34;distribución-1&#34;&gt;Distribución&lt;/h3&gt;
&lt;p&gt;La propia distribución de código puede volverse contra nosotros con facilidad, ya que es fácil crear dependencias cíclicas que programas como Maven no pueden resolver.&lt;/p&gt;
&lt;h3 id=&#34;compilación&#34;&gt;Compilación&lt;/h3&gt;
&lt;p&gt;El proceso de compilación es lento y, encima, no ofrece optimizaciones de código. Es algo que no termino de entender, ya que se supone que es uno de los grandes beneficios.&lt;/p&gt;
&lt;p&gt;Si bien es cierto que existen programas a parte que permiten esta optimización del &lt;em&gt;bytecode&lt;/em&gt;, no entiendo por qué tarda tanto el compilador en realizar una &amp;ldquo;simple&amp;rdquo; traducción de código.&lt;/p&gt;
&lt;h3 id=&#34;memoria&#34;&gt;Memoria&lt;/h3&gt;
&lt;p&gt;Aunque Java realiza muchas comprobaciones, hay algo que es indiscutible: los programas Java consumen muchos recursos.&lt;/p&gt;
&lt;h3 id=&#34;hosting&#34;&gt;Hosting&lt;/h3&gt;
&lt;p&gt;El hosting de programas Java suele requerir una máquina virtual completa, lo que hace que su precio no baje de los 60€.&lt;/p&gt;
&lt;p&gt;En los sistemas de pago por recursos, Java requiere muchos recursos para trabajar, por lo que también resulta algo caro.&lt;/p&gt;
&lt;h3 id=&#34;sencillez&#34;&gt;Sencillez&lt;/h3&gt;
&lt;p&gt;Casi todo se basa en XML. XML es sencillo para la máquina, pero requiere bastantes recursos para procesarse y no es sencillo para los seres humanos.&lt;/p&gt;
&lt;p&gt;Además, el simple hecho de abrir un archivo resulta terriblemente complejo. En las últimas versiones de Java han añadido el tipo &lt;code&gt;FileReader&lt;/code&gt;, que facilita esta labor, pero aún hay muchas APIs en las que se exige un &lt;code&gt;Stream&lt;/code&gt;, haciendo inviable el uso de el &lt;code&gt;FileReader&lt;/code&gt; y teniendo que utilizar modos de carga más antiguos.&lt;/p&gt;
&lt;p&gt;Otro tema son las fechas: es horrible trabajar con ellas.&lt;/p&gt;
&lt;p&gt;Y también están los getters/setters: ¿Hasta cuándo tendremos que lidiar con ellos? No entiendo por qué complicar una clase cuando puede ser muy sencilla.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Ejemplos de utilidades Java ampliamente extendidas que utilizan XML&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://struts.apache.org/2.3.4/docs/home.html&#34;&gt;Struts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://maven.apache.org/guides/getting-started/maven-in-five-minutes.html&#34;&gt;Maven&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ant.apache.org/ivy/history/latest-milestone/tutorial.html&#34;&gt;Ivy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ant.apache.org/manual/index.html&#34;&gt;Ant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tomcat.apache.org/&#34;&gt;TomCat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;obsoleto&#34;&gt;Obsoleto&lt;/h3&gt;
&lt;p&gt;Hay multitud de clases obsoletas en la API, sobre todo si nos metemos con las fechas. Además, hay muchas máquinas modernas que permiten ejecutar código Java, pero sólo soportan versiones antiguas, como la 1.4 ó 1.5.&lt;/p&gt;
&lt;h3 id=&#34;incompetencia&#34;&gt;Incompetencia&lt;/h3&gt;
&lt;p&gt;Aunque existen grandísimos profesionales en el mundo de Java, parece que todo es tan sencillo que se favorece la incompetencia. Quizá por eso las grandes corporaciones prefieren Java a otros lenguajes.&lt;/p&gt;
&lt;p&gt;Java permite un uso muy apropiado, mediante la aplicación de patrones, reutilización, etc. Sin embargo las grandes corporaciones prefiren tener monos picando código y parece que Java es apropiado para este uso.&lt;/p&gt;
&lt;p&gt;Por favor, si usáis Java, no seáis monos.&lt;/p&gt;
&lt;h3 id=&#34;ficheros&#34;&gt;Ficheros&lt;/h3&gt;
&lt;p&gt;Es terrible cómo aumenta la cantidad de ficheros cuando estamos programando en Java. A menudo resulta difícil seguir tantos archivos si no es con un IDE.&lt;/p&gt;
&lt;p&gt;También es común que los desarrolladores traten de sobrecargar de funcionalidad una clase sólo por evitar tener que crear otro archivo. De verdad: la orientación a objetos se entiende de verdad cuando se aplica el principio de única responsabilidad.&lt;/p&gt;
&lt;h2 id=&#34;fin&#34;&gt;Fin&lt;/h2&gt;
&lt;p&gt;Son muchas las razones para usar y para no usar Java. Aquí tan sólo he tratado de recopilarlas. Seguramente me deje muchas de ellas en el tintero.&lt;/p&gt;
&lt;p&gt;Si se te ocurre algo, por favor, coméntalo. No te preocupes si estás tirando piedras sobre tu propio tejado: siempre es bueno conocer el alcance de tus herramientas.&lt;/p&gt;
&lt;p&gt;Y es precisamente por esta razón por la que el título del artículo de la semana que viene será &lt;a href=&#34;https://magmax.org/blog/porque-python-mola/&#34;&gt;por qué Python mola&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
