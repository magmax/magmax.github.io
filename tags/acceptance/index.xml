<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>acceptance on El blog de MagMax</title>
    <link>https://magmax.org/tags/acceptance/</link>
    <description>Recent content in acceptance on El blog de MagMax</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 31 Aug 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://magmax.org/tags/acceptance/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tests de aceptación con Fitnesse</title>
      <link>https://magmax.org/blog/tests-de-aceptacion-con-fitnesse/</link>
      <pubDate>Mon, 31 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/tests-de-aceptacion-con-fitnesse/</guid>
      <description>
        
          &lt;p&gt;En un post anterior escribí sobre &lt;code&gt;cómo escribir tests de aceptación con el framework Robot&lt;/code&gt;. En esta ocasión voy a escribir sobre otro &lt;em&gt;framework&lt;/em&gt; con el mismo fin: &lt;a href=&#34;https://www.fitnesse.org/&#34;&gt;Fitnesse&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.fitnesse.org/&#34;&gt;Fitnesse&lt;/a&gt; es bastante diferente de &lt;a href=&#34;https://robotframework.org&#34;&gt;Robot&lt;/a&gt;. Para empezar, porque no es sólo un &lt;em&gt;framework&lt;/em&gt;, sino también un &lt;em&gt;wiki&lt;/em&gt;&amp;hellip; Podríamos decir que es una &lt;strong&gt;plataforma de testing&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Además, permite realizar los &lt;em&gt;fixtures&lt;/em&gt; en &lt;a href=&#34;https://www.fitnesse.org/PlugIns#slim&#34;&gt;casi cualquier lenguaje&lt;/a&gt;. En esta ocasión veremos sólo Java.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/test.jpg&#34;
         alt=&#34;Testing&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;preparando-el-entorno&#34;&gt;Preparando el entorno&lt;/h2&gt;
&lt;p&gt;Lo primero es descargarse &lt;a href=&#34;https://www.fitnesse.org/&#34;&gt;Fitnesse&lt;/a&gt;. Éste consta de &lt;a href=&#34;https://www.fitnesse.org/FitNesseDownload&#34;&gt;un único archivo .jar&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;wget &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.fitnesse.org/fitnesse-standalone.jar?responder=releaseDownload&amp;amp;release=20150814&amp;#34;&lt;/span&gt; -O fitnesse-standalone.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Como es evidente, necesitaremos tener instalado Java. La versión dependerá: Si vamos a crear los &lt;em&gt;fixtures&lt;/em&gt; en Java, necesitaremos el JDK, mientras que si los vamos a crear en otro lenguaje nos basta con el JRE.&lt;/p&gt;
&lt;p&gt;Ya podemos lanzarlo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;java -jar fitnesse-standalone.jar -p &lt;span style=&#34;color:#ae81ff&#34;&gt;9000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Lo que levantará un servidor web con el &lt;em&gt;wiki&lt;/em&gt; en el puerto 9000 (por defecto usaría el 80). Conectaos y navegad. Ahí está toda la documentación. Veréis que en algunas páginas se muestra un botón en la parte superior del tipo &amp;ldquo;Test&amp;rdquo; o &amp;ldquo;Suite&amp;rdquo;&amp;hellip; Si lo pulsáis, se lanzan los tests de esa página o de todas las inferiores, respectivamente.&lt;/p&gt;
&lt;p&gt;La primera vez que se ejecute descomprimirá todo el &lt;em&gt;wiki&lt;/em&gt; para que esté disponible para su edición.&lt;/p&gt;
&lt;h3 id=&#34;ejecutando-desde-línea-de-órdenes&#34;&gt;Ejecutando desde línea de órdenes&lt;/h3&gt;
&lt;p&gt;También se pueden lanzar los tests en línea de órdenes. Para ello se utiliza la opción &lt;code&gt;-c&lt;/code&gt; y la ruta parcial a lanzar. A menudo será interesante añadir también &lt;code&gt;&amp;amp;format=text&lt;/code&gt; para poder verlo bonito en modo texto:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Lanzar todos los tests:&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;java -jar fitnesse-standalone.jar -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FitNesse.SuiteAcceptanceTests?suite&amp;amp;format=text&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Lanzar sólo los tests de comentarios:&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;java -jar fitnesse-standalone.jar -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FitNesse.SuiteAcceptanceTests.SuiteWidgetTests.TestComment?suite&amp;amp;format=text&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Fitnesse lanzará todo lo necesario para terminar devolviéndonos el resultado.&lt;/p&gt;
&lt;h2 id=&#34;cómo-funciona&#34;&gt;Cómo funciona&lt;/h2&gt;
&lt;p&gt;Es importante tener claro cómo funciona &lt;a href=&#34;https://www.fitnesse.org/&#34;&gt;Fitnesse&lt;/a&gt;, ya que esto condiciona hacer bien o mal los tests.&lt;/p&gt;
&lt;p&gt;Por una parte está el &lt;em&gt;wiki&lt;/em&gt;, que ya hemos visto y que tiene poco que explicar. Las páginas se pueden editar directamente desde él.&lt;/p&gt;
&lt;p&gt;Por otro lado, el servidor de pruebas. &lt;a href=&#34;https://www.fitnesse.org/&#34;&gt;Fitnesse&lt;/a&gt; lanzará uno por cada Suite a probar, y puede estar implementado en cualquier lenguaje. Éste se encargará de manejar las &lt;em&gt;fixtures&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Finalmente, está el procesador, que puede ser &lt;a href=&#34;https://www.fitnesse.org/FitNesse.UserGuide.WritingAcceptanceTests.FitFramework&#34;&gt;Fit&lt;/a&gt; o &lt;a href=&#34;https://www.fitnesse.org/FitNesse.UserGuide.WritingAcceptanceTests.SliM&#34;&gt;Slim&lt;/a&gt;. Ambos son dos procesadores HTML que extraen los tests de las páginas HTML, los ejecutan en el servidor de pruebas y generan el HTML resultante. Dado que &lt;a href=&#34;https://www.fitnesse.org/FitNesse.UserGuide.WritingAcceptanceTests.SliM&#34;&gt;Slim&lt;/a&gt; es la evolución de &lt;a href=&#34;https://www.fitnesse.org/FitNesse.UserGuide.WritingAcceptanceTests.FitFramework&#34;&gt;Fit&lt;/a&gt;, me centraré sólo en &lt;a href=&#34;https://www.fitnesse.org/FitNesse.UserGuide.WritingAcceptanceTests.SliM&#34;&gt;Slim&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.fitnesse.org/FitNesse.UserGuide.WritingAcceptanceTests.SliM&#34;&gt;Slim&lt;/a&gt; permite definir variables y tablas. Para ello utiliza un lenguaje especial en el &lt;em&gt;wiki&lt;/em&gt;. Por ejemplo, para definir una variable usa:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;define TEST_SYSTEM &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;slim&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Así se define la variable &lt;code&gt;TEST_SYSTEM&lt;/code&gt; con el valor &lt;code&gt;slim&lt;/code&gt;. Esta variable es muy importante, ya que define el sistema de test a utilizar en la &lt;em&gt;Suite&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para crear nuevas páginas en el wiki, basta con editar una página y escribir una palabra &lt;em&gt;camelcase&lt;/em&gt; (&amp;ldquo;EstoEsUnEjemplo&amp;rdquo;); al guardar nos aparecerá el texto renderizado y una interrogación (&amp;ldquo;Esto Es Un Ejemplo [?]&amp;quot;). Al pulsar sobre ese link, se creará la página enlazada. Así de simple.&lt;/p&gt;
&lt;h3 id=&#34;tablas&#34;&gt;Tablas&lt;/h3&gt;
&lt;p&gt;Las tablas pueden definir distintas cosas, desde las librerías a importar a los propios tests. En esta ocasión nos centraremos en dos: &lt;a href=&#34;https://www.fitnesse.org/FitNesse.UserGuide.WritingAcceptanceTests.SliM.ImportTable&#34;&gt;Import Table&lt;/a&gt; y &lt;a href=&#34;https://www.fitnesse.org/FitNesse.UserGuide.WritingAcceptanceTests.SliM.DecisionTable&#34;&gt;Decision Table&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hay distintos formatos&amp;hellip; Todos basados en &lt;abbr title=&#34;Comma Separated Values&#34;&gt;CSV&lt;/abbr&gt;
 o
&lt;abbr title=&#34;Tab Separated Values&#34;&gt;TSV&lt;/abbr&gt;
. Aquí utilizaré uno que parece una tabla, separando los campos por &lt;em&gt;pipes&lt;/em&gt; (&amp;quot;|&amp;quot;).&lt;/p&gt;
&lt;h4 id=&#34;import-table&#34;&gt;Import Table&lt;/h4&gt;
&lt;p&gt;Se utiliza para importar librerías:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;|import|
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;|example.jar|
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;|org.magmax|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;La primera línea describe el tipo de tabla, mientras que el resto expone las librerías a exportar. Esto generará HTML:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;table&lt;/span&gt;&amp;gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;	&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;tbody&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;tr&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;slimRowTitle&amp;#34;&lt;/span&gt;&amp;gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;		&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;import&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;	&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;	&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;tr&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;slimRowColor0&amp;#34;&lt;/span&gt;&amp;gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;		&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;example.jar&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;	&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;	&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;tr&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;slimRowColor1&amp;#34;&lt;/span&gt;&amp;gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;		&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;org.magmax&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;	&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;tbody&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;table&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;decision-table&#34;&gt;Decision Table&lt;/h4&gt;
&lt;p&gt;Una tabla de Decisión nos permite ejecutar &lt;em&gt;fixtures&lt;/em&gt;. Veremos aquí lo básico y más adelante tendremos ejemplos reales:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;|Multiplication|
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;|factor|factor|multiply?|
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;|4|2|8|
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;|44|12|8|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Las &lt;a href=&#34;https://www.fitnesse.org/FitNesse.UserGuide.WritingAcceptanceTests.SliM.DecisionTable&#34;&gt;Decision Table&lt;/a&gt; son las tablas por defecto, así que no es necesario indicarlo. La primera línea indica la &lt;strong&gt;clase&lt;/strong&gt; a utilizar como &lt;em&gt;fixture&lt;/em&gt;; la segunda indica qué &lt;strong&gt;métodos&lt;/strong&gt; invocar; a partir de la tercera muestra los valores a utilizar para cada método.&lt;/p&gt;
&lt;p&gt;La columna que muestra una interrogación implica&lt;/p&gt;
&lt;p&gt;Se creará una instancia de la clase indicada por cada fila. Dicho de otro modo: cada fila a partir de la tercera es un &lt;strong&gt;test&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;fixtures&#34;&gt;Fixtures&lt;/h2&gt;
&lt;p&gt;Finalmente llegamos a las &lt;em&gt;Fixtures&lt;/em&gt;, que son el corazón de todo. El problema aquí es que dependen del lenguaje, así que veremos opciones en Java, cada cual con sus ventajas e inconvenientes.&lt;/p&gt;
&lt;h3 id=&#34;java&#34;&gt;Java&lt;/h3&gt;
&lt;p&gt;Una &lt;em&gt;Fixture&lt;/em&gt; Java no es más que una clase con unos métodos. Por ejemplo, para probar la clase anterior necesitaremos la clase &lt;code&gt;Multiplication&lt;/code&gt; con los métodos &lt;code&gt;void setFactor(Object a)&lt;/code&gt; y &lt;code&gt;Object multiply()&lt;/code&gt;. Todas las columnas que no acaben con interrogación buscarán el método &lt;code&gt;set&lt;/code&gt; correspondiente.&lt;/p&gt;
&lt;p&gt;Veamos un ejemplo de implementación (archivo &lt;code&gt;java/multiplication.java&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; org.magmax&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.List&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Multiplication&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; factors &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;();&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setFactor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;        factors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;multiply&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Integer i&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; factors&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;            result &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Es fácil de explicar: Cada objeto se guarda una lista de factores que se multiplican en el método &lt;code&gt;multiply&lt;/code&gt;. Podemos compilarla:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;javac multiplication.java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y crear el wiki necesario:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;!define TEST_SYSTEM {slim}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;!path java
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;|import|
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;|example.jar|
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;|org.magmax|
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;|Multiplication|
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;|factor|factor|multiply?|
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;|4|2|8|
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;|44|12|8|
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;|Multiplication|
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;|factor|factor|factor|multiply?|
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;|2|2|2|8|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Obteniendo algo como lo siguiente:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/fitnesse/fitnesse_example_001.png&#34;
         alt=&#34;Ejemplo de salida de Fitnesse&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;En este ejemplo podemos ver varios tests que pasan y uno que falla, debido a que el test está mal especificado.&lt;/p&gt;
&lt;h3 id=&#34;python&#34;&gt;Python&lt;/h3&gt;
&lt;p&gt;Pues&amp;hellip; Sinceramente, ha sido un verdadero dolor.&lt;/p&gt;
&lt;p&gt;La opción de usar &lt;a href=&#34;https://www.fitnesse.org/FitNesse.UserGuide.WritingAcceptanceTests.FitFramework&#34;&gt;Fit&lt;/a&gt; es sencilla, pero claro, carecemos de la mayor parte de las características molonas. Basta con instalar el paquete &lt;a href=&#34;https://pypi.python.org/pypi/PyFIT&#34;&gt;pyfit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para usar &lt;a href=&#34;https://www.fitnesse.org/FitNesse.UserGuide.WritingAcceptanceTests.SliM&#34;&gt;Slim&lt;/a&gt; es necesario instalar el paquete &lt;a href=&#34;https://github.com/gbremer/waferslim&#34;&gt;waferslim&lt;/a&gt;, cuyo paquete pip simplemente no funciona. Tras no pocos problemas, tanto con python 2.7 como con python 3.4, he tenido que añadir algún parche que otro y &lt;em&gt;forkear&lt;/em&gt; una rama que no es la oficial. Así que recomiendo optar por la solución fácil:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;En el mismo directorio en el que tengáis el &lt;code&gt;jar&lt;/code&gt; de &lt;a href=&#34;https://www.fitnesse.org/&#34;&gt;Fitnesse&lt;/a&gt;, clonad mi repositorio: &lt;code&gt;git clone https://github.com/magmax/waferslim.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Cread un &lt;em&gt;wiki&lt;/em&gt; nuevo con este contenido (llamadlo, por ejemplo, &lt;code&gt;EjemploPython&lt;/code&gt;):&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;!define TEST_SYSTEM {slim}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;!path .:fixtures
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;!define COMMAND_PATTERN {python -m waferslim.server -s %p -p }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;|Import|
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;|multiplication.py|
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;|Multiplication|
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;|factor|factor|multiply?|
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;|4|2|8|
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;|44|12|8|
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;|Multiplication|
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;|factor|factor|factor|multiply?|
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;|2|2|2|8|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Ahora cread el archivo &lt;code&gt;fixtures/multiplication.py&lt;/code&gt;, que es el que hemos importado antes:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Multiplication&lt;/span&gt;(object):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;    factors &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setFactor&lt;/span&gt;(self, f):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(int(f))
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;multiply&lt;/span&gt;(self):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;        result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factors:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;            result &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; x
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Ejecutad los tests&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Lejos de estar perfecto y mosqueado por usar un entorno de tests que no tiene tests&amp;hellip; Pero por lo menos &amp;ldquo;parece&amp;rdquo; que funciona.&lt;/p&gt;
&lt;h2 id=&#34;ventajas-e-inconvenientes&#34;&gt;Ventajas e inconvenientes&lt;/h2&gt;
&lt;p&gt;Suponiendo que &lt;a href=&#34;https://www.fitnesse.org/&#34;&gt;Fitnesse&lt;/a&gt; funcionara con Python, ambos tendrían sus pros y sus contras:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;em&gt;LANGUAGE&lt;/em&gt;&lt;/th&gt;
&lt;th&gt;&lt;em&gt;PROS&lt;/em&gt;&lt;/th&gt;
&lt;th&gt;&lt;em&gt;CONS&lt;/em&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;Todo Java; no es necesario instalar nada&lt;/td&gt;
&lt;td&gt;Hay que compilar las fixtures&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;No hay que estar compilando las fixtures. Requiere un intérprete python y hay que estar instalando librerías  adicionales&lt;/td&gt;
&lt;td&gt;Requiere un intérpreter python y no hay que estar instalando librerías adicionales.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;conclusión&#34;&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://robotframework.org&#34;&gt;Robot&lt;/a&gt; no es el único &lt;em&gt;framework&lt;/em&gt; para hacer tests de aceptación, y puede ser muy buena opción en algunos casos. &lt;a href=&#34;https://www.fitnesse.org/&#34;&gt;Fitnesse&lt;/a&gt; es otra opción bastante buena que admite muchas más opciones que &lt;a href=&#34;https://robotframework.org&#34;&gt;Robot&lt;/a&gt;. Estas opciones pueden no ser necesarias, lo que redunda en complejidad innecesaria.&lt;/p&gt;
&lt;p&gt;Para tests en Python, &lt;a href=&#34;https://robotframework.org&#34;&gt;Robot&lt;/a&gt; es nativo; sin embargo, &lt;a href=&#34;https://www.fitnesse.org/&#34;&gt;Fitnesse&lt;/a&gt; es más versátil y admite casi cualquier lenguaje.&lt;/p&gt;
&lt;p&gt;Metiéndonos en el lenguaje, &lt;a href=&#34;https://robotframework.org&#34;&gt;Robot&lt;/a&gt; es más orientado al script, mientras que &lt;a href=&#34;https://www.fitnesse.org/&#34;&gt;Fitnesse&lt;/a&gt; genera tablas bonitas y fáciles de enseñar a &amp;ldquo;los jefes&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://robotframework.org&#34;&gt;Robot&lt;/a&gt; tiene otras ventajas, como el lenguaje intermedio de resultados. Se puede utilizar para operaciones avanzadas: Reintentar tests fallidos, paralelizar tests&amp;hellip; Estas opciones son más complejas con &lt;a href=&#34;https://www.fitnesse.org/&#34;&gt;Fitnesse&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Próximamente hablaré sobre &lt;a href=&#34;https://concordion.org/&#34;&gt;Concordion&lt;/a&gt;. Aunque &lt;a href=&#34;https://magmax.org/blog/concordion/&#34;&gt;ya escribí algo anteriormente sobre Concordion&lt;/a&gt;, espero terminar esta serie de artículos con otro más sobre este framework, entrando en mucho mayor detalle.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Tests de aceptación con Robot</title>
      <link>https://magmax.org/blog/tests-de-aceptacion-con-robot/</link>
      <pubDate>Thu, 13 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/tests-de-aceptacion-con-robot/</guid>
      <description>
        
          &lt;p&gt;Como bien sabéis, las pruebas es algo que me inquieta bastante. Y creo que las pruebas de aceptación son especialmente importantes para asegurar la calidad final del producto en su conjunto, así como para dirigir el desarrollo.&lt;/p&gt;
&lt;p&gt;Hace ya algún tiempo que escribí sobre &lt;a href=&#34;https://bitbucket.org/DavidVilla/atheist&#34;&gt;Atheist&lt;/a&gt; en artículos como &lt;a href=&#34;https://magmax.org/blog/atheist-c/&#34;&gt;Atheist: Probando módulos C&lt;/a&gt;, &lt;a href=&#34;https://magmax.org/blog/atheist-no-seas-credulo/&#34;&gt;Atheist, No seas crédulo ¡¡Prueba!!&lt;/a&gt; y &lt;a href=&#34;https://magmax.org/blog/selenium-atheist/&#34;&gt;Pruebas web: selenium + atheist&lt;/a&gt;. &lt;a href=&#34;https://bitbucket.org/DavidVilla/atheist&#34;&gt;Atheist&lt;/a&gt; es un &lt;em&gt;framework&lt;/em&gt; estupendo, pero quizá muy poco utilizado.&lt;/p&gt;
&lt;p&gt;En este caso vamos a ver otro &lt;em&gt;framework&lt;/em&gt; diferente y muy utilizado, llamado &lt;a href=&#34;https://robotframework.org&#34;&gt;Robot&lt;/a&gt; y traído de la mano de Google.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/test.jpg&#34;
         alt=&#34;Testing&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;qué-es-robotframework&#34;&gt;¿Qué es RobotFramework?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://robotframework.org&#34;&gt;RobotFramework&lt;/a&gt; consiste en una serie de reglas para crear archivos de especificación similares a &lt;a href=&#34;https://rspec.info/&#34;&gt;RSpec&lt;/a&gt;, al menos en cuanto a intención. En &lt;a href=&#34;https://robotframework.org&#34;&gt;Robot&lt;/a&gt; los test están especificados en tablas.&lt;/p&gt;
&lt;p&gt;La intención es la siguiente:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Crear un archivo &lt;code&gt;.txt&lt;/code&gt;, &lt;code&gt;.robot&lt;/code&gt; o&amp;hellip; bueno, admite varios formatos, con una o varias tablas de tests.&lt;/li&gt;
&lt;li&gt;Si fuera necesario, crear un archivo Python o Java con nuevas &lt;strong&gt;keywords&lt;/strong&gt; que poder utilizar en las tablas.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Y ya está.&lt;/p&gt;
&lt;p&gt;¿Sencillo? Justamente de eso se trata.&lt;/p&gt;
&lt;h2 id=&#34;ejemplo&#34;&gt;Ejemplo&lt;/h2&gt;
&lt;p&gt;Y, sin más, vamos con un ejemplo.&lt;/p&gt;
&lt;p&gt;Supongamos que tenemos un pequeño programa que, dado un número, devuelve el &lt;a href=&#34;https://es.wikipedia.org/wiki/Sucesi%C3%B3n_de_Fibonacci&#34;&gt;Fibonacci&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fibo&lt;/span&gt;(n):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; fibo(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; fibo(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(fibo(int(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])))
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;    main()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lo he hecho en Python, pero realmente daría igual el lenguaje.&lt;/p&gt;
&lt;p&gt;Vamos a comprobar que funciona. Para ello, creamos el directorio &amp;ldquo;tests&amp;rdquo; y dentro vamos a crear una &lt;strong&gt;suite&lt;/strong&gt;. Crear una &lt;em&gt;suite&lt;/em&gt; es muy sencillo: todo directorio y todo archivo es ya una &lt;strong&gt;suite&lt;/strong&gt;. Dentro meteremos un test, que consiste en una tabla:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;*** Settings ***
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;Library    Process
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;*** Test Cases ***
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;Fibo of 1 is 1
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;    ${result} =       Run Process         ./fibonacci.py     1
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;    Should Be Equal   ${result.stdout}    1
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt;    Should Be Equal As Integers      ${result.rc}   0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://robotframework.org&#34;&gt;Robot&lt;/a&gt; admite varios formatos de archivo; en este caso he optado por la opción &lt;a href=&#34;https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#id427&#34;&gt;texto plano&lt;/a&gt;. Luego veremos otros formatos.&lt;/p&gt;
&lt;p&gt;Lo primero que podemos ver es la tabla &lt;code&gt;Settings&lt;/code&gt;, que entre otras cosas permite cargar una librería. Para ello usamos la &lt;em&gt;keyword&lt;/em&gt; &lt;code&gt;Library&lt;/code&gt; y, separado por más de 2 espacios, el nombre de la librería a utilizar.&lt;/p&gt;
&lt;p&gt;A continuación está la tabla &lt;code&gt;Test Cases&lt;/code&gt;, donde se definen los casos de uso. Veréis que el formato es sencillo: en la primera fila está el nombre del test, y cada una de las acciones están ligeramente indentadas.&lt;/p&gt;
&lt;p&gt;En la primera acción se asigna a la variable &lt;code&gt;result&lt;/code&gt; el resultado de la acción, que consiste en invocar la &lt;strong&gt;keyword&lt;/strong&gt; &lt;code&gt;Run Process&lt;/code&gt; con los parámetros &lt;code&gt;.\fibonacci.py&lt;/code&gt; y &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;En la segunda acción, se comprueba que el valor de &lt;code&gt;result.output&lt;/code&gt; es &lt;code&gt;1&lt;/code&gt;, usando la &lt;strong&gt;keyword&lt;/strong&gt; &lt;code&gt;Should be equal&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;En la tercera acción, se comprueba que el valor de &lt;code&gt;result.rc&lt;/code&gt; (el valor de retorno) es &lt;code&gt;1&lt;/code&gt;, usando la &lt;strong&gt;keyword&lt;/strong&gt; &lt;code&gt;Should be equal As Integers&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Si ahora ejecutamos el test, obtendremos lo siguiente:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;$ pybot tests/example1.robot
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;==============================================================================&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;Example1
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;==============================================================================&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;Fibo of &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; is &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;                                                        | PASS |
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;------------------------------------------------------------------------------
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;Example1                                                              | PASS |
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; critical test, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; passed, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; failed
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; test total, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; passed, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; failed
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;==============================================================================&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;Output:  /home/miguel/Sandbox/python/robot/output.xml
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;Log:     /home/miguel/Sandbox/python/robot/log.html
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;Report:  /home/miguel/Sandbox/python/robot/report.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Como vemos, el test pasa, y nos ha dejado la salida en los archivos &lt;code&gt;output.xml&lt;/code&gt;, &lt;code&gt;log.html&lt;/code&gt; y &lt;code&gt;report.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Podemos uno de estos archivos:&lt;/p&gt;
&lt;div style=&#34;margin-top:10px;&#34;&gt;
  &lt;iframe width=&#34;100%&#34; height=&#34;315&#34; src=&#34;https://magmax.org/examples/python-robot/01/output/report.html&#34; frameborder=&#34;1&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h3 id=&#34;tablas-como-tablas&#34;&gt;Tablas como tablas&lt;/h3&gt;
&lt;p&gt;A lo mejor resulta difícil ver las tablas en este formato, así que vamos a probar a cambiarlo. El test va a ser prácticamente igual:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;| *Setting* | *Value* |
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;| Library   | Process |
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;| *Test Case*    | *Action*                    | *Argument*        |
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;| Fibo of 2 is 1 | ${result} =                 | Run Process       | ./fibonacci.py | 2
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;|                | Should Be Equal             | ${result.stdout}  | 1
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt;|                | Should Be Equal As Integers | ${result.rc}      | 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Como vemos, ahora el separador es el símbolo &lt;code&gt;|&lt;/code&gt;. Por lo demás, básicamente lo mismo.&lt;/p&gt;
&lt;h3 id=&#34;otros-formatos&#34;&gt;Otros formatos&lt;/h3&gt;
&lt;p&gt;Hay otros formatos, como HTML, RST (que no recomiendo, ya que internamente lo convierte a HTML, lo que puede ser más lento, y requiere la librería docutils), TSV, &amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;ampliando-el-lenguaje&#34;&gt;Ampliando el lenguaje&lt;/h2&gt;
&lt;p&gt;Como vemos, es básicamente un lenguaje de programación, en el que las instrucciones son instrucciones como &lt;code&gt;Run Process&lt;/code&gt;, &lt;code&gt;Should Be Equal&lt;/code&gt; o &lt;code&gt;Should Be Equal As Integers&lt;/code&gt;. Pero&amp;hellip; ¿Y si queremos usar nuestra propia instrucción?&lt;/p&gt;
&lt;p&gt;Pues es sencillo. Basta con crear un archivo Python o Java (este último no lo explicaré) con la función a utilizar:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check_fibonacci_result&lt;/span&gt;(result, expected):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hola&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Y ya podemos utilizarla (ojo a la separación de palabras y el uso de mayúsculas y minúsculas):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Setting&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Value&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Library   &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;{EXECDIR}&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;lib&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;fibotest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Test Case&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Action&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;               &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Argument&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;expected&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Fibo of &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Check Fibonacci Result &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Y así podemos crear nuestro propio lenguaje de tests.&lt;/p&gt;
&lt;h3 id=&#34;librerías-para-ampliar-el-lenguaje&#34;&gt;Librerías para ampliar el lenguaje&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://robotframework.org&#34;&gt;RobotFramework&lt;/a&gt; viene con &lt;a href=&#34;https://code.google.com/p/robotframework/wiki/TestLibraries&#34;&gt;algunas librerías&lt;/a&gt; para permitirnos realizar las operaciones más típicas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tareas relacionadas con el sistema operativo&lt;/li&gt;
&lt;li&gt;Posibilidad de capturar el escritorio&lt;/li&gt;
&lt;li&gt;Conexión mediante &lt;em&gt;telnet&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Modo interactivo, en el que se solicita información al usuario&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Así mismo, hay otras librerías que permiten realizar otras operaciones comunes, como utilizar &lt;a href=&#34;https://www.seleniumhq.org/&#34;&gt;Selenium&lt;/a&gt; o &lt;a href=&#34;https://www.android.com/&#34;&gt;Android&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;generación-de-informes&#34;&gt;Generación de informes&lt;/h2&gt;
&lt;p&gt;Algo interesante es saber cómo hace &lt;a href=&#34;https://robotframework.org&#34;&gt;Robot&lt;/a&gt; para generar los informes. Lo primero que hace es crear un archivo &lt;strong&gt;output.xml&lt;/strong&gt; con los resultados de la ejecución. Este archivo se postprocesa para generar los archivos &lt;strong&gt;.html&lt;/strong&gt; resultantes.&lt;/p&gt;
&lt;p&gt;Estos pasos ofrecen una posibilidad adicional: La de utilizar la información del archivo &lt;strong&gt;output.xml&lt;/strong&gt; como reentrada. Así, utilizando &lt;strong&gt;rebot&lt;/strong&gt; en lugar de &lt;strong&gt;pytbot&lt;/strong&gt; podemos volver a ejecutar los tests fallidos, lo que parcheará el archivo &lt;strong&gt;output.xml&lt;/strong&gt; como si siempre hubieran funcionado, evitando así los tests inestables.&lt;/p&gt;
&lt;h2 id=&#34;conclusión&#34;&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://robotframework.org&#34;&gt;RobotFramework&lt;/a&gt; es una buena opción a la hora de elegir un sistema de pruebas de aceptación. Además está soportado por Google, lo que siempre es un extra.&lt;/p&gt;
&lt;p&gt;Sin embargo, los informes resultan algo feos y no es sencillo cambiarles el estilo o embeberlos en otra página más grande sin usar &lt;code&gt;iframes&lt;/code&gt;. Además, son poco adecuados para presentárselos a los ejecutivos o al cliente, ya que son más técnicos que otra cosa.&lt;/p&gt;
&lt;p&gt;Un punto positivo es lo de poder escribir los &lt;em&gt;fixtures&lt;/em&gt; tanto en Python como en Java. La posibilidad de usar distintos lenguajes en este caso siempre es algo que puede venir bien.&lt;/p&gt;
&lt;p&gt;En un próximo artículo hablaremos de &lt;a href=&#34;https://www.fitnesse.org/&#34;&gt;Fitnesse&lt;/a&gt;, otra solución para tests de aceptación.&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
