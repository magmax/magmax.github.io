<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>MagMax Blog (java testing)</title><link>http://magmax.org/</link><description></description><atom:link href="http://magmax.org/categories/java-testing.xml" rel="self" type="application/rss+xml"></atom:link><language>es</language><lastBuildDate>Tue, 08 Dec 2020 17:56:20 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Unit tests en Java (II)</title><link>http://magmax.org/blog/java-unit-test-2/</link><dc:creator>Miguel Ángel García</dc:creator><description>&lt;div&gt;&lt;p&gt;En el último artículo comencé a explicar algunas cosas sobre los &lt;a class="reference external" href="http://magmax.org/blog/java-unit-test"&gt;unit tests en Java&lt;/a&gt;. Este artículo comienza donde lo dejamos en el anterior.&lt;/p&gt;
&lt;p&gt;En este caso veremos cómo emplear las TestSuites para poder evolucionar el modelo anterior.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://magmax.org/blog/java-unit-test-2/" class="btn btn-default"&gt;Leer más…&lt;/a&gt; (quedan 3 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>java testing</category><category>testing</category><guid>http://magmax.org/blog/java-unit-test-2/</guid><pubDate>Mon, 16 Jul 2012 00:00:00 GMT</pubDate></item><item><title>Unit tests en Java</title><link>http://magmax.org/blog/java-unit-test/</link><dc:creator>Miguel Ángel García</dc:creator><description>&lt;div&gt;&lt;p&gt;El otro día me di cuenta de que no había escrito ningún artículo sobre tests unitarios en Java. ¡Eso hay que arreglarlo!&lt;/p&gt;
&lt;p&gt;Tengo artículos más complejos pero, a veces, volver a la base ayuda a tener una mejor visión de conjunto. Además, nunca se sabe lo que se puede aprender de lo básico.&lt;/p&gt;
&lt;p&gt;Aprovecharé para hacer incapié en las características de los buenos tests.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Actualización 2012-07-11&lt;/em&gt;: Añado árbol de directorios y cabeceras indicando a qué archivo pertenecen.
&lt;em&gt;Actualización 2012-07-13&lt;/em&gt;: Gracias a un comentario de David Marín, descubro que la parte de los proveedores de datos es completamente errónea y la arreglo.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://magmax.org/blog/java-unit-test/" class="btn btn-default"&gt;Leer más…&lt;/a&gt; (quedan 6 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>java testing</category><category>testing</category><guid>http://magmax.org/blog/java-unit-test/</guid><pubDate>Mon, 09 Jul 2012 00:00:00 GMT</pubDate></item><item><title>JBehave y JUnit</title><link>http://magmax.org/blog/jbehave-junit/</link><dc:creator>Miguel Ángel García</dc:creator><description>&lt;div&gt;&lt;p&gt;No hace tanto, escribí el artículo "JBehave":link://slug/jbehave. El problema es que era necesario lanzar cada historia por separado.&lt;/p&gt;
&lt;p&gt;Este artículo es un pequeño parche, con la intención de permitir que JUnit encuentre nuestros tests.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://magmax.org/blog/jbehave-junit/" class="btn btn-default"&gt;Leer más…&lt;/a&gt; (quedan 1 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>java testing</category><category>jbehave</category><category>junit</category><guid>http://magmax.org/blog/jbehave-junit/</guid><pubDate>Wed, 20 Jun 2012 00:00:00 GMT</pubDate></item><item><title>Pruebas Unitarias: Proveedores de datos</title><link>http://magmax.org/blog/dataproviders/</link><dc:creator>Miguel Ángel García</dc:creator><description>&lt;div&gt;&lt;p&gt;A menudo, cuando realizamos pruebas unitarias de algún problema algorítmico, nos encontramos con muchos tests iguales. Tan solo cambia la entrada y el resultado.&lt;/p&gt;
&lt;p&gt;La mayor parte de los XUnit ya se han dado cuenta de esto y por eso han implementado soluciones. El problema es que no se han puesto de acuerdo en la nomenclatura ni en la implementación.&lt;/p&gt;
&lt;p&gt;Veremos aquí aproximaciones en Java, PHP y Python.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://magmax.org/blog/dataproviders/" class="btn btn-default"&gt;Leer más…&lt;/a&gt; (quedan 4 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>db testing</category><category>java testing</category><category>php testing</category><category>python testing</category><guid>http://magmax.org/blog/dataproviders/</guid><pubDate>Sun, 10 Jun 2012 00:00:00 GMT</pubDate></item><item><title>JBehave</title><link>http://magmax.org/blog/jbehave/</link><dc:creator>Miguel Ángel García</dc:creator><description>&lt;div&gt;&lt;p&gt;Apesar de mi mal comienzo con &lt;a class="reference external" href="http://jbehave.org/"&gt;JBehave&lt;/a&gt; , debo decir que le voy cogiendo el tranquillo.&lt;/p&gt;
&lt;p&gt;JBehave consiste en un sistema para hacer &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Behavior_Driven_Development"&gt;BDD&lt;/a&gt;  en Java. En otras palabras: permite definir en un lenguaje no formal el comportamiento de la aplicación, utilizando expresiones regulares para transformarlo en un lenguaje formal.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://magmax.org/blog/jbehave/" class="btn btn-default"&gt;Leer más…&lt;/a&gt; (quedan 4 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>java testing</category><category>jbehave</category><guid>http://magmax.org/blog/jbehave/</guid><pubDate>Thu, 12 Jan 2012 00:00:00 GMT</pubDate></item><item><title>No comentes: ¡Asegura!</title><link>http://magmax.org/blog/asegura/</link><dc:creator>Miguel Ángel García</dc:creator><description>&lt;div&gt;&lt;p&gt;Hoy he descubierto mucho de ese gran desconocido que es &lt;em&gt;assert&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Resulta que tenía a mi alcance una herramienta de depuración bastante fuerte y aún no he hecho uso de ella.&lt;/p&gt;
&lt;p&gt;Con el fin de solucionar este problema, escribo este artículo, aunque no escribiré nada que no se encuentre en la &lt;a class="reference external" href="http://download.oracle.com/javase/6/docs/technotes/guides/language/assert.html"&gt;Documentación de Java sobre Assert&lt;/a&gt;  o la &lt;a class="reference external" href="http://docs.python.org/release/2.5.2/ref/assert.html"&gt;documentación Python&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;&lt;a href="http://magmax.org/blog/asegura/" class="btn btn-default"&gt;Leer más…&lt;/a&gt; (quedan 3 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>java testing</category><category>python testing</category><category>test</category><category>testing</category><guid>http://magmax.org/blog/asegura/</guid><pubDate>Sun, 14 Aug 2011 00:00:00 GMT</pubDate></item><item><title>Pruebas de sistema: Concordion</title><link>http://magmax.org/blog/concordion/</link><dc:creator>Miguel Ángel García</dc:creator><description>&lt;div&gt;&lt;p&gt;He aquí cómo realizar las pruebas de todo el sistema. En mi caso, suelo utilizar &lt;a class="reference external" href="http://www.concordion.org/"&gt;Concordion&lt;/a&gt; , que es una aplicación que descubrí no hace mucho y que me está facilitando la vida.&lt;/p&gt;
&lt;p&gt;Antes de nada, advertir que esta es la manera en la que YO uso concordion. Soy bastante novato con la herramienta y es posible que haya miles de modos mejores.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://magmax.org/blog/concordion/" class="btn btn-default"&gt;Leer más…&lt;/a&gt; (quedan 3 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>java testing</category><guid>http://magmax.org/blog/concordion/</guid><pubDate>Wed, 17 Nov 2010 00:00:00 GMT</pubDate></item><item><title>Pruebas unitarias: Mocks y Stubs</title><link>http://magmax.org/blog/mocks-y-stubs/</link><dc:creator>Miguel Ángel García</dc:creator><description>&lt;div&gt;&lt;p&gt;Cuando estamos desarrollando, es necesario probar lo que estamos haciendo. En ocasiones esto puede resultar muy difícil (y más aún cuando no se ha hecho TDD), o muy lento.&lt;/p&gt;
&lt;p&gt;En este artículo trataré de dar una introducción a la utilización de MOCKs y STUBs en estos casos.&lt;/p&gt;
&lt;p&gt;En los ejemplos usaré Java y la librería &lt;a class="reference external" href="http://code.google.com/p/mockito/"&gt;mockito&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Voy a comenzar por plantear unas premisas: Las pruebas deben ser unitarias, rápidas e inocuas (no alteran el estado inicial).&lt;/p&gt;
&lt;p&gt;&lt;a href="http://magmax.org/blog/mocks-y-stubs/" class="btn btn-default"&gt;Leer más…&lt;/a&gt; (quedan 3 minutos de lectura)&lt;/p&gt;&lt;/div&gt;</description><category>java testing</category><category>mock</category><guid>http://magmax.org/blog/mocks-y-stubs/</guid><pubDate>Wed, 17 Nov 2010 00:00:00 GMT</pubDate></item></channel></rss>