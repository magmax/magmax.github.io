<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>compiler on El blog de MagMax</title>
    <link>https://magmax.org/tags/compiler/</link>
    <description>Recent content in compiler on El blog de MagMax</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Nov 2011 00:00:00 +0000</lastBuildDate><atom:link href="https://magmax.org/tags/compiler/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Crea tu propio lenguaje de programación con... python</title>
      <link>https://magmax.org/blog/python-tokenizer/</link>
      <pubDate>Mon, 14 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/python-tokenizer/</guid>
      <description>
        
          &lt;p&gt;Ayer descubrí algo que me hizo flipar en colores: cómo crear tu propio &lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-specific_language&#34;&gt;DSL(Domain Specific Language)&lt;/a&gt;  en Python. Y sólo necesitamos una clase del API estándar de Python.&lt;/p&gt;
&lt;p&gt;En concreto la clase es &amp;ldquo;tokenize&amp;rdquo;, y es que resulta que python pone a nuestro alcance su propio párser del lenguaje&amp;hellip; Vamos, que nos da ya el analizador léxico y sintáctico terminados. El semántico ya es cosa nuestra (o no, porque podemos utilizarlo también XD).&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/python.png&#34;
         alt=&#34;Python&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Pero veamos cómo funciona:&lt;/p&gt;
&lt;p&gt;Voy a hacerme mi propio lenguaje. Va a ser uno simplón, como ejemplo. No sé&amp;hellip; Algo parecido a &lt;a href=&#34;https://cukes.info/&#34;&gt;Cucumber&lt;/a&gt;  (mucho ojo, que he dicho &amp;ldquo;parecido&amp;rdquo;).&lt;/p&gt;
&lt;p&gt;Veamos un ejemplo de lo que queremos procesar:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given &amp;ldquo;bloque de inicialización&amp;rdquo; When &amp;ldquo;bloque de condiciones&amp;rdquo; Then &amp;ldquo;bloque de comprobaciones&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Y el código no nos va a costar más que unas pocas líneas:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; StringIO
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tokenize
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;codigo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Given &amp;#34;bloque de inicialización&amp;#34; When &amp;#34;bloque de condiciones&amp;#34; Then &amp;#34;bloque de comprobaciones&amp;#34;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;mode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; each &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; tokenize&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;generate_tokens(StringIO&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;StringIO(codigo)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readline):
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; each[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; tokenize&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NAME:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; each[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;capitalize() &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Given&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;When&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Then&amp;#39;&lt;/span&gt;]:
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;            mode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; each[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;capitalize()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;        process(each[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], mode)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Para los seguidores del &lt;a href=&#34;https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882:&#34;&gt;Clean Code&lt;/a&gt;  3 niveles de anidación no me los suelo permitir, pero aquí es una excepción para haceros trabajar.&lt;/p&gt;
&lt;p&gt;Veamos&amp;hellip; ¿Qué ha pasado aquí? Bueno, lo primero comentaros qué es &lt;code&gt;StringIO&lt;/code&gt;. Es un módulo muy curioso, que permite transformar &lt;code&gt;Strings&lt;/code&gt; en objetos que se pueden tratar como ficheros. En Java, sería como crearnos nuestro &lt;a href=&#34;https://download.oracle.com/javase/6/docs/api/index.html?java/io/StringReader.html&#34;&gt;StringReader&lt;/a&gt; . Si tuviésemos un fichero, no sería necesaria esta clase.&lt;/p&gt;
&lt;p&gt;Ahora vamos con lo que importa :D&lt;/p&gt;
&lt;p&gt;El bucle &lt;code&gt;for&lt;/code&gt; va procesando cada uno de los elementos, teniendo en cuenta que en este caso sólo tenemos cadenas. Cada uno de los elementos consiste en una tupla, compuesta por:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tipo de &lt;em&gt;token&lt;/em&gt;. Un &lt;code&gt;tokenize.NAME&lt;/code&gt; es una palabra reservada (variable, función, &amp;hellip;); un &lt;code&gt;tokenize.NL&lt;/code&gt; es un salto de línea; &lt;code&gt;tokenize.NUMBER&lt;/code&gt; un número&amp;hellip;&lt;/li&gt;
&lt;li&gt;Contenido del &lt;em&gt;token&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Posición de inicio. En concreto, una dupla con la línea y el carácter.&lt;/li&gt;
&lt;li&gt;Posición de fin. Nuevamente, una dupla con la línea y el carácter.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;¿Qué más podemos necesitar para procesar nuestro lenguaje? Pues estaría bien algo que me permita usar la máquina virtual de Python completa, de manera que los bloques puedan ser complejos&amp;hellip; ¿Algo como &lt;a href=&#34;https://docs.python.org/library/functions.html#eval?&#34;&gt;eval&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;Hasta ahora siempre he utilizado complicados sistemas de expresiones regulares para procesar mis DSL (bueno, hasta que decidí dejar de usar DSL XD), pero ayer descubrí la clase &amp;ldquo;&lt;em&gt;tokenize&lt;/em&gt;&amp;rdquo; y me han encantado sus posibilidades XD.&lt;/p&gt;
&lt;p&gt;En fin&amp;hellip; Espero que os haya gustado el artículo XD&lt;/p&gt;
&lt;h2 id=&#34;más-información&#34;&gt;Más información&lt;/h2&gt;
&lt;p&gt;Para más información, la documentación de siempre de &lt;a href=&#34;https://docs.python.org/library/tokenize.html?highlight=tokenize#module-tokenize&#34;&gt;tokenize&lt;/a&gt; , aunque me temo que es bastante escueta.&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
