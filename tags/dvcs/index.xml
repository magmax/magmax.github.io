<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dvcs on El blog de MagMax</title>
    <link>https://magmax.org/tags/dvcs/</link>
    <description>Recent content in dvcs on El blog de MagMax</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Jul 2014 10:05:55 +0200</lastBuildDate><atom:link href="https://magmax.org/tags/dvcs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Combinando Git y Subversion</title>
      <link>https://magmax.org/blog/combinando-git-y-subversion/</link>
      <pubDate>Sun, 13 Jul 2014 10:05:55 +0200</pubDate>
      
      <guid>https://magmax.org/blog/combinando-git-y-subversion/</guid>
      <description>
        
          &lt;p&gt;El otro día mi amigo Diego D. me propuso un problema. Él ya tenía una posible solución, pero quería contar también con mi opinión.&lt;/p&gt;
&lt;p&gt;A menudo, cuando tenemos un problema no somos los únicos en enfrentarnos a él. Por eso he decidido publicar aquí mi solución, algo más elaborada de cómo se la conté a él, por supuesto.&lt;/p&gt;
&lt;p&gt;Y éste es el problema: Nuestra empresa utiliza &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt;, y una subcontrata utiliza &lt;a href=&#34;http://subversion.apache.org/&#34;&gt;Subversion&lt;/a&gt;. Cada vez que la subcontrata nos tiene que enviar código, lo hace a través del email (ésto no es tan raro, yo también lo he sufrido). Claro, eso supone perder el tiempo colocando los archivos en su sitio y &lt;em&gt;mergeando&lt;/em&gt; a mano, con todos los problemas que esto supone.&lt;/p&gt;
&lt;p&gt;Veamos mi solución. Si alguien tiene otra mejor, por favor, que lo diga.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/gitvssvn.jpg&#34;
         alt=&#34;Git vs Svn&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;primer-paso-ramas&#34;&gt;Primer paso: Ramas&lt;/h2&gt;
&lt;p&gt;Lo primero que tenemos que hacer es crear una rama en nuestro repositorio &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt;. Yo la llamaría con el nombre de la empresa externa, algo como &amp;ldquo;externa/subversion&amp;rdquo;, por si el día de mañana dejaran la edad de piedra y usaran ellos &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;segundo-paso-incorporando-sus-cambios&#34;&gt;Segundo paso: incorporando sus cambios.&lt;/h2&gt;
&lt;h3 id=&#34;si-hay-acceso-a-su-repositorio-subversion&#34;&gt;Si hay acceso a su repositorio Subversion&lt;/h3&gt;
&lt;p&gt;Éste es el caso fácil. Basta con seguir este &lt;em&gt;script&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;git fetch
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;git rebase
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;svn checkout
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;git add -A
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;git commit -am &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Autocommit&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Es decir: traemos lo que haya de &lt;a href=&#34;http://subversion.apache.org/&#34;&gt;Subversion&lt;/a&gt; y lo añadimos a &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt;. Para evitar conflictos, primero actualizamos la copia local. Aún es posible tener conflictos, pero habremos minimizado las posibilidades.&lt;/p&gt;
&lt;h3 id=&#34;no-hay-acceso-al-repositorio-subversion&#34;&gt;No hay acceso al repositorio Subversion&lt;/h3&gt;
&lt;p&gt;Cada vez que nos manden un archivo, nos cambiamos a esa rama, los colocamos y &lt;em&gt;comiteamos&lt;/em&gt;. Este proceso es un auténtico coñazo y nos hará perder mogollón de tiempo.&lt;/p&gt;
&lt;p&gt;El resto de los puntos serán igual. Sólo estamos sustituyendo el paso &lt;code&gt;svn checkout&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;¿Alguien se ha dado cuenta de la gracia del tema? ¡Sí! esto se puede automatizar :D&lt;/p&gt;
&lt;h4 id=&#34;automatizando-que-se-jodan-otros&#34;&gt;Automatizando: que se jodan otros&lt;/h4&gt;
&lt;p&gt;Yo haría una pequeña interfaz web en la que se soliciten los archivos y un pequeño texto explicando lo que contienen. Por detrás, haría el commit que he propuesto anteriormente XD&lt;/p&gt;
&lt;p&gt;Si nuestra intención es ser eficientes, la única solución es delegar las tareas que nos hacen perder el tiempo. Si ellos quieren hacernos perder el tiempo, le damos la vuelta. Total, será similar enviar un email que rellenar dicho formulario.&lt;/p&gt;
&lt;h4 id=&#34;usando-parches&#34;&gt;Usando parches&lt;/h4&gt;
&lt;p&gt;Una mejora es usar parches. De esa manera sólo tendrán que enviarnos un único archivo y lo aplicaremos todo de golpe. En la empresa externa tendrán que hacer:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;svn diff &amp;gt; changes.patch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y hacernos llegar el archivo &lt;code&gt;changes.patch&lt;/code&gt;. Gracias a este cambio, para nosotros será mucho más sencillo aplicar sus cambios (desde el directorio principal del repositorio):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;patch -p0 -i /path/al/fichero/changes.patch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Podemos incluir eso en nuestros archivos de automatización.&lt;/p&gt;
&lt;h2 id=&#34;tercer-paso-incorporando-nuestros-cambios-y-haciéndoselos-llegar&#34;&gt;Tercer paso: incorporando nuestros cambios y haciéndoselos llegar&lt;/h2&gt;
&lt;h3 id=&#34;si-hay-acceso-a-su-repositorio-subversion-1&#34;&gt;Si hay acceso a su repositorio Subversion&lt;/h3&gt;
&lt;p&gt;Nada más sencillo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;old_commit&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;git rev-parse HEAD&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;git fetch
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;git rebase
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;current_commit&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;git rev-parse HEAD&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$old_commit&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$current_commit&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line in &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;git diff --name-status &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;old_commit&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;..&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;current_commit&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;        operation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;echo line | cut -d&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt; -f1&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;        filename&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;echo line | cut -d&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt; -f2&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;operation&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;            svn rm $filename
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;            svn add $filename &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; True
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;svn commit &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Automatic push&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(No he probado el script&amp;hellip; pero creo que os podéis hacer a la idea)&lt;/p&gt;
&lt;h3 id=&#34;no-hay-acceso-al-repositorio-subversion-1&#34;&gt;No hay acceso al repositorio Subversion&lt;/h3&gt;
&lt;p&gt;Pues igual, pero aún más sencillo para nosotros:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;PREFIX&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Please, could you apply these changes?\n&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;SUFFIX&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n\nThank you.&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;old_commit&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;git rev-parse HEAD&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;git fetch
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;git rebase
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;current_commit&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;git rev-parse HEAD&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$PREFIX&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;git diff &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;old_commit&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;..&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;current_commit&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;$SUFFIX&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    | mail -s &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Repository changes&amp;#34;&lt;/span&gt; empresa@example.org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;De la misma manera, se les puede mandar el parche para que lo apliquen ellos.&lt;/p&gt;
&lt;h2 id=&#34;añadiendo-los-cambios&#34;&gt;Añadiendo los cambios&lt;/h2&gt;
&lt;p&gt;Finalmente, será necesario meter los cambios en nuestra rama principal. Para ello yo seguiría el siguiente esquema:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git fetch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -t origin/externa/subversion&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git rebase rama_principal&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Pasar los tests&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git rebase external/subversion&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Volver a pasar los tests. Aunque este paso es opcional, ya que no debería haber problemas.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Alguien podría decirme: &amp;ldquo;Es que la empresa externa no escribe tests&amp;rdquo;. Los que me seguís habitualmente sabéis lo que voy a contestar: ¿Y qué hacéis trabajando aún con ellos? ¿Y es que no tenéis vuestros propios tests de aceptación? ¿Cómo sabéis que no os han roto nada crítico?&lt;/p&gt;
&lt;h3 id=&#34;mejoras&#34;&gt;Mejoras&lt;/h3&gt;
&lt;p&gt;Gracias a todo este esquema podéis obtener información extra de forma gratuita: podéis &lt;em&gt;trackear&lt;/em&gt; la covertura de los tests, evitando que ésta baje, generar informes, graficar defectos arreglados/producidos por unidad de tiempo, frecuencia de cambios, etc.&lt;/p&gt;
&lt;h2 id=&#34;replicabilidad&#34;&gt;Replicabilidad&lt;/h2&gt;
&lt;p&gt;Otra de las cosas que suelen preocuparme es la replicabilidad de este sistema. Por ello sugiero los siguientes cambios:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Añadir archivos subversion&lt;/strong&gt;: Yo añadiría los archivos más básicos de &lt;a href=&#34;http://subversion.apache.org/&#34;&gt;Subversion&lt;/a&gt; al repositorio &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt;. De esta manera, cualquier &lt;em&gt;working copy&lt;/em&gt; es susceptible de realizar los pasos arriba indicados.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scripts en el repositorio&lt;/strong&gt;: Igualmente, añadiría los scripts que permiten gestionar el repositorio al propio repositorio. Esto permitirá que cualquiera pueda ejecutarlos desde cualquier sitio. Así no serán necesarios incómodos &lt;em&gt;backups&lt;/em&gt; del sistema.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;backups&#34;&gt;Backups&lt;/h3&gt;
&lt;p&gt;Los que me conocen saben que soy enemigo de los &lt;em&gt;backups&lt;/em&gt;. Si estás usando un repositorio &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt;, todas las &lt;em&gt;working copies&lt;/em&gt; son &lt;em&gt;backups&lt;/em&gt; potenciales, y restaurar el sistema no debería ser un problema. Bastaría con guardar la configuración del servidor&amp;hellip; ¡Que podría estar en otro repositorio! Y si usa &lt;a href=&#34;http://puppetlabs.com/&#34;&gt;Puppet&lt;/a&gt;, &lt;a href=&#34;http://www.saltstack.com/&#34;&gt;Salt&lt;/a&gt; o &lt;a href=&#34;http://www.getchef.com/chef/&#34;&gt;Chef&lt;/a&gt;, mucho mejor.&lt;/p&gt;
&lt;p&gt;Usad los &lt;em&gt;backups&lt;/em&gt; para cosas que realmente cambian con frecuencia o no son susceptibles de añadirse a un repositorio (o bien no se va a descargar nadie): Bases de datos, repositorios de archivos (tipo &lt;a href=&#34;http://www.sonatype.org/nexus/&#34;&gt;Nexus&lt;/a&gt;, &lt;a href=&#34;http://www.jfrog.com/home/v_artifactory_opensource_overview&#34;&gt;Artifactory&lt;/a&gt;, &amp;hellip;)&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Usando Git(3): Internals</title>
      <link>https://magmax.org/blog/usando-git3/</link>
      <pubDate>Tue, 26 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/usando-git3/</guid>
      <description>
        
          &lt;p&gt;Anteriormente vimos lo más básico de &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt;, en dos tutoriales separados: &lt;a href=&#34;https://magmax.org/blog/usando-git/&#34;&gt;lo más básico de git&lt;/a&gt; y &lt;a href=&#34;https://magmax.org/blog/usando-git/&#34;&gt;cómo trabajar con varias working copies&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En esta ocasión me gustaría compartir cómo funciona Git desde dentro. Y muchas veces, la mejor manera de saber cómo funciona algo es construirlo. Por esa razón vamos a diseñar nuestro propio &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Veremos que no es tan complejo como pueda parecer, y conocer cómo funciona nos permitirá saber qué podemos hacer. Siempre es interesante saber &lt;a href=&#34;https://magmax.org/blog/como-funcionan-las-cosas/&#34;&gt;cómo funcionan las cosas&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Y demostraré que &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt; no tiene ramas.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/git.png&#34;
         alt=&#34;git&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;qué-es-git&#34;&gt;Qué es Git&lt;/h2&gt;
&lt;p&gt;Hay &lt;a href=&#34;http://en.wikipedia.org/wiki/Distributed_revision_control&#34;&gt;DVCS&lt;/a&gt;, como &lt;a href=&#34;http://mercurial.selenic.com/&#34;&gt;Mercurial&lt;/a&gt;, que guardan las diferencias entre versiones. &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt; sólo guarda ficheros completos, por lo que yo lo veo más bien como un sistema de ficheros sobre el que han montado un sistema de control de versiones. Precisamente por eso me gustaría comenzar contando cómo funciona un sistema de ficheros, &lt;a href=&#34;http://es.wikipedia.org/wiki/Ext2&#34;&gt;Ext2&lt;/a&gt;, y por qué no es adecuado para resolver los problemas que resuelve Git.&lt;/p&gt;
&lt;p&gt;No tengáis miedo a este artículo, es más sencillo de lo que parece por el título. Mi profesor de sistemas operativos, Eduardo D., siempre nos decía: &lt;strong&gt;&amp;ldquo;Aquí no hay magia, sólo programas&amp;rdquo;&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;ext2&#34;&gt;Ext2&lt;/h2&gt;
&lt;p&gt;Un sistema de ficheros tiene que tener ficheros. Y habitualmente directorios. Éstos varían frecuentemente, por lo que es importante gestionar esta característica.&lt;/p&gt;
&lt;p&gt;Por eso, los diseñadores de &lt;a href=&#34;http://es.wikipedia.org/wiki/Ext2&#34;&gt;Ext2&lt;/a&gt; vieron el sistema de ficheros como un conjunto de bloques de dos tipos: Archivos y Directorios.&lt;/p&gt;
&lt;p&gt;Un &lt;strong&gt;Archivo&lt;/strong&gt; contiene una serie de características (nombre, permisos, dueño,&amp;hellip;), y un contenido arbitrariamente grande. Por eso decidieron poner una pequeña cantidad de datos junto a las características y una lista de direcciones donde continúa el contenido del archivo. Es decir: podemos decir que el &lt;strong&gt;Archivo&lt;/strong&gt; contiene características y que hay otro tipo de objetos llamados &amp;ldquo;&lt;strong&gt;Datos&lt;/strong&gt;&amp;rdquo; con el contenido. Cuando un &lt;strong&gt;Archivo&lt;/strong&gt; es demasiado grande, las últimas direcciones apuntarán a otros nodos que contienen más direcciones de bloques de &lt;strong&gt;Datos&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Un &lt;strong&gt;Directorio&lt;/strong&gt; funciona igual, gestionando una serie de características y una lista de &lt;strong&gt;Archivos&lt;/strong&gt; y de otros &lt;strong&gt;Directorios&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Finalmente, la gestión de la memoria libre se hace de una manera similar, mediante bloques de memoria libre que apuntan a otros bloques de memoria libres. Sí, utiliza la propia memoria libre para gestionar lo que está libre.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://es.wikipedia.org/wiki/Ext2&#34;&gt;Ext2&lt;/a&gt; se basa en conocer la posición de dos elementos especiales del sistema: la raíz del árbol de directorios y la raíz del espacio libre. Al fin y al cabo, necesitamos tener un nodo origen del que parten todos los demás.&lt;/p&gt;
&lt;p&gt;Si tuviéramos que implementar &lt;a href=&#34;http://es.wikipedia.org/wiki/Ext2&#34;&gt;Ext2&lt;/a&gt; a alto nivel, probablemente necesitaríamos estos cuatro objetos: &lt;strong&gt;Directorio&lt;/strong&gt;, &lt;strong&gt;Fichero&lt;/strong&gt;, &lt;strong&gt;Datos&lt;/strong&gt; y &lt;strong&gt;EspacioLibre&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://es.wikipedia.org/wiki/Ext2&#34;&gt;Ext2&lt;/a&gt; es mucho más que esto, con un sistema de bitácora que lo hace semi-transacional, y otras características necesarias para recuperarse de problemas, pero éste es un artículo sobre &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt; y con esto es suficiente.&lt;/p&gt;
&lt;h3 id=&#34;problemas-de-ext2&#34;&gt;Problemas de Ext2&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://es.wikipedia.org/wiki/Ext2&#34;&gt;Ext2&lt;/a&gt; está pensado para archivos que se modifican con frecuencia. En un &lt;a href=&#34;http://en.wikipedia.org/wiki/Distributed_revision_control&#34;&gt;DVCS&lt;/a&gt; los archivos no se modifican nunca. Esto puede suponer una pérdida importante de eficiencia.&lt;/p&gt;
&lt;p&gt;Además, un &lt;a href=&#34;http://en.wikipedia.org/wiki/Distributed_revision_control&#34;&gt;DVCS&lt;/a&gt; tiene una dimensión más: el tiempo. Un mismo archivo tiene historia.&lt;/p&gt;
&lt;p&gt;Estas dos características hacen necesario pensar otra solución en lugar de utilizar &lt;a href=&#34;http://es.wikipedia.org/wiki/Ext2&#34;&gt;Ext2&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;git&#34;&gt;Git&lt;/h2&gt;
&lt;p&gt;Git es un sistema en 4 dimensiones. Veremos cuáles son éstas y cómo no se diferencia tanto de &lt;a href=&#34;http://es.wikipedia.org/wiki/Ext2&#34;&gt;Ext2&lt;/a&gt;, al menos conceptualmente.&lt;/p&gt;
&lt;p&gt;Algo que no debemos olvidar es que &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt; es una implementación de alto nivel. Eso significa que donde &lt;a href=&#34;http://es.wikipedia.org/wiki/Ext2&#34;&gt;Ext2&lt;/a&gt; utiliza direcciones de memoria, &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt; tiene que utilizar algo más grande: nombres de archivos.&lt;/p&gt;
&lt;h3 id=&#34;dimensión-uno-bloques-de-datos-blobs&#34;&gt;Dimensión uno: Bloques de datos (Blobs)&lt;/h3&gt;
&lt;p&gt;Igual que &lt;a href=&#34;http://es.wikipedia.org/wiki/Ext2&#34;&gt;Ext2&lt;/a&gt;, &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt; tiene bloques de datos, que se llaman &lt;strong&gt;Blobs&lt;/strong&gt;. Estos &lt;strong&gt;Blobs&lt;/strong&gt; se tienen que guardar en archivos, por lo que aquí surge el primer problema: ¿Cómo direccionar de forma unívoca un &lt;strong&gt;Blob&lt;/strong&gt;? ¿Cuál es el equivalente de una &amp;ldquo;posición de memoria&amp;rdquo;?&lt;/p&gt;
&lt;p&gt;La solución es muy sencilla: Se calcula el &lt;a href=&#34;http://es.wikipedia.org/wiki/Secure_Hash_Algorithm&#34;&gt;Sha1&lt;/a&gt; del &lt;strong&gt;Blob&lt;/strong&gt; y se utiliza como nombre de archivo. Recordemos que el contenido de un archivo no cambia nunca, por lo que es algo perfectamente válido.&lt;/p&gt;
&lt;p&gt;Estos &lt;strong&gt;Blob&lt;/strong&gt; tendrán un tamaño máximo, de manera que sean sencillos de manejar. Si dos &lt;strong&gt;Blob&lt;/strong&gt; comparten la misma &lt;a href=&#34;http://es.wikipedia.org/wiki/Secure_Hash_Algorithm&#34;&gt;Sha1&lt;/a&gt;, se asume que tienen el mismo contenido y esto permite ahorrar espacio, guardándolo en memoria una única vez. Las probabilidades de que un bloque de tamaño fijo genere el mismo &lt;a href=&#34;http://es.wikipedia.org/wiki/Secure_Hash_Algorithm&#34;&gt;Sha1&lt;/a&gt; que otro diferente son, en la práctica, nulas.&lt;/p&gt;
&lt;p&gt;Así mismo, para ahorrar espacio se guarda la información comprimida en &lt;a href=&#34;http://es.wikipedia.org/wiki/Formato_de_compresi%C3%B3n_ZIP&#34;&gt;Zip&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A los archivos cuyo nombre coincide con el &lt;a href=&#34;http://es.wikipedia.org/wiki/Secure_Hash_Algorithm&#34;&gt;Sha1&lt;/a&gt; y contienen algún tipo de elemento de &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt; se les denomina &lt;strong&gt;objetos&lt;/strong&gt; y se guardarán en el directorio &lt;code&gt;.git/objects&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Esto es un &lt;strong&gt;Blob&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;-------------------------
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;| a1ad5...              |
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;|-----------------------|
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;| Blob           | size |
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;|------------------------
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;| Zipped content        |
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;| example               |
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt;-------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ejemplo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ ls .git/objects/a1/ad5a63324b733e8caf056f5167d4ee9957bf79
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;.git/objects/a1/ad5a63324b733e8caf056f5167d4ee9957bf79
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;$ git cat-file -t a1ad5a63324b733e8caf056f5167d4ee9957bf79
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;blob
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;$ git cat-file -p a1ad5a63324b733e8caf056f5167d4ee9957bf79
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;Zipped content
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;example
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt;$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;dimensión-dos-árboles-trees&#34;&gt;Dimensión dos: Árboles (Trees)&lt;/h3&gt;
&lt;p&gt;De la misma manera que en &lt;a href=&#34;http://es.wikipedia.org/wiki/Ext2&#34;&gt;Ext2&lt;/a&gt; hay archivos y directorios, en &lt;a href=&#34;http://git-scm.com/&#34;&gt;git&lt;/a&gt; hay &lt;strong&gt;Trees&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Los &lt;strong&gt;Trees&lt;/strong&gt; son unos bloques especiales que permiten dar un orden a los bloques de datos y almacenar cierta meta-información, como permisos, un nombre, etc.&lt;/p&gt;
&lt;p&gt;Nuevamente nos encontramos con algo que no va a cambiar con el tiempo. Si un archivo o un directorio cambiase, sería otro diferente. Así que se puede guardar el &lt;strong&gt;Tree&lt;/strong&gt; utilizando también su &lt;a href=&#34;http://es.wikipedia.org/wiki/Secure_Hash_Algorithm&#34;&gt;Sha1&lt;/a&gt; como nombre. Igual que los &lt;strong&gt;Blobs&lt;/strong&gt;, si dos archivos tienen el mismo &lt;a href=&#34;http://es.wikipedia.org/wiki/Secure_Hash_Algorithm&#34;&gt;Sha1&lt;/a&gt; podemos asumir que son iguales. Es más: podemos guardarlos junto con los &lt;strong&gt;Blobs&lt;/strong&gt;, ya que también son &lt;strong&gt;objetos&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Al contrario que en &lt;a href=&#34;http://es.wikipedia.org/wiki/Ext2&#34;&gt;Ext2&lt;/a&gt;, los objetos &lt;strong&gt;Tree&lt;/strong&gt; pueden contener referencias a &lt;strong&gt;Blobs&lt;/strong&gt; y a otros &lt;strong&gt;Trees&lt;/strong&gt;, por lo que no hay distinción real entre &amp;ldquo;Archivos&amp;rdquo; y &amp;ldquo;Directorios&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Como veis, lo único que tenemos de momento son un montón de archivos con nombres de 40 bytes (su &lt;a href=&#34;http://es.wikipedia.org/wiki/Secure_Hash_Algorithm&#34;&gt;Sha1&lt;/a&gt;), aunque el significado de éstos puede ser distinto para &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Esto es un &lt;strong&gt;Tree&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;---------------------------
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;| a1975...                |
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;|-------------------------|
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;| Tree           | size   |
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;|--------------------------
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;| perms, type, sha1, name |
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;| perms, type, sha1, name |
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt;| ...                     |
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9&lt;/span&gt;---------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ejemplo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;$ ls .git/objects/a1/a1975049511402aac1e2710bd4762ba7d15b74d1
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;.git/objects/a1/a1975049511402aac1e2710bd4762ba7d15b74d1
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;$ git cat-file -t a1975049511402aac1e2710bd4762ba7d15b74d1
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;tree
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;$ git cat-file -p a1975049511402aac1e2710bd4762ba7d15b74d1
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;040000&lt;/span&gt; tree ef67b9c831b2a669b8d8508cc5a9ed052d05e613	folder1
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;040000&lt;/span&gt; tree 0a546f747dd82b6b765cf272867f2d04c60fd8dd	folder2
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;040000&lt;/span&gt; tree 9194aeb855a27f7aec885eeeff32c88e26c8ee1c	folder3
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;040000&lt;/span&gt; tree 9ad174760352980f6c5d4222bb2e54484189a2d3	folder4
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100644&lt;/span&gt; blob 6dc5a02b1d0dcb1e7e187972033f05b07e9592fe	file1
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;040000&lt;/span&gt; tree 08a180175c5df5e2d4f545fb15e65c50bb488c65	folder5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;dimensión-tres-commits&#34;&gt;Dimensión tres: Commits&lt;/h3&gt;
&lt;p&gt;Y he aquí la tercera dimensión: el tiempo. Cada vez que hacemos &lt;code&gt;git commit&lt;/code&gt;, &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt; guarda un nuevo tipo de nodo, el &lt;strong&gt;Commit&lt;/strong&gt;, que consiste en una lista &lt;strong&gt;Trees&lt;/strong&gt; con alguna característica, como la descripción, el usuario y la fecha.&lt;/p&gt;
&lt;p&gt;La implementación es sencilla: Cuando alguien hace &lt;code&gt;git add&lt;/code&gt;, &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt; se guarda el &lt;strong&gt;objeto&lt;/strong&gt;(contenido + sha1) en un directorio distinto, de la forma que vimos arriba (bueno, esto no es del todo cierto&amp;hellip; realmente guarda diffs, pero eso no importa ahora). Así, al hacer un &lt;code&gt;git commit&lt;/code&gt; basta crear un nuevo objeto &lt;strong&gt;Commit&lt;/strong&gt; con sus características y la lista de &lt;strong&gt;Trees&lt;/strong&gt; que contuviera el &lt;strong&gt;commit&lt;/strong&gt; anterior más los cambios almacenados. Después se cogen todos los &lt;strong&gt;objetos&lt;/strong&gt; generados y se guardan con los demás.&lt;/p&gt;
&lt;p&gt;Esta configuración hace que también sea muy sencillo implementar un &lt;code&gt;git push&lt;/code&gt; o &lt;code&gt;git pull&lt;/code&gt;, ya que basta con sincronizar el directorio con todos los &lt;strong&gt;objects&lt;/strong&gt; (bueno&amp;hellip; y alguna cosilla más).&lt;/p&gt;
&lt;p&gt;Esto es un &lt;strong&gt;Commit&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;---------------------------
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;| b52b8...                |
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;|-------------------------|
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;| Commit         | size   |
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;|--------------------------
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;| tree a2e96...           |
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;| parent 0e443...         |
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;| author MagMax           |
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;| timestamp               |
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;| commiter MagMax         |
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;| timestamp               |
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;| description             |
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;---------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ejemplo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;$ ls .git/objects/b5/2b8ec9e4784cc0ce458d13d8868bc5255e5ce7
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;.git/objects/b5/2b8ec9e4784cc0ce458d13d8868bc5255e5ce7
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;$ git cat-file -t b52b8ec9e4784cc0ce458d13d8868bc5255e5ce7
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;commit
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;$ git cat-file -p b52b8ec9e4784cc0ce458d13d8868bc5255e5ce7
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;tree a2e96967bbb39652ecb6a5d0fee882eeb8d7f829
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;parent 0e4432bf3cb667dbc9a99afcc3601696e8c110af
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;author MagMax &amp;lt;miguelangel@magmax.org&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1371385169&lt;/span&gt; +0200
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;committer MagMax &amp;lt;miguelangel@magmax.org&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1371385169&lt;/span&gt; +0200
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;The description of this commit.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Tan solo falta saber por dónde vamos. Para eso, &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt; utiliza una serie de archivos en los que se guarda &lt;strong&gt;&amp;ldquo;referencias&amp;rdquo;&lt;/strong&gt;, que consisten en el &lt;a href=&#34;http://es.wikipedia.org/wiki/Secure_Hash_Algorithm&#34;&gt;Sha1&lt;/a&gt; de los objetos. Así, el &lt;strong&gt;HEAD&lt;/strong&gt; que apareció en el tutorial anterior no es más que un archivo (&lt;code&gt;.git/HEAD&lt;/code&gt;) donde se guarda la referencia en la que nos encontramos. Y la referencia no es más que otro archivo (&lt;code&gt;.git/refs/heads/master&lt;/code&gt; ) que contendrá el &lt;a href=&#34;http://es.wikipedia.org/wiki/Secure_Hash_Algorithm&#34;&gt;Sha1&lt;/a&gt; del &lt;strong&gt;commit&lt;/strong&gt; actual. Así de fácil. Os invito a que comprovéis el contenido de estos archivos en vuestro repositorio local:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.git/HEAD&lt;/code&gt; contiene: ref: refs/heads/master&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.git/refs/heads/master&lt;/code&gt; contiene: 00ce77b5f13e7750ba87e091e8df5df0956101fb&lt;/li&gt;
&lt;li&gt;Existe el archivo `.git/objects/00/ce77b5f13e7750ba87e091e8df5df0956101fb&lt;/li&gt;
&lt;li&gt;Ejecutando &lt;code&gt;git show&lt;/code&gt; comprobaremos que el último commit fue 00ce77b5f13e7750ba87e091e8df5df0956101fb&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dimensión-cuatro-tags&#34;&gt;Dimensión cuatro: Tags&lt;/h3&gt;
&lt;p&gt;Consisten en referencias a &lt;strong&gt;commits&lt;/strong&gt;, de manera que se puede establecer un nombre alternativo para estos &lt;strong&gt;commits&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Los veremos más adelante; de momento baste saber que estos &lt;strong&gt;Tags&lt;/strong&gt; también son &lt;strong&gt;objetos&lt;/strong&gt; y se guardan junto con todos los demás.&lt;/p&gt;
&lt;p&gt;Su composición es similar a los &lt;strong&gt;commits&lt;/strong&gt;, salvo que guardan referencias a otros &lt;strong&gt;commits&lt;/strong&gt; en lugar de &lt;strong&gt;trees&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;ramas&#34;&gt;Ramas&lt;/h2&gt;
&lt;p&gt;Las ramas no son &lt;strong&gt;objetos&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt; le gustan las cosas inmutables, lo que no cambia. Un &lt;strong&gt;Tag&lt;/strong&gt; no cambia nunca. Podemos borrarlo y crear otro diferente, pero el mismo &lt;strong&gt;Tag&lt;/strong&gt; es inmutable. Lo mismo ocurre con &lt;strong&gt;Archivos&lt;/strong&gt;, &lt;strong&gt;Árboles&lt;/strong&gt; y &lt;strong&gt;Commits&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Sin embargo, en &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt; el concepto de &amp;ldquo;rama&amp;rdquo; es efímero. Consiste en una referencia a un &lt;strong&gt;commit&lt;/strong&gt;, pero irá cambiando frecuentemente, con cada &lt;strong&gt;commit&lt;/strong&gt;. Además, no es un concepto indispensable. Así, una &lt;strong&gt;working copy&lt;/strong&gt; por defecto sólo &lt;em&gt;trackea&lt;/em&gt; una rama (habitualmente, &lt;em&gt;&amp;ldquo;master&amp;rdquo;&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Las ramas son, en realidad, referencias. Es decir, punteros. Sólo eso y nada más. Y puedo demostrarlo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ cat .git/refs/heads/master
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;00ce77b5f13e7750ba87e091e8df5df0956101fb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Vaya&amp;hellip; Está apuntando al mismo &lt;strong&gt;changeset&lt;/strong&gt; que vimos antes :D&lt;/p&gt;
&lt;p&gt;Por lo tanto, en &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt; &lt;strong&gt;las ramas no son objetos&lt;/strong&gt;. Al no ser &lt;strong&gt;objetos&lt;/strong&gt;, no se copian con un &lt;code&gt;git fetch&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Pensemos en los punteros de C o C++: podemos tener dos punteros apuntando a la misma variable. Cada puntero tendrá un nombre, y puede ser diferente o igual (en el caso de C y C++, sólo si están en distinto ámbito). Con &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt; ocurre lo mismo: lo que importa es el &lt;strong&gt;commit&lt;/strong&gt;, no el nombre que se le ha puesto. Por eso los nombres de las ramas son locales. Podemos referirnos a una rama en el servidor, indicando que está allí:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ cat .git/refs/remotes/origin/master
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;e2bf849e1c09ad79e04e7f6c0fcdcea8e5dd5175
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hmmm&amp;hellip;. vaya. Mi copia local no está sincronizada con el servidor o el &lt;strong&gt;changeset&lt;/strong&gt; volvería a coincidir. Necesito hacer un &lt;code&gt;git push&lt;/code&gt; para sincronizarlas.&lt;/p&gt;
&lt;h2 id=&#34;simplicidad&#34;&gt;Simplicidad&lt;/h2&gt;
&lt;p&gt;Estoy tratando de demostrar algo más: lo que se hace con las órdenes de &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt; no es más que consultar archivos, a menudo de texto plano, que podríamos consultar a mano. Es una manera simple de gestionar un sistema complejo.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cada &lt;code&gt;fetch&lt;/code&gt; trae un montón de &lt;strong&gt;objetos&lt;/strong&gt; y actualiza las referencias remotas que se encuentran en &lt;code&gt;.git/refs/remotes&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Cada &lt;code&gt;commit&lt;/code&gt; genera nuevos &lt;strong&gt;objetos&lt;/strong&gt; y actualiza las referencias en &lt;code&gt;.git/refs&lt;/code&gt; y algunos archivos como &lt;code&gt;.git/HEAD&lt;/code&gt; y &lt;code&gt;.git/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ahora es fácil entender qué significa &lt;strong&gt;Fast Forward&lt;/strong&gt;: Podemos actualizar la rama sin necesidad de generar nuevos objetos. Es decir: basta actualizar las referencias.&lt;/p&gt;
&lt;p&gt;También es fácil entender que un &lt;code&gt;add&lt;/code&gt; guarda &lt;strong&gt;diffs&lt;/strong&gt; en un archivo llamado &lt;code&gt;.git/index&lt;/code&gt; (por eso a veces se llama &lt;strong&gt;index&lt;/strong&gt; al &lt;strong&gt;stage&lt;/strong&gt;). Y es aquí donde también se guarda la información del &lt;code&gt;stash&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Sabiendo cómo funciona &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt;, resulta fácil saber si se puede o no se puede hacer algo. Basta imaginar cómo se haría a mano.&lt;/p&gt;
&lt;h2 id=&#34;eficiencia&#34;&gt;Eficiencia&lt;/h2&gt;
&lt;p&gt;Pero no todo es tan sencillo. &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt; realizar algunas operaciones para ser más eficiente. En concreto, realiza empaquetados de objetos (por defecto, 6700) para facilitar operaciones. Estos objetos empaquetados pueden estar repetidos: empaquetados y sin empaquetar.&lt;/p&gt;
&lt;p&gt;Los paquetes permiten facilitar los envíos de archivos. Así un &lt;code&gt;clone&lt;/code&gt; será mucho más rápido, ya que basta enviar un único archivo en lugar de 6700. Además, la copia local ocupará menos. Y es poco probable que nadie necesite acceder a estos archivos antiguos.&lt;/p&gt;
&lt;p&gt;Cuando alguien accede, se desempaqueta y así el archivo está duplicado: empaquetado y sin empaquetar. De esta manera se conserva la eficiencia a costa de un poco de espacio. Periódicamente, &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt; puede decidir borrar los objetos que ya estaban empaquetados.&lt;/p&gt;
&lt;h2 id=&#34;más-información&#34;&gt;Más información&lt;/h2&gt;
&lt;p&gt;Todo, absolutamente todo lo contado en este post se encuentra en el libro &lt;a href=&#34;http://git-scm.com/book/es&#34;&gt;progit&lt;/a&gt;, de &lt;a href=&#34;http://scottchacon.com/&#34;&gt;Scott Chacon&lt;/a&gt;. Probablemente, también en la web de &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Usando Git(2): varios working copies</title>
      <link>https://magmax.org/blog/usando-git2/</link>
      <pubDate>Tue, 22 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/usando-git2/</guid>
      <description>
        
          &lt;p&gt;El el tutorial anterior, &lt;a href=&#34;https://magmax.org/blog/usando-git/&#34;&gt;Usando Git(1)&lt;/a&gt;, vimos cómo se inicia un proyecto en Git. En esta ocasión continuaremos con dicho proyecto, haciéndolo crecer hacia nuevos retos.&lt;/p&gt;
&lt;p&gt;En esta ocasión dispondremos de varios &lt;strong&gt;working copies&lt;/strong&gt; de la aplicación, lo que provocará que necesitemos más órdenes &lt;a href=&#34;http://git-scm.com/&#34; title=&#34;Official Git page&#34;&gt;Git&lt;/a&gt;. Algunas de ellas van siendo algo avanzadas.&lt;/p&gt;
&lt;p&gt;Trataré de introducirlas en un orden lógico, a medida que podemos ir necesitándolas.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/git.png&#34;
         alt=&#34;Git&#34;/&gt; 
&lt;/figure&gt;

&lt;h1 id=&#34;recordando&#34;&gt;Recordando&lt;/h1&gt;
&lt;p&gt;No viene mal repasar el dibujo que derrocha arte:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;-----------   1   ---------
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;| Working |&amp;lt;-----&amp;gt;| Stash |
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;|  copy   |       ---------
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;-----------
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;     ^
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;     |2
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;     |
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;     v
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;----------   3   ---------   4    ----------
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;|  Index |&amp;lt;-----&amp;gt;| Local |&amp;lt;------&amp;gt;| Remote |
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;----------       ---------        ----------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ya conocemos las 5 zonas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Working copy&lt;/strong&gt; con los archivos a modificar.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stash&lt;/strong&gt; o cajón de sastre que aún no hemos utilizado&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Index&lt;/strong&gt; para preparar nuestros &lt;em&gt;commits&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;local&lt;/strong&gt;, nombre que le dimos a los archivos ocultos de &lt;a href=&#34;http://git-scm.com/&#34; title=&#34;Official Git page&#34;&gt;Git&lt;/a&gt; en nuestra máquina&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;remote&lt;/strong&gt;, con los archivos de &lt;a href=&#34;http://git-scm.com/&#34; title=&#34;Official Git page&#34;&gt;Git&lt;/a&gt; remotos.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Insisto una vez más en no confundier el &lt;strong&gt;Stash&lt;/strong&gt; con el &lt;strong&gt;Index&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;En esta ocasión, a penas hablaremos del &lt;strong&gt;Index&lt;/strong&gt;, pero sí del &lt;strong&gt;Stash&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id=&#34;progresando&#34;&gt;Progresando&lt;/h1&gt;
&lt;p&gt;Continuamos con el &lt;em&gt;&amp;ldquo;Proyecto Fantabuloso&amp;rdquo;&lt;/em&gt; que nos va a hacer millonarios. Los ciclos &lt;code&gt;add&lt;/code&gt; y &lt;code&gt;commit&lt;/code&gt; dentro de ciclos &lt;code&gt;push&lt;/code&gt; nos funcionan bien, pero tenemos que viajar. La máquina de viaje, a la que llamaremos &lt;em&gt;Fog&lt;/em&gt; en honor a  &lt;a href=&#34;http://es.wikipedia.org/wiki/Phileas_Fogg&#34; title=&#34;Phileas Fogg, protagonista de &#39;la vuelta al mundo en 80 días&#39;, en Wikipedia&#34;&gt;Phileas Fogg&lt;/a&gt;, es un poco pesada pero también un poco lenta. Por eso en casa preferimos utilizar &lt;em&gt;Flash&lt;/em&gt;, ya que es más rápida.&lt;/p&gt;
&lt;p&gt;Primero tenemos que realizar la puesta a punto de &lt;em&gt;Fogg&lt;/em&gt;, cosa que ya sabemos hacer:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ git clone git://example.com/fantabulosum.git
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;Cloning into &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fantabulosum&amp;#39;&lt;/span&gt;...
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Muy bien. ¿Y ahora qué? Si modificamos los archivos de &lt;em&gt;Fogg&lt;/em&gt;, &lt;em&gt;Flash&lt;/em&gt; estará desactualizada y viceversa. Supongamos que hicimos cambios en &lt;em&gt;Flash&lt;/em&gt;, &lt;em&gt;pusheamos&lt;/em&gt; y tenemos &lt;em&gt;Fogg&lt;/em&gt; desactualizada. Existe una orden para traerse los cambios de &lt;strong&gt;remote&lt;/strong&gt; a &lt;strong&gt;local&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ git fetch
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;remote: Counting objects: 5, &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;.
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;remote: Total &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;delta 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, reused &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;delta 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;Unpacking objects: 100% &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;3/3&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;.
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;From git://example.com/fantabulosum.git
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;   59aff13..8e328dc  master     -&amp;gt; origin/master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;http://git-scm.com/&#34; title=&#34;Official Git page&#34;&gt;Git&lt;/a&gt; puede parecer demasiado verboso cuando se está comenzando. No hace falta pelearse con toda esa información aún. Simplemente es necesario saber que ya tenemos en &lt;strong&gt;local&lt;/strong&gt; todo lo que está en &lt;strong&gt;remote&lt;/strong&gt;. El problema es que nuestra &lt;strong&gt;working copy&lt;/strong&gt; no tiene todo lo que está en &lt;strong&gt;local&lt;/strong&gt;. Podemos verlo fácilmente:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ git status
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# On branch master&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Your branch is behind &amp;#39;origin/master&amp;#39; by 1 commit, and can be fast-forwarded.&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;nothing to commit &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;working directory clean&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Me está diciendo que mi rama está 1 &lt;em&gt;commit&lt;/em&gt; por detrás de lo que hay en el &lt;strong&gt;remote&lt;/strong&gt;, y que puede ser &lt;em&gt;&amp;ldquo;fast-forwardeada&amp;rdquo;&lt;/em&gt;. Eso sólo significa que alguien (yo) ha hecho cambios en &lt;strong&gt;remote&lt;/strong&gt; y que aún no los tengo en mi &lt;strong&gt;working copy&lt;/strong&gt;. Vamos, lo que ya sabíamos.&lt;/p&gt;
&lt;p&gt;Hay distintas maneras de realizar esa operación, el &lt;em&gt;&amp;ldquo;fast-forward&amp;rdquo;&lt;/em&gt;. &lt;em&gt;&amp;ldquo;Fast-forward&amp;rdquo;&lt;/em&gt; tan sólo significa que &amp;ldquo;podemos avanzar sin problemas&amp;rdquo;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ git merge origin/master
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;Updating 8e328dc..d7ff170
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;Fast-forward
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt; README |    &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; +-
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Cuando hicimos el &lt;code&gt;status&lt;/code&gt; nos dijo que estábamos por detrás de &lt;em&gt;&amp;ldquo;origin/master&amp;rdquo;&lt;/em&gt;, así que es de suponer que &lt;em&gt;&amp;ldquo;origin/master&amp;rdquo;&lt;/em&gt; es como se llama al punto en que nos encontramos en &lt;strong&gt;remote&lt;/strong&gt;. Y así es.&lt;/p&gt;
&lt;p&gt;Al decir que queremos &lt;em&gt;mezclar&lt;/em&gt; la versión que hay en &lt;strong&gt;remote&lt;/strong&gt;, &lt;a href=&#34;http://git-scm.com/&#34; title=&#34;Official Git page&#34;&gt;Git&lt;/a&gt; se da cuenta de que mezclar los cambios es sencillo y lo hace sin problemas. De esta manera es como si hubiéramos realizado nuestros siempre en &lt;em&gt;Fogg&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Ya podemos continuar con nuestros ciclos &lt;code&gt;add&lt;/code&gt;-&lt;code&gt;commit&lt;/code&gt;-&lt;code&gt;push&lt;/code&gt; tranquilamente.&lt;/p&gt;
&lt;h1 id=&#34;conflictos&#34;&gt;Conflictos&lt;/h1&gt;
&lt;p&gt;El escenario es el siguiente: en el tren la cobertura es muy mala y nos hemos visto obligados a continuar trabajando a sabiendas de que hay cambios en &lt;strong&gt;remote&lt;/strong&gt;. Hemos realizado distintos ciclos &lt;code&gt;add&lt;/code&gt;-&lt;code&gt;commit&lt;/code&gt;, de manera que tenemos algo así:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;         A---B---C Flash
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;        /
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;   D---E---F---G Fogg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Explico el gráfico: en el punto E pude hacer un &lt;code&gt;fetch&lt;/code&gt; y, por tanto, en ese punto &lt;em&gt;Flash&lt;/em&gt; y &lt;em&gt;Fogg&lt;/em&gt; son iguales. A partir de ahí cada una tiene unos cambios que no tiene la otra.&lt;/p&gt;
&lt;p&gt;En cuanto llegamos a casa queremos arreglar este estropicio&amp;hellip; Estamos seguros de que nos llevará horas.&lt;/p&gt;
&lt;p&gt;Primero nos vamos a una máquina y hacemos &lt;em&gt;push&lt;/em&gt;. No hay problemas. Ahora nos vamos a la otra y tratamos de hacer lo mismo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ git push
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;To fantabulosum
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt; ! &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rejected&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;        master -&amp;gt; master &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;non-fast-forward&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;error: failed to push some refs to &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;git://example.com/fantabulosum.git&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;hint: Updates were rejected because the tip of your current branch is behind
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;hint: its remote counterpart. Merge the remote changes &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;e.g. &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;git pull&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;hint: before pushing again.
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt;hint: See the &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Note about fast-forwards&amp;#39;&lt;/span&gt; in &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;git push --help&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; details.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;¡Horror! Pero&amp;hellip; ¿qué me está diciendo&amp;hellip;? Dice que use &lt;code&gt;pull&lt;/code&gt;, pero no sé qué es eso. Vamos a hacer lo que hicimos antes, a ver qué ocurre:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ git fetch
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;remote: Counting objects: 8, &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;.
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;remote: Compressing objects: 100% &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2/2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;.
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;remote: Total &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;delta 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, reused &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;delta 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;Unpacking objects: 100% &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;6/6&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;.
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;From git://example.com/fantabulosum.git
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;   d7ff170..50ef0c0  master     -&amp;gt; origin/master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hmmm&amp;hellip;. parece que no se queja. ¿Y si mezclamos? Bien, en ese caso pueden ocurrir dos cosas:&lt;/p&gt;
&lt;h2 id=&#34;el-mundo-es-precioso-y-maravilloso&#34;&gt;El mundo es precioso y maravilloso&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ git merge origin/master
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Se nos abre un editor&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;Merge made by the &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;recursive&amp;#39;&lt;/span&gt; strategy.
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt; README |    &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; ++++
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; file changed, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; insertions&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Durante la operación se ha abierto un editor para que escribamos un comentario. Eso es porque &lt;a href=&#34;http://git-scm.com/&#34; title=&#34;Official Git page&#34;&gt;Git&lt;/a&gt; ha sido capaz de resolver los conflictos y no necesita nuestra ayuda. Durante esta resolución, necesitó hacer un &lt;em&gt;commit&lt;/em&gt; con los cambios de los dos sitios.&lt;/p&gt;
&lt;p&gt;Resultado: ya está todo listo para continuar. Hacemos &lt;code&gt;push&lt;/code&gt;, nos vamos a la otra máquina, hacemos &lt;code&gt;fetch&lt;/code&gt; y &lt;code&gt;status&lt;/code&gt; y veremos que está todo preparado para hacer un &lt;em&gt;&amp;ldquo;fast-forward&amp;rdquo;&lt;/em&gt;, por lo que podemos hacer un &lt;code&gt;merge&lt;/code&gt; y seguir trabajando como si nada.&lt;/p&gt;
&lt;h2 id=&#34;el-mundo-tiene-caminos-llenos-de-piedras&#34;&gt;El mundo tiene caminos llenos de piedras&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ git merge origin/master
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;Auto-merging README
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;CONFLICT &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;add/add&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: Merge conflict in README
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;Automatic merge failed; fix conflicts and &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt; commit the result.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;La mezcla automática ha fallado, lo arreglo y hago &lt;em&gt;commit&lt;/em&gt;. Pues muy bien. Vamos a ello.&lt;/p&gt;
&lt;p&gt;Lo primero será editar el archivo del conflicto. Aunque nos lo dice el mensaje, podemos consultarlo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ git status
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# On branch master&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Unmerged paths:&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#   (use &amp;#34;git add/rm &amp;lt;file&amp;gt;...&amp;#34; as appropriate to mark resolution)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#	both added:         README&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt;no changes added to commit &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;use &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git add&amp;#34;&lt;/span&gt; and/or &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git commit -a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;veamos lo que contiene el archivo README. Veremos que será algo como esto:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;B
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;B
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;B
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;=======
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;A
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;A
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;A
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;A
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; origin/master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;¿Qué significa esto? Las líneas de &amp;ldquo;===&amp;rdquo; separan dos zonas, la de mis cambios en &lt;strong&gt;local&lt;/strong&gt; (HEAD) de los cambios en &lt;strong&gt;remote&lt;/strong&gt; (origin/master). Basta con editarlo como me guste a mí y borrar esas marcas. Una vez hecho, realizo el &lt;code&gt;add&lt;/code&gt;-&lt;code&gt;commit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Una vez realizado, podemos volver a intentar un &lt;code&gt;merge&lt;/code&gt;. Si hay suerte, habremos terminado o &lt;a href=&#34;http://git-scm.com/&#34; title=&#34;Official Git page&#34;&gt;Git&lt;/a&gt; será capaz de realizar los cambios por nosotros. Si no hay suerte&amp;hellip; Habremos encontrado otra piedra, pero ya sabemos cómo resolver los conflictos.&lt;/p&gt;
&lt;h1 id=&#34;continuando&#34;&gt;Continuando&lt;/h1&gt;
&lt;p&gt;Hemos resuelto el problema. Ahora sabemos cómo trabajar desde dos máquinas sin importarnos perder la cobertura. &lt;a href=&#34;http://git-scm.com/&#34; title=&#34;Official Git page&#34;&gt;Git&lt;/a&gt; comienza a demostrarnos el por qué de su fama.&lt;/p&gt;
&lt;h1 id=&#34;alto-un-bug&#34;&gt;¡Alto! ¡Un bug!&lt;/h1&gt;
&lt;p&gt;Mierda. Estábamos tan enfrascados en una característica nueva que no nos dimos cuenta y cometimos un error. Tenemos cambios en la &lt;strong&gt;working copy&lt;/strong&gt; que no queremos perder, pero tampoco queremos que vayan en esta revisión (y recordemos que aún no sabemos qué coño es eso de las &amp;ldquo;ramas&amp;rdquo;).&lt;/p&gt;
&lt;p&gt;¿Qué podemos hacer?&lt;/p&gt;
&lt;p&gt;Bien, pues basta con guardarlo en un cajón. Y nuestro cajón se llama &lt;strong&gt;stash&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ git stash
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;Saved working directory and index state WIP on master: 4421e44 merge
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;HEAD is now at 4421e44 merge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ahora podemos arreglar el bug, que era cosa de poco. Realizamos nuestro ciclo &lt;code&gt;add&lt;/code&gt;-&lt;code&gt;commit&lt;/code&gt;-&lt;code&gt;push&lt;/code&gt; y&amp;hellip; ¿dónde lo habíamos dejado? Ah, sí, en el &lt;strong&gt;stash&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;$ git stash pop
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# On branch master&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Changes not staged for commit:&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#   (use &amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34; to update what will be committed)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#   (use &amp;#34;git checkout -- &amp;lt;file&amp;gt;...&amp;#34; to discard changes in working directory)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#	modified:   README&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;no changes added to commit &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;use &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git add&amp;#34;&lt;/span&gt; and/or &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git commit -a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;Dropped refs/stash@&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;38f9609d4842369156d00d3e9632be475e14a2de&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;¿¿¿Cómo??? ¡¡Nos ha restaurado el espacio de trabajo!!&lt;/p&gt;
&lt;p&gt;Al restaurar, igual que en un &lt;code&gt;merge&lt;/code&gt;, puede haber conflictos. Pero eso ya no nos asusta, ¿verdad?&lt;/p&gt;
&lt;p&gt;Hay un par de órdenes muy interesantes, como &lt;code&gt;stash list&lt;/code&gt;, para ver qué tenemos en el &lt;strong&gt;stash&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ git stash list
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;stash@&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;: WIP on master: 4421e44 merge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;o &lt;code&gt;stash show&lt;/code&gt;, para ver qué está modificado:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ git stash show
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt; README |    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; +++
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; file changed, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; insertions&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;suficiente-por-ahora&#34;&gt;Suficiente por ahora&lt;/h1&gt;
&lt;p&gt;Y ya somos capaces de valernos por nosotros mismos. Nuestro &lt;em&gt;&amp;ldquo;Proyecto Fantabuloso&amp;rdquo;&lt;/em&gt; progresa y no hemos necesitado ramas.&lt;/p&gt;
&lt;p&gt;Veamos lo que hemos aprendido:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Traer información del repositorio: &lt;code&gt;git fetch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Mezclar la &lt;strong&gt;working copy&lt;/strong&gt; y &lt;strong&gt;local&lt;/strong&gt;: &lt;code&gt;git merge origin/master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Resolver conflictos&lt;/li&gt;
&lt;li&gt;Meter en el &lt;strong&gt;stash&lt;/strong&gt;: &lt;code&gt;git stash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Sacar del &lt;strong&gt;stash&lt;/strong&gt;: &lt;code&gt;git stash pop&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;más-información&#34;&gt;Más información&lt;/h1&gt;
&lt;p&gt;De nuevo recomiendo la web de &lt;a href=&#34;http://git-scm.com/&#34; title=&#34;Official Git page&#34;&gt;Git&lt;/a&gt; o el libro &lt;a href=&#34;http://git-scm.com/book/es&#34; title=&#34;Libro gratuíto sobre Git&#34;&gt;progit&lt;/a&gt;, de &lt;a href=&#34;http://scottchacon.com/&#34;&gt;Scott Chacon&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Usando Git(1)</title>
      <link>https://magmax.org/blog/usando-git/</link>
      <pubDate>Fri, 18 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/usando-git/</guid>
      <description>
        
          &lt;p&gt;Es habitual encontrar manuales de &lt;a href=&#34;http://git-scm.com/&#34; title=&#34;Official Git page&#34;&gt;Git&lt;/a&gt; en los que se describe la estructura interna de los &lt;em&gt;changesets&lt;/em&gt;, los ficheros y otras tecnicidades similares. Sin embargo, el otro día nos reunimos en &lt;a href=&#34;https://sites.google.com/site/agileciudadreal/home&#34; title=&#34;Agile Ciudad Real&#34;&gt;Agile-cr&lt;/a&gt; y sin quererlo me di cuenta de lo sencillo que resulta explicarlo sin hablar de nada de eso.&lt;/p&gt;
&lt;p&gt;Así que voy a intentarlo :D&lt;/p&gt;
&lt;p&gt;A pesar de haber escrito ya &lt;a href=&#34;https://magmax.org/blog/git/&#34;&gt;otro artículo sobre Git&lt;/a&gt;, creo que esta vez voy ha contarlo desde un punto de vista muy diferente: uno completamente práctico.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/git.png&#34;
         alt=&#34;Git&#34;/&gt; 
&lt;/figure&gt;

&lt;h1 id=&#34;a-vista-de-pájaro&#34;&gt;A vista de pájaro&lt;/h1&gt;
&lt;p&gt;Por mucho que quiera evitar tecnicidades, hay algunos términos que no resulta fácil evitar. Voy a tratar de reducirlos al mínimo.&lt;/p&gt;
&lt;p&gt;Comencemos con un dibujo lleno de &lt;em&gt;glamour&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;-----------   1   ---------
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;| Working |&amp;lt;-----&amp;gt;| Stash |
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;|  copy   |       ---------
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;-----------
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;     ^
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;     |2
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;     |
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;     v
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;----------   3   ---------   4    ----------
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;|  Stage |&amp;lt;-----&amp;gt;| Local |&amp;lt;------&amp;gt;| Remote |
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;----------       ---------        ----------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Como véis, he pintado 5 zonas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Working copy&lt;/strong&gt;, que se corresponde con el espacio de trabajo, la zona habitual donde están los archivos que iremos modificando.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stash&lt;/strong&gt;, que es el cajón de sastre, donde podemos guardar los retales para utilizarlos luego. Podemos olvidarnos de esto por el momento, pero es interesante que sepamos de su existencia.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stage&lt;/strong&gt;, la rampa de lanzamiento, donde se van colocando las cosas que vamos a querer persistir.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;local&lt;/strong&gt;, que se corresponde con los archivos internos de &lt;a href=&#34;http://git-scm.com/&#34; title=&#34;Official Git page&#34;&gt;Git&lt;/a&gt; en la máquina local. Realmente, el &lt;strong&gt;stash&lt;/strong&gt; y el &lt;strong&gt;index&lt;/strong&gt; (antes conocido como &lt;strong&gt;stage&lt;/strong&gt;) forman parte de este bloque, pero separémoslo de forma didáctica.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;remote&lt;/strong&gt;, con los archivos de &lt;a href=&#34;http://git-scm.com/&#34; title=&#34;Official Git page&#34;&gt;Git&lt;/a&gt; remotos.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Además, he marcado en el dibujo 4 procesos, todos ellos de dos direcciones, indicando las interacciones que pueden realizarse. Hay alguna de ellas que podemos saltarnos&amp;hellip; Pero vamos a suponer en este artículo que no es así, por simplicidad. Y por simplicidad también, veremos sólo los puntos 2, 3 y 4.&lt;/p&gt;
&lt;p&gt;Es importante no confundir el &lt;strong&gt;Stage&lt;/strong&gt; con el &lt;strong&gt;Stash&lt;/strong&gt;. En este artículo sólo hablaremos del &lt;strong&gt;Stage&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Y, a partir de ahora, mostraré cómo se suele trabajar con un repositorio tipo &lt;a href=&#34;http://git-scm.com/&#34; title=&#34;Official Git page&#34;&gt;Git&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;proceso&#34;&gt;Proceso&lt;/h1&gt;
&lt;h2 id=&#34;creación&#34;&gt;Creación&lt;/h2&gt;
&lt;p&gt;Vamos a comenzar el &lt;em&gt;&amp;ldquo;Proyecto Fantabuloso&amp;rdquo;&lt;/em&gt;. Tenemos una idea en la cabeza y decidimos ponerla en práctica. Lo suyo sería comenzar escribiendo nuestras intenciones, por si acaso mañana nos olvidamos, así que escribiremos un archivo &lt;strong&gt;README&lt;/strong&gt; indicando de qué va nuestro &lt;em&gt;&amp;ldquo;Proyecto Fantabuloso&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Ya tenemos algo, y decidimos que vamos a utilizar un repositorio. Y &lt;a href=&#34;http://git-scm.com/&#34; title=&#34;Official Git page&#34;&gt;Git&lt;/a&gt; nos parece una buena idea.&lt;/p&gt;
&lt;p&gt;Lo primero es crear la estructura. Necesitamos que &lt;a href=&#34;http://git-scm.com/&#34; title=&#34;Official Git page&#34;&gt;Git&lt;/a&gt; haga un poco de magia y nos prepare la zona de trabajo. Para ello:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ git init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y ya se han creado el &lt;strong&gt;stash&lt;/strong&gt;, &lt;strong&gt;index&lt;/strong&gt; y, por llamarlo de alguna forma, &lt;strong&gt;local&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Queremos añadir nuestro &lt;strong&gt;README&lt;/strong&gt; para seguir su evolución. Para ello, primero tenemos que registrarlo en el &lt;strong&gt;index&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ git add README
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Resulta dificil describir este &lt;strong&gt;index&lt;/strong&gt;. Digamos que es como una pizarra en la que se va apuntando lo que se desea hacer. Así podemos ir viendo lo que estamos preparando y, una vez hecho, persistirlo definitivamente.&lt;/p&gt;
&lt;p&gt;Con el comando anterior ya hemos preparado todo lo que queremos guardar en nuestro &lt;strong&gt;index&lt;/strong&gt;, así que persistimos:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Explaining about the Fantabulosum Project&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;master &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;root-commit&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 59aff13&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Explaining about the Fantabulosum Project
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; files changed
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt; create mode &lt;span style=&#34;color:#ae81ff&#34;&gt;100644&lt;/span&gt; README
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Esta orden limpia el &lt;strong&gt;index&lt;/strong&gt; y guarda todo lo que se encuentre allí en la copia &lt;strong&gt;local&lt;/strong&gt; del repositorio. Ya está persistido. Podemos continuar con ciclos de &lt;code&gt;add&lt;/code&gt; y &lt;code&gt;commit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Podéis ejecutarlo son la opción &lt;code&gt;-m&lt;/code&gt; y se os abrirá vuestro editor favorito para que escribáis el mensaje.&lt;/p&gt;
&lt;p&gt;Para comprobar el estado del &lt;strong&gt;working copy&lt;/strong&gt; y del &lt;strong&gt;index&lt;/strong&gt; podéis usar la orden siguiente:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;$ git status
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# On branch master&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Initial commit&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Changes to be committed:&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#   (use &amp;#34;git rm --cached &amp;lt;file&amp;gt;...&amp;#34; to unstage)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#	new file:   README&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Untracked files:&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#   (use &amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34; to include in what will be committed)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#	ignored&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;En este ejemplo vemos cómo el archivo &lt;em&gt;README&lt;/em&gt; está preparado para ser añadido, mientras que el archivo &lt;em&gt;ignored&lt;/em&gt; no se está siguiendo. Vemos también cómo &lt;a href=&#34;http://git-scm.com/&#34; title=&#34;Official Git page&#34;&gt;Git&lt;/a&gt; nos ofrece cierta ayuda con órdenes que podemos utilizar, para sacarlo del &lt;strong&gt;index&lt;/strong&gt; o para añadir archivos que actualmente se están ignorando.&lt;/p&gt;
&lt;h2 id=&#34;backups&#34;&gt;Backups&lt;/h2&gt;
&lt;p&gt;Nuestro proyecto evoluciona y nos entra miedo de perder el &lt;em&gt;&amp;ldquo;Proyecto Fantabuloso&amp;rdquo;&lt;/em&gt;, así que queremos hacer un &lt;em&gt;backup&lt;/em&gt;. Pero&amp;hellip; ¿Por qué un complicado &lt;em&gt;backup&lt;/em&gt; cuando podemos tener nuestro repositorio accesible en remoto?&lt;/p&gt;
&lt;p&gt;Así que nos vamos a &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;, &lt;a href=&#34;https://bitbucket.org&#34;&gt;BitBucket&lt;/a&gt; o algún otro lugar gratuito y creamos allí un repositorio. Debería ser tan simple como pulsar un botón y ponerle un nombre. Una vez hecho eso, nos darán una dirección, algo como &lt;em&gt;&amp;ldquo;git://example.com/fantabulosum.git&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Otra opción es creárnoslo nosotros. Pero aquí ya entran temas de red en los que no quiero entrar. Por eso sólo voy a explicar cómo crearlo en un repositorio local, es decir, en otro directorio:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;/opt/repos/fantabulosum$ git init --bare --shared
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;Initialized empty shared Git repository in /opt/repos/fantabulosum
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Esto nos daría la ruta &lt;em&gt;&amp;quot;/opt/repos/fantabulosum&amp;quot;&lt;/em&gt; o bien &lt;em&gt;&amp;ldquo;ssh://user@machine:/opt/repos/fantabulosum&amp;rdquo;&lt;/em&gt; para utilizar como dirección del repositorio. Todas ellas se usarían igual a partir de ahora, así que disculpad que yo siga usando &lt;em&gt;&amp;ldquo;git://example.com/fantabulosum.git&amp;rdquo;&lt;/em&gt; nada más.&lt;/p&gt;
&lt;p&gt;Ya tenemos creado &lt;strong&gt;local&lt;/strong&gt; y &lt;strong&gt;remote&lt;/strong&gt;, pero no hay nada que los una. Así que desde mi &lt;strong&gt;working copy&lt;/strong&gt; tengo que enlazarlos:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ git remote add origin git://example.com/fantabulosum.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Al enlazarlos, le hemos dado un nombre al enlace. Lo habitual es, como en este caso, usar &lt;em&gt;origin&lt;/em&gt; como nombre del &lt;strong&gt;remote&lt;/strong&gt; principal. Una vez enlazados, podemos empujar algunos cambios de &lt;strong&gt;local&lt;/strong&gt; a &lt;strong&gt;remote&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ git push origin master
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;Counting objects: 3, &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;.
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;Writing objects: 100% &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;3/3&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;243&lt;/span&gt; bytes, &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;.
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;Total &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;delta 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, reused &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;delta 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;Unpacking objects: 100% &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;3/3&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;.
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;To git://example.com/fantabulosum.git
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt; * &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;new branch&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;      master -&amp;gt; master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sabemos qué es &lt;em&gt;origin&lt;/em&gt;, el nombre que hemos puesto a nuestro &lt;strong&gt;remote&lt;/strong&gt;, pero no qué es &lt;em&gt;master&lt;/em&gt;. Fijáos que hasta ahora no he necesitado hablar de eso tan feo que son las &lt;strong&gt;ramas&lt;/strong&gt;. Y aún no lo voy a hacer.&lt;/p&gt;
&lt;p&gt;Baste saber de momento que &lt;a href=&#34;http://git-scm.com/&#34; title=&#34;Official Git page&#34;&gt;Git&lt;/a&gt; tiene ramas y que si no te pones a hacer marranadas estarás en una rama cuyo nombre es &lt;em&gt;master&lt;/em&gt;. Suficiente de momento.&lt;/p&gt;
&lt;p&gt;Como es la primera vez que se hace un &lt;code&gt;push&lt;/code&gt;, se enlaza la rama &lt;em&gt;master&lt;/em&gt; y el &lt;strong&gt;remote&lt;/strong&gt; &lt;em&gt;origin&lt;/em&gt;, de manera que ya basta hacer:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ git push
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;Everything up-to-date
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Así que, a partir de ahora, a nuestros ciclos de editar, &lt;code&gt;add&lt;/code&gt; y &lt;code&gt;push&lt;/code&gt; se verán envueltos dentro de ciclos &lt;code&gt;push&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;recuperando&#34;&gt;Recuperando&lt;/h3&gt;
&lt;p&gt;Un mal día se nos jode el ordenador. Pero no es un problema, porque como tenemos nuestros &lt;em&gt;backups&lt;/em&gt; podemos recuperarlo todo rápidamente:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ git clone git://example.com/fantabulosum.git
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;Cloning into &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fantabulosum&amp;#39;&lt;/span&gt;...
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y ya está. A seguir trabajando.&lt;/p&gt;
&lt;h2 id=&#34;deshaciendo&#34;&gt;Deshaciendo&lt;/h2&gt;
&lt;p&gt;No sé los demás, pero yo muchas veces me equivoco: se me olvida añadir un archivo, añado uno de más, me equivoco en el mensaje del commit&amp;hellip; Esas pequeñas cosas.&lt;/p&gt;
&lt;p&gt;En estos casos la solución es preparar el &lt;strong&gt;index&lt;/strong&gt; de acuerdo a como lo quiero y luego ejecutar:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;new message&amp;#34;&lt;/span&gt; --amend
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y asunto arreglado.&lt;/p&gt;
&lt;p&gt;Cuando meto la pata aún más y no es tan fácil arreglarlo, también hay solución. Pero tendría que liarme a hablar de cosas raras y no es el momento. Lo veremos más adelante.&lt;/p&gt;
&lt;h1 id=&#34;más-que-suficiente&#34;&gt;Más que suficiente.&lt;/h1&gt;
&lt;p&gt;Y esto es todo lo que se necesita para trabajar con &lt;a href=&#34;http://git-scm.com/&#34; title=&#34;Official Git page&#34;&gt;Git&lt;/a&gt;. Resumiendo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Crear repositorio: &lt;code&gt;git init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Crear repositorio compartido: &lt;code&gt;git init --bare --shared&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Añadir un archivo al &lt;strong&gt;index&lt;/strong&gt;: &lt;code&gt;git add file&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Persistir el &lt;strong&gt;index&lt;/strong&gt;: &lt;code&gt;git commit -m &amp;quot;message&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Comprobar el estado del &lt;strong&gt;index&lt;/strong&gt;: &lt;code&gt;git status&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;La &lt;strong&gt;branch&lt;/strong&gt; principal suele ser &lt;em&gt;&amp;ldquo;master&amp;rdquo;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Enviar cambios de &lt;strong&gt;local&lt;/strong&gt; a &lt;strong&gt;remote&lt;/strong&gt; por primera vez: &lt;code&gt;git push remote branch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Enviar cambios de &lt;strong&gt;local&lt;/strong&gt; a &lt;strong&gt;remote&lt;/strong&gt;: &lt;code&gt;git push&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Clonar el repositorio: &lt;code&gt;git clone URL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En el próximo artículo continuaremos haciendo crecer nuestro &lt;em&gt;&amp;ldquo;Proyecto Fantabuloso&amp;rdquo;&lt;/em&gt; y viendo más órdenes de &lt;a href=&#34;http://git-scm.com/&#34; title=&#34;Official Git page&#34;&gt;Git&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;desmitificando-git&#34;&gt;Desmitificando Git&lt;/h1&gt;
&lt;p&gt;Como véis, no es dificil trabajar con &lt;a href=&#34;http://git-scm.com/&#34; title=&#34;Official Git page&#34;&gt;Git&lt;/a&gt;. La dificultad comienza cuando se empiezan a utilizar ramas, cuando se comparten repositorios, etc. Es decir: cuando se hacen marranadas. Pues bien, comentaremos estas marranadas en próximos posts XD&lt;/p&gt;
&lt;h1 id=&#34;más-información&#34;&gt;Más información&lt;/h1&gt;
&lt;p&gt;Recomiendo la web de &lt;a href=&#34;http://git-scm.com/&#34; title=&#34;Official Git page&#34;&gt;Git&lt;/a&gt; o el libro &lt;a href=&#34;http://git-scm.com/book/es&#34; title=&#34;Libro gratuíto sobre Git&#34;&gt;progit&lt;/a&gt;, de &lt;a href=&#34;http://scottchacon.com/&#34;&gt;Scott Chacon&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Hg vs Git</title>
      <link>https://magmax.org/blog/comparativa-mercurial-git/</link>
      <pubDate>Mon, 27 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/comparativa-mercurial-git/</guid>
      <description>
        
          &lt;p&gt;Vamos con tópicos: Mercurial vs Git.&lt;/p&gt;
&lt;p&gt;Voy a intentar desmitificar o corroborar rumores, de manera unívoca y que cualquiera pueda reproducir.&lt;/p&gt;
&lt;p&gt;Este artículo y los siguientes admiten colaboraciones :D&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/gitvshg.png&#34;
         alt=&#34;Git vs Mercurial&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;este-artículo-es-un-coñazo&#34;&gt;Este artículo es un coñazo&lt;/h2&gt;
&lt;p&gt;Pues sí. Este artículo es un coñazo total. Por eso voy a comenzar por el final: las conclusiones. Así, los crédulos, pueden evitarse la parte de demostración y leer sólo las conclusiones. Los incrédulos pueden llegar hasta el final y comprobar que he tratado de ser todo lo objetivo posible.&lt;/p&gt;
&lt;h2 id=&#34;conclusiones&#34;&gt;Conclusiones&lt;/h2&gt;
&lt;p&gt;Aquí tenemos las conclusiones finales:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Si en Mercurial renombras un archivo, el repositorio requiere de nuevo el espacio ocupado por el archivo. En git, la diferencia es inapreciable.&lt;/li&gt;
&lt;li&gt;En Mercurial, dos &amp;ldquo;push&amp;rdquo; simultáneos sin conflicto pueden provocar que el segundo se cancele. En git no ocurre.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Esto demuestra que Git da un mejor rendimiento que Mercurial.&lt;/p&gt;
&lt;h2 id=&#34;críticas&#34;&gt;Críticas&lt;/h2&gt;
&lt;p&gt;Por favor, estoy dispuesto a soportar cualquier tipo de crítica. Sin embargo, me gustaría indicar que este artículo me ha costado &lt;strong&gt;MUCHO&lt;/strong&gt;, ya que no es nada sencillo pensar en las demostraciones y menos realizarlas de manera que se puedan repetir. Y también ha sido compleja la maquetación. Por esa razón, espero que cualquier crítica venga acompañada de demostraciones.&lt;/p&gt;
&lt;p&gt;Sé de algunos otros problemas, pero no puedo demostrarlos, así que me los cayo. Estas pruebas son completamente &lt;strong&gt;OBJETIVAS&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;También acepto demostraciones a favor/en contra de ambos. Sed creativos.&lt;/p&gt;
&lt;h2 id=&#34;agradecimientos&#34;&gt;Agradecimientos&lt;/h2&gt;
&lt;p&gt;Agradezco a &lt;a href=&#34;http://arco.esi.uclm.es/~david.villa/&#34;&gt;David Villa&lt;/a&gt; su paciencia haciendo &lt;em&gt;code review&lt;/em&gt; de estos scripts.
Me equivoqué al pasarle el de Mercurial y se puede decir que lo rehizo él solo.&lt;/p&gt;
&lt;h2 id=&#34;scripts&#34;&gt;Scripts&lt;/h2&gt;
&lt;p&gt;Los &lt;em&gt;Scripts&lt;/em&gt; necesarios para reproducir lo que expongo aquí se pueden encontrar
en &lt;a href=&#34;https://github.com/magmax/git-vs-hg&#34;&gt;github&lt;/a&gt;. Allí será donde haga modificaciones a los mismos.&lt;/p&gt;
&lt;h2 id=&#34;demostraciones&#34;&gt;Demostraciones&lt;/h2&gt;
&lt;h3 id=&#34;si-mueves-un-archivo-en-mercurial-ocupará-espacio-de-nuevo&#34;&gt;Si mueves un archivo en mercurial, ocupará espacio de nuevo&lt;/h3&gt;
&lt;table&gt;

  &lt;tr&gt;

    &lt;th&gt;Mercurial&lt;/th&gt;

    &lt;th&gt;Git&lt;/th&gt;

  
&lt;/tr&gt;


  &lt;tr&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ seq &lt;span style=&#34;color:#ae81ff&#34;&gt;10000000&lt;/span&gt; &amp;gt; $WC1/file
$ ls -lh $WC1
total 6,6M
-rw-r--r-- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; miguel miguel 6,6M may &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; 19:39 file
$ hg -R $WC1 add $WC1/file
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ seq &lt;span style=&#34;color:#ae81ff&#34;&gt;10000000&lt;/span&gt; &amp;gt; $WC1/file
$ ls -lh $WC1
total 6,6M
-rw-r--r-- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; miguel miguel 6,6M may &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; 19:39 file
$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1 add $WC1/file
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

  
&lt;/tr&gt;


  &lt;tr&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ export WC1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/tmp/wc1-hg
$ hg init $WC1
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ export WC1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/tmp/wc1-git
$ git init $WC1
Initialized empty Git repository in /tmp/wc1-git/.git/
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

  
&lt;/tr&gt;


  &lt;tr&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ hg -R $WC1 commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;initial&amp;#34;&lt;/span&gt;
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1 commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;initial&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;master &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;root-commit&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 50f537c&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; initial
 &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; file changed, &lt;span style=&#34;color:#ae81ff&#34;&gt;1000000&lt;/span&gt; insertions&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
 create mode &lt;span style=&#34;color:#ae81ff&#34;&gt;100644&lt;/span&gt; file
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

  
&lt;/tr&gt;


  &lt;tr&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ du -hs
8,7M /tmp/wc1-hg
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ du -hs /tmp/wc1-git
8,9M /tmp/wc1-git
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

  
&lt;/tr&gt;


  &lt;tr&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ hg -R $WC1 mv $WC1/file $WC1/example
$ hg -R $WC1 commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;second&amp;#34;&lt;/span&gt;
$ du -hs $WC1
11M /tmp/wc1-hg
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1 mv file example
$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1 commit -am &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;second&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;master f206fe1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; second
 &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; file changed, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; insertions&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; deletions&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;-&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
 rename file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; example &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;100%&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
$ du -hs $WC1
8,9M /tmp/wc1-git
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

  
&lt;/tr&gt;



&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Conclusión:&lt;/strong&gt; Si mueves un archivo en Mercurial, volverá a ocupar espacio. Si mueves un archivo en git, el repositorio seguirá ocupando lo mismo (prácticamente).&lt;/p&gt;
&lt;h3 id=&#34;conservando-historia-entre-moves&#34;&gt;Conservando historia entre moves&lt;/h3&gt;
&lt;p&gt;Este apartado continúa el script anterior:&lt;/p&gt;
&lt;table&gt;

  &lt;tr&gt;

    &lt;th&gt;Mercurial&lt;/th&gt;

    &lt;th&gt;Git&lt;/th&gt;

  
&lt;/tr&gt;


  &lt;tr&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ hg -R $WC1 mv $WC1/example $WC1/file
$ hg -R $WC1 commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;third&amp;#34;&lt;/span&gt;
$ du -hs $WC1
11M /tmp/wc1-hg
$ hg -R $WC1 log $WC1/file --follow
changeset: 2:3d54fb888504
tag: tip
user: Miguel Angel Garcia &amp;lt;magmax@example.org&amp;gt;
date: Thu Jun &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; 05:31:08 &lt;span style=&#34;color:#ae81ff&#34;&gt;2013&lt;/span&gt; +0200
summary: third

changeset: 1:f13ffb871397
user: Miguel Angel Garcia &amp;lt;magmax@example.org&amp;gt;
date: Thu Jun &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; 05:31:07 &lt;span style=&#34;color:#ae81ff&#34;&gt;2013&lt;/span&gt; +0200
summary: second

changeset: 0:e47df7ca3541
user: Miguel Angel Garcia &amp;lt;magmax@example.org&amp;gt;
date: Thu Jun &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; 05:31:07 &lt;span style=&#34;color:#ae81ff&#34;&gt;2013&lt;/span&gt; +0200
summary: initial
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1 mv example file
$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1 commit -am &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;third&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;master dd45fed&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; third
 &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; file changed, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; insertions&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; deletions&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;-&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
 rename example &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; file &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;100%&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
$ du -hs $WC1
8,9M /tmp/wc1-git
$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1 log -- file
commit dd45fedd449babb33a019f23a2dae244e18f400c
Author: Miguel Angel Garcia &amp;lt;magmax@example.org&amp;gt;
Date: Mon May &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; 19:46:49 &lt;span style=&#34;color:#ae81ff&#34;&gt;2013&lt;/span&gt; +0200

    third

commit f206fe12540494bf1f6f5193bd6234865da75e13
Author: Miguel Angel Garcia &amp;lt;magmax@example.org&amp;gt;
Date: Mon May &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; 19:46:48 &lt;span style=&#34;color:#ae81ff&#34;&gt;2013&lt;/span&gt; +0200

    second

commit 50f537cac82b6499c8519af7c7710211bf96c0c3
Author: Miguel Angel Garcia &amp;lt;magmax@example.org&amp;gt;
Date: Mon May &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; 19:46:48 &lt;span style=&#34;color:#ae81ff&#34;&gt;2013&lt;/span&gt; +0200

    initial
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;


  
&lt;/tr&gt;



&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Conclusión&lt;/strong&gt;: Tanto Mercurial como Git siguen correctamente la historia del archivo. (Gracias, Juan Penalta)&lt;/p&gt;
&lt;p&gt;Como dato curioso, se observa que al volver a mover el archivo, en esta ocasión
no ocupa espacio en mercurial.&lt;/p&gt;
&lt;h3 id=&#34;dos-pushes-simultáneos-sin-conflicto&#34;&gt;Dos &lt;em&gt;pushes&lt;/em&gt; simultáneos sin conflicto&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;NOTA:&lt;/strong&gt; En esta demostración se utilizará el archivo &lt;code&gt;annotate-output&lt;/code&gt;, que se encuentra en el paquete &amp;ldquo;&lt;strong&gt;devscripts&lt;/strong&gt;&amp;rdquo;. Tan solo añade la hora y el tipo de salida (&lt;em&gt;stdout&lt;/em&gt; o &lt;em&gt;stderr&lt;/em&gt;) y redirecciona todo a la salida estándar.&lt;/p&gt;
&lt;table&gt;

  &lt;tr&gt;

    &lt;th&gt;Mercurial&lt;/th&gt;

    &lt;th&gt;Git&lt;/th&gt;

  
&lt;/tr&gt;


  &lt;tr&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ export SERVER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;server-hg
$ export WC1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/tmp/wc1-hg
$ export WC2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/tmp/wc2-hg
$ hg init $SERVER
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ export SERVER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/home/miguel/server-git
$ export WC1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/tmp/wc1-git
$ export WC2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/tmp/wc2-git
$ git --bare init $SERVER
Initialized empty Git repository in /tmp/server-git/
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

  
&lt;/tr&gt;


  &lt;tr&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ echo -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[hooks]\npretxnchangegroup.sleep=sleep 2&amp;#39;&lt;/span&gt; &amp;gt; $SERVER/.hg/hgrc
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ echo -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#!/bin/bash\nsleep 2&amp;#39;&lt;/span&gt; &amp;gt; $SERVER/hooks/post-receive
$ chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;755&lt;/span&gt; $SERVER/hooks/post-receive
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

  
&lt;/tr&gt;


  &lt;tr&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ hg clone ssh://localhost/$SERVER $WC1
no changes found
updating to branch default
&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; files updated, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; files merged, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; files removed, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; files unresolved
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git clone $SERVER $WC1
Cloning into &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/tmp/wc1-git&amp;#39;&lt;/span&gt;...
warning: You appear to have cloned an empty repository.
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;.
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

  
&lt;/tr&gt;


  &lt;tr&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ touch $WC1/file
$ hg -R $WC1 add $WC1/file
$ hg -R $WC1 commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;initial version&amp;#34;&lt;/span&gt;
$ hg -R $WC1 push
pushing to ssh://localhost//tmp/server-hg
searching &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; changes
remote: adding changesets
remote: adding manifests
remote: adding file changes
remote: added &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; changesets with &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; changes to &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; files
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ touch $WC1/INITIAL
$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1 add INITIAL
$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1 commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master branch creation&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;master &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;root-commit&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 38576fe&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; master branch creation
 &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; files changed
 create mode &lt;span style=&#34;color:#ae81ff&#34;&gt;100644&lt;/span&gt; INITIAL
$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1 push origin master
To /tmp/server-git
 * &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;new branch&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; master -&amp;gt; master
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

  
&lt;/tr&gt;


  &lt;tr&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ hg clone ssh://localhost/$SERVER $WC2
requesting all changes
adding changesets
adding manifests
adding file changes
added &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; changesets with &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; changes to &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; files
updating to branch default
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; files updated, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; files merged, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; files removed, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; files unresolved
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git clone $SERVER $WC2
Cloning into &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/tmp/wc2-git&amp;#39;&lt;/span&gt;...
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;.
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

  
&lt;/tr&gt;


  &lt;tr&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ touch $WC1/file2
$ hg -R $WC1 branch branch1
marked working directory as branch branch1
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;branches are permanent and global, did you want a bookmark?&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
$ hg -R $WC1 add $WC2/file2
$ hg -R $WC1 commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;changes on wc1&amp;#34;&lt;/span&gt;
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ touch $WC1/file
$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1 checkout -b working-copy-1
Switched to a new branch &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;working-copy-1&amp;#39;&lt;/span&gt;
$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1 add file
$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1 commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;change 1&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;working-copy-1 de8c105&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; change &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
 &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; files changed
 create mode &lt;span style=&#34;color:#ae81ff&#34;&gt;100644&lt;/span&gt; file
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

  
&lt;/tr&gt;


  &lt;tr&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ touch $WC2/fileB
$ hg -R $WC2 branch branch2
marked working directory as branch branch2
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;branches are permanent and global, did you want a bookmark?&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
$ hg -R $WC2 add $WC2/fileB
$ hg -R $WC2 commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;changes on wc2&amp;#34;&lt;/span&gt;
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ touch $WC2/fileB
$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC2/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC2 checkout -b working-copy-2
Switched to a new branch &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;working-copy-2&amp;#39;&lt;/span&gt;
$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC2/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC2 add fileB
$ git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC2/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC2 commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;changes on wc2&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;working-copy-2 eee3889&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; changes on wc2
 &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; files changed
 create mode &lt;span style=&#34;color:#ae81ff&#34;&gt;100644&lt;/span&gt; fileB
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

  
&lt;/tr&gt;


  &lt;tr&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ annotate-output +&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WC__1__%H:%M:%S&amp;#34;&lt;/span&gt; hg -R $WC1 push --new-branch &amp;amp;
$ annotate-output +&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WC__2__%H:%M:%S&amp;#34;&lt;/span&gt; hg -R $WC2 push --new-branch
WC__2__13:31:54 I: Started hg -R /tmp/wc2-hg push --new-branch
WC__1__13:31:54 I: Started hg -R /tmp/wc1-hg push --new-branch
WC__1__13:31:57 O: pushing to ssh://localhost//tmp/server-hg
WC__1__13:31:57 O: searching &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; changes
WC__1__13:31:57 O: remote: adding changesets
WC__1__13:31:57 O: remote: adding manifests
WC__1__13:31:57 O: remote: adding file changes
WC__1__13:31:57 O: remote: added &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; changesets with &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; changes to &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; files
WC__1__13:31:57 I: Finished with exitcode &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
WC__2__13:31:58 E: abort: push failed:
WC__2__13:31:58 O: pushing to ssh://localhost//tmp/server-hg
WC__2__13:31:58 E: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;unsynced changes&amp;#39;&lt;/span&gt;
WC__2__13:31:58 O: searching &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; changes
WC__2__13:31:58 O: remote: waiting &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; lock on repository /tmp/server-hg held by
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nightcrawler:6267&amp;#39;&lt;/span&gt;
WC__2__13:31:58 I: Finished with exitcode &lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

    &lt;td&gt;
      &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ annotate-output +&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WC__1__%H:%M:%S&amp;#34;&lt;/span&gt; git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC1
push origin master &amp;amp;
$ annotate-output +&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WC__2__%H:%M:%S&amp;#34;&lt;/span&gt; git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC2/.git --work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$WC2
push origin master
WC__1__13:30:35 I: Started git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/tmp/wc1-git/.git
--work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/tmp/wc1-git push origin working-copy-1:working-copy-1
WC__2__13:30:35 I: Started git --git-dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/tmp/wc2-git/.git
--work-tree&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/tmp/wc2-git push origin working-copy-2:working-copy-2
WC__2__13:30:37 E: To /tmp/server-git
WC__1__13:30:37 E: To /tmp/server-git
WC__2__13:30:37 E: * &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;new branch&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; working-copy-2 -&amp;gt; working-copy-2
WC__1__13:30:37 E: * &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;new branch&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; working-copy-1 -&amp;gt; working-copy-1
WC__2__13:30:37 I: Finished with exitcode &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
WC__1__13:30:37 I: Finished with exitcode &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/td&gt;

  
&lt;/tr&gt;



&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Conclusión:&lt;/strong&gt; Dos pushes simultáneos sobre ramas diferentes en Mercurial dará un error a la segunda que entre, si la primera se acepta. En git ambas podrán pasar.&lt;/p&gt;
&lt;p&gt;¿Por qué ha ocurrido esto en Mercurial? ¿Qué es &lt;strong&gt;&amp;ldquo;Unsynced changes&amp;rdquo;&lt;/strong&gt;? Mirando el código es un problema en el protocolo; Mercurial realiza 4 fases principales:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Saludo&lt;/li&gt;
&lt;li&gt;Solicitar un hash con el estado de las cabezas del servidor.&lt;/li&gt;
&lt;li&gt;Ejecutar hooks&lt;/li&gt;
&lt;li&gt;Enviar los deltas con el hash. Si el hash no coincide, abortará.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;En nuestro caso, un proceso se ha quedado bloqueado en el paso 3 y el otro ha
obtenido una hash que no coincidirá más tarde. El resultado es que ambas ramas
se bloquean hasta poder alcanzar el paso 4. La primera que llegue, modificará
las cabezas y, por tanto, la hash, que hará que la segunda aborte.
Si el primer proceso falla (un hook que no devuelve 0), la segunda pasará.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nota personal:&lt;/strong&gt; Subjetivamente, encuentro mucho más útiles los mensajes de Git que de Mercurial.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Guardar la configuración de tu máquina</title>
      <link>https://magmax.org/blog/home-en-git/</link>
      <pubDate>Sat, 01 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/home-en-git/</guid>
      <description>
        
          &lt;p&gt;Antes, cuando cambiaba mi PC, siempre me encontraba con el mismo problema: tener que reconfigurar todas mis aplicaciones. Gracias a GNU/Linux, descubrí que era más sencillo mantener mi &lt;em&gt;home&lt;/em&gt; en otra partición, de manera que podía conservar esta configuración.&lt;/p&gt;
&lt;p&gt;Ahora, por suerte o por desgracia, no trabajo en una única máquina: tengo un PC y dos portátiles; en el curro tengo mi portátil, una máquina virtual &lt;em&gt;hosted&lt;/em&gt; donde suelo trabajar, una máquina virtual &lt;em&gt;unhosted&lt;/em&gt; que puedo volver a crear de vez en cuando y&amp;hellip; bueno&amp;hellip; otras 60 máquinas en las que puedo llegar a necesitar hacer algo.&lt;/p&gt;
&lt;p&gt;Gestionar mi configuración individualmente es&amp;hellip; un coñazo. Así que me planteé la opción de guardar esta configuración en un repositorio, como &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt; (ahora entendéis &lt;a href=&#34;https://magmax.org/blog/git/&#34;&gt;mi post anterior&lt;/a&gt; :D). Realmente no me entusiasmaba la idea, pero resulta que mi colega Daniel Fanjul me dijo que él ya lo hacía así.&lt;/p&gt;
&lt;p&gt;Vamos a ver cómo podemos gestionarlo de manera sencilla.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/git.png&#34;
         alt=&#34;Git&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;dos-aproximaciones&#34;&gt;Dos aproximaciones&lt;/h2&gt;
&lt;p&gt;Existen dos variantes distintas a esta solución: La primera es hacer que el home &lt;em&gt;sea&lt;/em&gt; un repositorio; la segunda, mantener el repositorio aparte, y crear enlaces a las configuraciones. Veremos que cada aproximación tiene sus ventajas y sus inconvenientes.&lt;/p&gt;
&lt;h3 id=&#34;el-home-en-git&#34;&gt;El home en Git&lt;/h3&gt;
&lt;p&gt;Si nuestro home está en &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt;, tendremos mucha basura que no queremos guardar en nuestro repositorio. Pero eso no es un problema: para eso existe el &lt;strong&gt;.gitignore&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Veamos cómo empezar (desde el &lt;em&gt;home&lt;/em&gt;, claro):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;~ $ git init
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;Initialized empty Git repository in /home/magmax/
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;~ $ ls -A1 |grep -v .gitignore &amp;gt; .gitignore
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;~ $ git add .gitignore
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;~ $ git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;initial version of my configuration&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;master &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;root-commit&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 6dfa6ad&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; initial version of my configuration
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; file changed, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; insertions&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt; create mode &lt;span style=&#34;color:#ae81ff&#34;&gt;100644&lt;/span&gt; .gitignore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ahora, cuando queramos conservar una configuración, sólo tendremos que editar el archivo &lt;em&gt;.gitignore&lt;/em&gt; para eliminarlo y añadirlo al repositorio. Poco a poco, el archivo &lt;em&gt;.gitignore&lt;/em&gt; irá quedando más pequeño y apenas será necesario tocarlo.&lt;/p&gt;
&lt;p&gt;Algunas cosas que podéis añadir ya mismo, a modo de ejercicio: &lt;em&gt;.gitconfig&lt;/em&gt;, &lt;em&gt;.bashrc&lt;/em&gt;, &lt;em&gt;.profile&lt;/em&gt;, &amp;hellip; Y algunas cosas que nunca saldrán del archivo &lt;em&gt;.gitignore&lt;/em&gt;: &lt;em&gt;.bash_history&lt;/em&gt;, &lt;em&gt;.xsession-errors&lt;/em&gt;, &amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;manteniendo-enlaces-simbólicos&#34;&gt;Manteniendo enlaces simbólicos&lt;/h3&gt;
&lt;p&gt;La otra alternativa es crear un repositorio aparte y crear enlaces simbólicos. La estructura del repositorio no tiene por qué ser la misma que la del &lt;em&gt;home&lt;/em&gt;, pero resultará más sencillo encontrar lo que buscas si tratas de mantener la misma estructura.&lt;/p&gt;
&lt;p&gt;Como ejemplo, vamos a crear el repositorio y a guardar la configuración de mi &lt;em&gt;awesome wm&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;    ~ $ mkdir Config
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;    ~ $ mkdir Config/config
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;    ~ $ mv .config/awesome Config/config
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;    ~ $ ln -s Config/config/awesome .config/awesome
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;    ~ $ cd Config
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;    ~/Config $ git init
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;    Initialized empty Git repository in /home/magmax/Config
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;    ~/Config $ git add config
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;    ~/Config $ git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;initial version of my configuration&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;master &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;root-commit&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 6dfa6ad&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; initial version of my configuration
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;     &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; file changed, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; insertions&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;     create mode &lt;span style=&#34;color:#ae81ff&#34;&gt;100644&lt;/span&gt; config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Dos cosas aquí:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La primera es hacer notar que he creado el directorio con la C mayúscula. Así quedará al principio cuando hagamos un &amp;ldquo;ls&amp;rdquo; y no estorbará.&lt;/li&gt;
&lt;li&gt;La segunda, que he evitado el punto al comienzo del nombre. Así no estará oculto el directorio.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ventajas-e-inconvenientes&#34;&gt;Ventajas e inconvenientes&lt;/h2&gt;
&lt;p&gt;Cada manera tiene unas ventajas y unos inconvenientes. Vamos a verlos algunos:&lt;/p&gt;
&lt;h3 id=&#34;todo-en-el-repo&#34;&gt;Todo en el repo&lt;/h3&gt;
&lt;p&gt;Si usamos la primera aproximación, tendremos estos inconvenientes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;puede crecer mucho y rápido&lt;/li&gt;
&lt;li&gt;puede contener cosas que no queríamos&lt;/li&gt;
&lt;li&gt;hay que estar gestionando el .gitignore con todo lo que no queremos&lt;/li&gt;
&lt;li&gt;si queremos un archivo diferente para distintas máquinas, habrá que utilizar enlaces simbólicos, complicando un poco el despliegue.&lt;/li&gt;
&lt;li&gt;puede dar lugar a fallos de seguridad, si metemos las claves ssl en el repositorio.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pero también algunas ventajas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;es dificil que nos olvidemos añadir algo al repo. Cuando preguntemos el estado (&amp;quot;&lt;em&gt;git status&lt;/em&gt;&amp;quot;), cantará todo lo nuevo.&lt;/li&gt;
&lt;li&gt;si estamos en un entorno gestionado por otros, detectaremos si nos han cambiado algo.&lt;/li&gt;
&lt;li&gt;también detectaremos si una aplicación ha cambiado algo.&lt;/li&gt;
&lt;li&gt;en una máquina nueva basta descargarse el repositorio para tenerlo todo configurado, aunque esto puede pisar algo que no nos guste&amp;hellip; ¡Pero para eso están las ramas de Git! :D&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;enlaces-simbólicos&#34;&gt;Enlaces simbólicos&lt;/h3&gt;
&lt;p&gt;Usando la segunda aproximación tenemos ya unos inconvenientes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hay que estar creando enlaces para todos y cada uno de los directorios a guardar.&lt;/li&gt;
&lt;li&gt;en una máquina nueva, hay que volver a crear todos los enlaces.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pero también ventajas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Es sencillo gestionar distinta configuración en distintas máquinas. Basta con cambiar el enlace.&lt;/li&gt;
&lt;li&gt;Seguramente ocupará menos.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;conclusión&#34;&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;Yo he optado por tenerlo todo en el repo y debo decir que es una maravilla. Comencé creándome distintos repositorios en mis máquinas y después fui uniéndolos como si fueran ramas (algo que no podría haber hecho con &lt;em&gt;mercurial&lt;/em&gt;, pero sí con &lt;em&gt;Git&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;En el trabajo tengo el problema de que no todas las máquinas pueden ver a todas
las máquinas, aunque desde mi máquina sí puedo verlas todas. En este caso, Git
vuelve a echarme una mano. Tan solo tengo que definirme distintas fuentes
remotas y trabajar con &lt;em&gt;push&lt;/em&gt; desde mi máquina en lugar de hacer &lt;em&gt;pull&lt;/em&gt; desde la
remota. Además, tengo un script &lt;a href=&#34;http://docs.fabfile.org/en/1.5/&#34;&gt;fabric&lt;/a&gt; que me
ayuda a gestionarlo todo, pero eso será otra historia&amp;hellip;&lt;/p&gt;
&lt;p&gt;¿Y vosotros? ¿Ya lo usábais? ¿Tenéis otra propuesta? ¿Cuál vais a probar?&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Git</title>
      <link>https://magmax.org/blog/git/</link>
      <pubDate>Thu, 29 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/git/</guid>
      <description>
        
          &lt;p&gt;Tenía que ocurrir más tarde o más temprano. Y es que tenía que hablar de GIT. Es lo que tiene ser influenciado por Daniel Fanjul XD&lt;/p&gt;
&lt;p&gt;Git es un sistema de control de versiones. Bueno, en realidad es algo más que eso. Es un sistema de ficheros sobre el que se ha construido un sistema de control de versiones.&lt;/p&gt;
&lt;p&gt;No soy un experto, pero creo que a lo básico llego. Y, la verdad, me hacía falta este artículo antes de escribir el siguiente XD&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/git.png&#34;
         alt=&#34;Git&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;qué-es-un-dvcs&#34;&gt;Qué es un DVCS&lt;/h2&gt;
&lt;p&gt;Los lectores habituales de este blog pueden saltarse esta sección, ya que no es la primera vez que hablo de alguno de los DVCS.&lt;/p&gt;
&lt;p&gt;Un DVCS, o &lt;em&gt;Distributed Version Control System&lt;/em&gt;, es lo que dicen sus propias siglas: un sistema de control de versiones distribuido. Dicho de otra manera, es un sistema que permite gestionar versiones de archivos y coordinar dichas versiones entre distintas máquinas.&lt;/p&gt;
&lt;p&gt;Siempre cuento la misma historia: cuando yo estaba estudiando no existían los DVCS, aunque sí había sistemas de control de versiones no distribuidos, como CVS. El caso es que tampoco los conocía. Por eso mis prácticas se encontraban en la carpeta &amp;ldquo;prácticas&amp;rdquo;, &amp;ldquo;la última&amp;rdquo;, &amp;ldquo;la definitiva&amp;rdquo;, &amp;ldquo;la definitiva de verdad&amp;rdquo;, &amp;hellip; Lo que me suponía un verdadero dolor de cabeza. Por eso llegué a la conclusión de que lo mejor era usar la fecha en orden inverso: &amp;ldquo;20120101&amp;rdquo;, &amp;ldquo;20120102&amp;rdquo;, &amp;ldquo;20120102b&amp;rdquo;, &amp;hellip;&lt;/p&gt;
&lt;p&gt;Pero estaba equivocado. Lo mejor era usar un DVCS :D&lt;/p&gt;
&lt;h2 id=&#34;antes-de-empezar&#34;&gt;Antes de empezar&lt;/h2&gt;
&lt;p&gt;Vamos a usar una configuración minimísima:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ git config --global user.name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John Doe&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;$ git config --global user.email johndoe@example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Con eso le diremos a Git quiénes somos :D&lt;/p&gt;
&lt;p&gt;No es imprescindible, pero nos evitaremos que Git proteste porque no &amp;ldquo;nos conoce&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;trabajando-en-local&#34;&gt;Trabajando en local&lt;/h2&gt;
&lt;p&gt;Como sabéis, me gusta la práctica, así que vamos a crear un pequeño proyecto para demostrar el uso de Git. Podemos inicializar un repositorio en un directorio vacío o en uno existente; esto no afectará a los archivos que se encuentren allí.&lt;/p&gt;
&lt;p&gt;Por razones obvias, vamos a trabajar sobre uno vacío, con el fin de que todos tengamos lo mismo. Lo primero es inicializar el directorio como un repositorio de Git:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ git init
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;Initialized empty Git repository in /home/magmax/git/.git/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Así de fácil. Podemos ver que ahora es un repositorio Git válido:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ git status
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# On branch master&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Initial commit&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;nothing to commit &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;create/copy files and use &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git add&amp;#34;&lt;/span&gt; to track&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Esto nos da mucha información:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Para comenzar nos dice la rama en la que estamos&amp;hellip; Eso son temas avanzados que dejo para más adelante.&lt;/li&gt;
&lt;li&gt;Nos dice que estamos en el &lt;em&gt;commit&lt;/em&gt; inicial. En el repositorio, cada &amp;ldquo;paso&amp;rdquo; se llama &amp;ldquo;commit&amp;rdquo;. Cada vez que hacemos una foto al sistema, es un &amp;ldquo;commit&amp;rdquo;. Así que un &lt;em&gt;commit&lt;/em&gt; contiene la información de nuestro directorio en el momento en que se creó dicho &lt;em&gt;commit&lt;/em&gt;. Si no lo entendéis, no os preocupéis; volveremos al tema en breve.&lt;/li&gt;
&lt;li&gt;También dice que no hay nada sobre lo que hacer &lt;em&gt;commit&lt;/em&gt; y nos da información sobre lo que podemos hacer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Así es Git: siempre nos dará información sobre posibles acciones que podemos realizar.&lt;/p&gt;
&lt;p&gt;Ahora podemos crear un archivo y ver qué pasa:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;$ touch README
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;$ git status
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# On branch master&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Initial commit&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Untracked files:&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#   (use &amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34; to include in what will be committed)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#	README&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;nothing added to commit but untracked files present &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;use &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git add&amp;#34;&lt;/span&gt; to track&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ajá! la cosas cambian. Ahora ha encontrado un fichero del que no sabe nada. Nuevamente nos indica que podemos añadirlo para que sea &amp;ldquo;commiteado&amp;rdquo;. Pues vamos a ello:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;$ git status
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# On branch master&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Initial commit&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Changes to be committed:&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#   (use &amp;#34;git rm --cached &amp;lt;file&amp;gt;...&amp;#34; to unstage)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#	new file:   README&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Perfecto. Ahora nos dice que hay un archivo nuevo, que es &lt;em&gt;README&lt;/em&gt;. Dice que será &amp;ldquo;commiteado&amp;rdquo; a no ser que lo borremos con el comando ése que indica (&amp;ldquo;rm&amp;rdquo; viene de &amp;ldquo;remove&amp;rdquo;).&lt;/p&gt;
&lt;p&gt;Aquí aparece un término raro: &amp;ldquo;unstage&amp;rdquo;; viene del &lt;em&gt;stage&lt;/em&gt;, al que también llaman &lt;em&gt;index&lt;/em&gt; en la documentación. Básicamente consiste en un lugar donde Git se guarda las cosas que va a realizar; una especie de cajón temporal. Eso nos permitirá jugar con los archivos hasta dejarlos como queremos y, entonces, fijarlos con un &lt;em&gt;commit&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Este &lt;em&gt;index&lt;/em&gt; o &lt;em&gt;stage&lt;/em&gt; es muy útil y tiene muchas implicaciones. Sin embargo, cuando se está aprendiendo Git, consiste más en un estorbo que en otra cosa. Así que vamos a ignorarlo y a dejarlo en el cajón de los conceptos avanzados.&lt;/p&gt;
&lt;p&gt;Ha llegado el momento de hacer nuestro primer &lt;em&gt;commit&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ git commit -a -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mi primer commit&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;master &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;root-commit&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; ba1429d&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Mi primer commit
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; files changed
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt; create mode &lt;span style=&#34;color:#ae81ff&#34;&gt;100644&lt;/span&gt; README
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Como veis le indico dos opciones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-a&lt;/strong&gt; indica que lo añada todo. Así me evito contaros más sobre el &lt;em&gt;stage&lt;/em&gt;. Si no lo pongo, sólo hará caso de lo que tenga apuntado en el &lt;em&gt;stage&lt;/em&gt;. En este caso es redundante, ya que todas las operaciones ya se encuentran apuntadas en el &lt;em&gt;stage&lt;/em&gt;, pero me curo en salud. Si Git no conoce un fichero (no hemos hecho &lt;em&gt;add&lt;/em&gt;), lo ignorará tanto con &amp;ldquo;-a&amp;rdquo; como sin él; lo mismo ocurre si lo conoce pero no se ha modificado. Ahora, si se ha modificado y no hemos hecho un &amp;ldquo;add&amp;rdquo; de nuevo, entonces sólo lo considerará si pusimos el &amp;ldquo;-a&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-m &amp;ldquo;mensaje&amp;rdquo;&lt;/strong&gt; Añade un mensaje al &lt;em&gt;commit&lt;/em&gt;, de manera que, cuando veamos la historia, nos quede claro qué hicimos ahí. Si no lo ponéis se abrirá el editor por defecto para que pongáis el mensaje. Podéis ignorarlo, pero no es una buena práctica. Sed concisos, pero precisos.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Veamos cómo estamos:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ git status
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# On branch master&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;nothing to commit &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;working directory clean&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Todo limpio, como debe ser.&lt;/p&gt;
&lt;p&gt;Vamos a modificar el archivo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;$ echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Archivo modificado&amp;#34;&lt;/span&gt; &amp;gt; README
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;$ git status
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# On branch master&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Changes not staged for commit:&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#   (use &amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34; to update what will be committed)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#   (use &amp;#34;git checkout -- &amp;lt;file&amp;gt;...&amp;#34; to discard changes in working directory)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#	modified:   README&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;no changes added to commit &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;use &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git add&amp;#34;&lt;/span&gt; and/or &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git commit -a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Como vemos, Git se da cuenta de que hay cosas que no hemos publicado. Y Git nos dice qué tenemos que hacer para descartar los cambios o fijarlos con un &lt;em&gt;commit&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Además, podemos ver la historia de lo que hemos hecho:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ git log
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;commit ba1429d0d9ef7c65e6fbd800f74bf7e06361540c
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;Author: Miguel Angel Garcia &amp;lt;miguelangel.garcia@gmail.com&amp;gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;Date:   Thu Nov &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt; 17:14:36 &lt;span style=&#34;color:#ae81ff&#34;&gt;2012&lt;/span&gt; +0100
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;    Mi primer commit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y tendremos orden en lo que vamos haciendo.&lt;/p&gt;
&lt;h2 id=&#34;trabajando-en-remoto&#34;&gt;Trabajando en remoto&lt;/h2&gt;
&lt;p&gt;Hasta aquí todo es similar a cómo funcionan los sistemas de control de versiones no distribuidos. Pero la gracia está, justamente, en disponer de un repositorio central&amp;hellip; O muchos XD&lt;/p&gt;
&lt;p&gt;Aquí tenemos distintas opciones, como irnos a &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; o a &lt;a href=&#34;https://bitbucket.org/&#34;&gt;BitBucket&lt;/a&gt; y crearnos un repositorio. Voy a explicar el proceso con un servidor local, situado en otro directorio. Para usarlo con un sistema en &lt;em&gt;cloud&lt;/em&gt; sería igual, pero indicando la url que nos proporcionan en lugar de la ruta al directorio (además, nos darán ayuda XD).&lt;/p&gt;
&lt;p&gt;Lo primero es crear un repositorio &amp;ldquo;bare&amp;rdquo; en otro directorio:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;/home/magmax/git-master $ git init --bare
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;Initialized empty Git repository in /home/magmax/git-master/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y ahora volvemos a nuestra &amp;ldquo;working copy&amp;rdquo;, que no es más que la copia local o lo que hicimos en el paso anterior. Vamos a decirle dónde está el maestro donde queremos guardar los cambios; éste es el paso que cambiaría si usáis un &lt;em&gt;hosting&lt;/em&gt; externo o si usáis otra máquina:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ git remote add origin /home/magmax/git-master/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y ahora empujamos los cambios:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;$ git push origin master
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;Counting objects: 3, &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;.
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;Writing objects: 100% &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;3/3&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;220&lt;/span&gt; bytes, &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;.
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;Total &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;delta 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, reused &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;delta 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;Unpacking objects: 100% &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;3/3&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;.
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;To /home/miguel/Pruebas/git/example2
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt; * &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;new branch&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;      master -&amp;gt; master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Por ser la primera vez, hemos tenido que indicarle el nombre del repositorio remoto (&lt;strong&gt;origin&lt;/strong&gt;) y la rama que queremos empujar (&lt;strong&gt;master&lt;/strong&gt;, la única que tenemos). A partir de ahora bastará con &amp;ldquo;&lt;em&gt;git push&lt;/em&gt;&amp;rdquo;. Y con esto tenemos muchas cosas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Por un lado, copias de seguridad&lt;/li&gt;
&lt;li&gt;Por otro, la posibilidad de compartir el código&lt;/li&gt;
&lt;li&gt;¡Y la posibilidad de trabajar con otra gente colaborativamente!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Puedo asegurar que mi sistema de directorios con la fecha estaba a años luz de estas tres ventajas.&lt;/p&gt;
&lt;p&gt;Ya solo me quedan 4 órdenes básicas que contar en este artículo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cuando queramos actualizar nuestra copia local (&amp;quot;&lt;em&gt;working copy&lt;/em&gt;&amp;quot;) con lo que haya en remoto, basta con ejecutar &amp;ldquo;&lt;strong&gt;git fetch&lt;/strong&gt;&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Cuando queramos mezclar nuestros cambios con los remotos, podemos hacer &amp;ldquo;&lt;strong&gt;git merge&lt;/strong&gt;&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Los dos pasos anteriores quedan resumidos en uno: &amp;ldquo;&lt;strong&gt;git pull&lt;/strong&gt;&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Y si queremos hacer otra copia local, basta con &amp;ldquo;&lt;strong&gt;git clone /home/magmax/git-master/ new-copy&lt;/strong&gt;&amp;rdquo;, que creará un directorio nuevo&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;git-es-mucho-más-que-esto&#34;&gt;Git es mucho más que esto&lt;/h2&gt;
&lt;p&gt;En este artículo sólo he querido mostrar lo más básico de lo más básico del uso de Git. Git permite muchas más cosas, como la gestión de ramas, sistemas de &lt;em&gt;pull-request&lt;/em&gt;, eliminación de historia, &amp;hellip; Pero eso se sale de este tutorial básico.&lt;/p&gt;
&lt;p&gt;Hay miles de tutoriales, la mayor parte mejores que éste. Sin embargo, yo os remitiré a la &lt;a href=&#34;http://git-scm.com/documentation&#34;&gt;documentación básica de Git&lt;/a&gt;, que es genial. Recomiendo la versión inglesa, ya que el resto puede no estar del todo actualizada.&lt;/p&gt;
&lt;p&gt;Así mismo, diré que existen muchos otros DVCS, gratuitos, libres, de pago&amp;hellip; De todos los gustos y colores: &lt;a href=&#34;http://mercurial.selenic.com/&#34;&gt;Mercurial&lt;/a&gt;, &lt;a href=&#34;http://www.plasticscm.com/&#34;&gt;PlasticSCM&lt;/a&gt;,&amp;hellip;&lt;/p&gt;
&lt;p&gt;En mi opinión, Git es rápido, fiable y resuelve todos los problemas con los que me he encontrado hasta ahora. Así que&amp;hellip; ¿por qué no darle una oportunidad?&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Sistemas de Control de Versiones (Subversion y Mercurial)</title>
      <link>https://magmax.org/blog/mercurial-subversion/</link>
      <pubDate>Mon, 30 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://magmax.org/blog/mercurial-subversion/</guid>
      <description>
        
          &lt;p&gt;En esta ocasión vamos a ver qué es un Sistema de Control de Versiones y cómo se utiliza.&lt;/p&gt;
&lt;p&gt;Voy a dividir la entrada en 4 partes bien diferenciadas. Primero una breve introducción, explicando qué son y qué tipos hay. A continuación, una descripción del uso de VCS, seguida por una descripción de DVCS. Finalmente, una entrada avanzada de cómo utilizar DVCS. Si ya eres un usuario de DVCS, a lo mejor te interesa saltarte las dos primeras partes.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://magmax.org/images/hgvssvn.jpg&#34;
         alt=&#34;Mercurial y Subversion&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;introducción&#34;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Un &lt;em&gt;Sistema de Control de Versiones&lt;/em&gt; (SCV o, en inglés, VCS o &amp;ldquo;Version Control System&amp;rdquo;) tiene una estructura similar a un sistema de archivos. La diferencia está en que se puede acceder a distintas versiones de los archivos y operar con estas versiones. Es decir: &lt;em&gt;Es un sistema de ficheros con versionado&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Hay distintos tipos. Los más sencillos son los sistemas locales, útiles para un único usuario. En la era de la nube, no tiene sentido en pensar en sistemas de este tipo y ya no se mantiene ninguno de éstos. Hace tiempo trabajé con PVCS y era un verdadero infierno (una persona estaba encargada del PVCS y era la única que accedía al mismo). Los ignoraremos.&lt;/p&gt;
&lt;p&gt;Un poco más complejos son los denominados VCS (&amp;ldquo;Version Control System&amp;rdquo;). Éstos diferencian entre el sistema central y la copia local (&lt;em&gt;working copy&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Los más utilizados actualmente son los DVCS (&amp;quot;&lt;em&gt;Distributed Version Control System&lt;/em&gt;&amp;quot;), en los que puede haber más de una copia remota y éstas se pueden sincronizar entre ellas.&lt;/p&gt;
&lt;p&gt;Echémosle un vistazo rápido a todos ellos.&lt;/p&gt;
&lt;h2 id=&#34;vcs&#34;&gt;VCS&lt;/h2&gt;
&lt;p&gt;Aunque las empresas están abandonándolos, aún siguen siendo muy utilizados.&lt;/p&gt;
&lt;p&gt;El sistema consiste, básicamente, en una copia local y un servidor remoto. Las modificaciones se realizan sobre la copia local y luego se envían al servidor. Cada máquina que tiene una copia local se sincroniza bajo demanda con el servidor remoto.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://subversion.tigris.org/&#34;&gt;Subversion&lt;/a&gt; , &lt;a href=&#34;http://cvs.nongnu.org/&#34;&gt;CVS&lt;/a&gt; , &amp;hellip; Han sido los más utilizados. Vamos a ver un poquito de &lt;em&gt;Subversion&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;init&lt;/em&gt;: permite inicializar un repositorio.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;checkout&lt;/em&gt;: descarga un repositorio remoto en una carpeta local (&lt;em&gt;working copy&lt;/em&gt;), desde la que podemos manipular los archivos.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;update&lt;/em&gt;: comprueba si hay actualizaciones en el servidor y se las descarga a la copia local. Si hay conflictos (hemos tocado un archivo que alguien ya ha modificado en el servidor), tratará de resolverlos. Si no puede, dejará los archivos marcados como &amp;ldquo;conflicto&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;add&lt;/em&gt;: mientras que no hagamos &lt;em&gt;add&lt;/em&gt; a un archivo, éste será ignorado.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;commit&lt;/em&gt;: crea una nueva versión, enviando al servidor las modificaciones desde la última vez que se utilizó esta orden.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;remove&lt;/em&gt;: el archivo deja de estar gestionado. Hay que tener en cuenta que las versiones que subimos con el archivo seguirán estando ahí, pero a partir de ese momento, las nuevas versiones no lo mostrarán.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;diff&lt;/em&gt;: permite ver las diferencias existentes entre las distintas versiones de un mismo fichero.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;log&lt;/em&gt;: muestra los cambios ocurridos en el repositorio.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El uso típico de este tipo de repositorios es:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;El administrador crea el repositorio (&lt;em&gt;init&lt;/em&gt;) y publica la dirección en la que se encuentra (https, ssh, &amp;hellip;).&lt;/li&gt;
&lt;li&gt;El usuario se descarga el repositorio a su copia local (&lt;em&gt;checkout&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;El usuario comienza un ciclo de iteraciones sucesivas de las órdenes siguientes, aunque usará el resto de forma ocasional:
&lt;ol&gt;
&lt;li&gt;Modificar el código&lt;/li&gt;
&lt;li&gt;Subir cambios (&lt;em&gt;commit&lt;/em&gt;). En este punto se realiza un &lt;em&gt;update&lt;/em&gt; automático y, si hay conflictos, se exige su resolución antes de permitir el &lt;em&gt;commit&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Los sistemas de este tipo tienen un problema: si no hay conexión, no se puede hacer nada con el repositorio, ya que la mayor parte de la lógica está en el servidor.&lt;/p&gt;
&lt;h2 id=&#34;dvcs&#34;&gt;DVCS&lt;/h2&gt;
&lt;p&gt;En este caso entra en juego un componente más: un servidor local. Este servidor local puede ser una copia local del servidor remoto. Esta característica permite trabajar con el servidor aunque no exista conexión a la red. Cuando se desee, se puede sincronizar el servidor local con el servidor remoto.&lt;/p&gt;
&lt;p&gt;La manera de trabajar con el servidor local es muy similar a la utilizada por los &lt;em&gt;VCS&lt;/em&gt;, aunque pueden cambiar los nombres de las órdenes. Por ejemplo, la orden &amp;ldquo;&lt;em&gt;clone&lt;/em&gt;&amp;rdquo; de &lt;em&gt;Mercurial&lt;/em&gt; equivaldría al &amp;ldquo;&lt;em&gt;checkout&lt;/em&gt;&amp;rdquo; de subversion.&lt;/p&gt;
&lt;p&gt;Evidentemente, hay una serie de instrucciones adicionales que nos permiten trabajar con el servidor remoto. Dado que esto no es un tutorial de &lt;em&gt;mercurial&lt;/em&gt;, obviaré estas órdenes comunes y me centraré en las nuevas operaciones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;pull&lt;/em&gt;: permite traerse los cambios del repositorio remoto al repositorio local.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;push&lt;/em&gt;: Envía los cambios del repositorio local (ojo, no la copia de trabajo) al repositorio remoto.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;branch&lt;/em&gt;: Permite crear ramas nuevas. De esto hablaremos en el siguiente punto.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;branches&lt;/em&gt;: Muestra la lista de ramas existentes.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;merge&lt;/em&gt;: Mezcla dos colas.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;out&lt;/em&gt;: Muestra la lista de &lt;em&gt;changesets&lt;/em&gt; (commits) que están en el servidor local pero no en el servidor remoto.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No hay un ciclo habitual con los DVCS. Sin embargo, podríamos poner como &amp;ldquo;ciclo sencillo&amp;rdquo; la intercalación entre:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pull&lt;/li&gt;
&lt;li&gt;Ciclos de tipo VCS&lt;/li&gt;
&lt;li&gt;push&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Algunos ejemplos de DVCS son &lt;a href=&#34;http://mercurial.selenic.com/&#34;&gt;Mercurial&lt;/a&gt; , &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt; , &lt;a href=&#34;http://bazaar.canonical.com/en/&#34;&gt;Bazaar&lt;/a&gt; , &lt;a href=&#34;http://veracity-scm.com/&#34;&gt;Veracity&lt;/a&gt;  o
&lt;a href=&#34;http://www.plasticscm.com/&#34;&gt;Plastic SCM&lt;/a&gt; .&lt;/p&gt;
&lt;h2 id=&#34;dvcs-avanzado&#34;&gt;DVCS Avanzado&lt;/h2&gt;
&lt;p&gt;Vamos a ver aquí tres niveles. El primero se tratará del manejo de ramas (&amp;ldquo;branches&amp;rdquo;); el segundo, de &lt;em&gt;hooks&lt;/em&gt; y el tercer, del manejo de repositorios remotos.&lt;/p&gt;
&lt;h3 id=&#34;branches&#34;&gt;Branches&lt;/h3&gt;
&lt;p&gt;El manejo de ramas permite realizar un trabajo paralelo sin afectar a la rama principal. Las ramas principales suelen llamarse algo como &amp;ldquo;&lt;em&gt;trunk&lt;/em&gt;&amp;rdquo;, &amp;ldquo;&lt;em&gt;default&lt;/em&gt;&amp;rdquo;, &amp;hellip; y suelen ser las más importantes.&lt;/p&gt;
&lt;p&gt;Existe una corriente que defiende el &amp;ldquo;&lt;em&gt;Un cambio, una rama&lt;/em&gt;&amp;rdquo;, de manera que antes de comenzar a hacer cambios, debes crearte una rama y, posteriormente, mezclar con la rama principal. Este planteamiento permite pasar varios días trabajando en la rama sin afectar al trabajo de los demás. No es necesario esperar al último momento para aplicar todos los cambios, ya que se puede mezclar una rama con la rama principal en cualquier momento, facilitando así el poder actualizarse o reduciendo los posibles conflictos.&lt;/p&gt;
&lt;p&gt;Existe también la posibilidad de crear ramas de ramas o de mezclarlas entre ellas, complicando así el grafo generado.&lt;/p&gt;
&lt;p&gt;Hay que tener en cuenta que, durante la mezcla de código, es posible que el algoritmo de mezclado falle, así que es buena idea combinar estas técnicas con robustas baterías de pruebas.&lt;/p&gt;
&lt;h3 id=&#34;hooks&#34;&gt;Hooks&lt;/h3&gt;
&lt;p&gt;Los repositorios pueden lanzar acciones automáticas cuando se producen ciertos eventos. Por ejemplo, podrían enviarnos un e-mail cuando una rama se mezcla con la rama principal, o comprobar que el código cumple ciertos criterios de calidad.&lt;/p&gt;
&lt;p&gt;Este tipo de técnicas pueden ser muy provechosas, aunque puede requerir tanto mantenimiento como para dedicar parte del personal a manejarlas.&lt;/p&gt;
&lt;h3 id=&#34;múltiples-repositorios&#34;&gt;Múltiples repositorios&lt;/h3&gt;
&lt;p&gt;Finalmente, llegamos a los múltiples repositorios. Existe la opción de tener repositorios remotos réplica. Esto significa que podemos sincronizar nuestros cambios contra una de estas réplicas y ésta se sincronizará tarde o temprano con otra de las réplicas.&lt;/p&gt;
&lt;p&gt;La sincronización entre repositorios puede ser manual o automática, y puede dar lugar a un &lt;em&gt;flujo de trabajo&lt;/em&gt; distinto según se necesite. Por ejemplo, puede utilizarse esta técnica para mantener repositorios remotos, de manera que se incremente la velocidad entre los &lt;em&gt;working copies&lt;/em&gt; y el servidor central o, lo que puede resultar más provechoso, definir unas calidades para cada uno de los repositorios.&lt;/p&gt;
&lt;p&gt;Veamos un ejemplo&amp;hellip; Podemos tener el repositorio de uso habitual, donde &amp;ldquo;cabe todo&amp;rdquo;, llamándole &amp;ldquo;&lt;em&gt;Development&lt;/em&gt;&amp;quot;; otro repositorio del que se realizan pruebas unitarias automáticas, llamado &amp;ldquo;&lt;em&gt;testing&lt;/em&gt;&amp;quot;; si las pruebas automáticas pasan, podríamos tener otro con las pruebas de integración &amp;ldquo;&lt;em&gt;integration&lt;/em&gt;&amp;quot;; si estas pasan, otro con las pruebas de calidad &amp;ldquo;&lt;em&gt;QA&lt;/em&gt;&amp;rdquo; y, si estas pasan, otro con el código definitivo &amp;ldquo;&lt;em&gt;Release&lt;/em&gt;&amp;rdquo;. Cuando hay una nueva rama en este repositorio, podríamos sincronizarlo con &amp;ldquo;&lt;em&gt;Development&lt;/em&gt;&amp;rdquo; y, así, cerramos el círculo.&lt;/p&gt;
&lt;p&gt;No he leído nada aún al respecto, pero supongo que a esto es a lo que hace referencia la &amp;ldquo;&lt;em&gt;Integración contínua&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Con el fin de no hacer crecer disparatadamente todos los repositorios, se pueden mezclar sólo ciertas ramas de un repositorio a otro, simplificando las mezclas y reduciendo la historia.&lt;/p&gt;
&lt;h2 id=&#34;conclusión&#34;&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;El uso de todas las técnicas avanzadas puede provocar flujos de trabajo muy diferentes, pero todos ellos útiles para el desarrollo de software. Cualquier empresa de más de 5 desarrolladores que trate de hacer software sin utilizar un VCS o un DVCS está destinada al fracaso; no podrá obtener una calidad competitiva ni unos plazos aceptables.&lt;/p&gt;
&lt;h2 id=&#34;más-información&#34;&gt;Más información&lt;/h2&gt;
&lt;p&gt;Hoy día es raro no haber oído hablar de los sistemas de control de versiones. De
todas maneras, os recomiendo apuntaros al blog de mis amigos de `Codice
Software]  donde, entre muchas cosas interesantes, explican más a fondo &lt;a href=&#34;http://www.plasticscm.com/infocenter/quick-start/task-cycle-in-plastic-scm.aspx&#34;&gt;un
flujo de trabajo&lt;/a&gt;  con su propia herramienta.&lt;/p&gt;
&lt;p&gt;En breve voy a comenzar la lectura de un libro que promete ser interesante,
&lt;a href=&#34;http://www.ericsink.com/&#34;&gt;Version Control by Example&lt;/a&gt;, propuesto por Eric Sink, que os podéis descargar
gratuítamente o, si tenéis suerte como yo, &lt;a href=&#34;http://www.ericsink.com/entries/vcbe_print_edition_free.html&#34;&gt;conseguirlo de forma gratuita en
papel&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;También os propongo echar un ojo a la &lt;a href=&#34;http://en.wikipedia.org/wiki/Revision_control&#34;&gt;Wikipedia&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Y, por si fuera poco, existe la posibilidad de utilizar algunos de ellos de
forma remota, utilizando &lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt; , &lt;a href=&#34;https://bitbucket.org/&#34;&gt;Bitbucket&lt;/a&gt; , &lt;a href=&#34;https://launchpad.net/&#34;&gt;Launchpad&lt;/a&gt; , &lt;a href=&#34;http://savannah.gnu.org/&#34;&gt;Savannah&lt;/a&gt; ,
&lt;a href=&#34;http://gna.org/&#34;&gt;Gna!&lt;/a&gt; , &amp;hellip; Para gustos, los -colores- sistemas de control de versiones :D&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
